########################################### Abstract syntax ############################################

Variables:          x,y
Statevars:          z
Type constants:     C

Locations:          l
Actor refs:         a,b
Message tags:       m

Integers:           i
Floats:             f
Strings:            s

Expressions:        E       ::=     x  |  z  |  V  |  (A)  |  lambda F: E  |  C  |
                                    E(A)  |  E.n  |  E.x  |  E if E else E  |  E is E  |
                                    await E  |  isinstance(E,C)  |  do S

Actuals:            A       ::=     E,A    |  *E,M   |  M  |  ***E
Mappings actuals:   M       ::=     x=E,M  |  **E  |  .

Formals:            F       ::=     x,F  |  x=E,F  |  *x,K   |  K  |   ***x
Keyword formals:    K       ::=     x,K  |  x=E,K  |  **x  |  .

Values:             V,W     ::=     True  |  False  |  None  |  (R)  |
                                    ---- Only intangible constructs below
                                    CLOS(B;F):S  |  l  |  a  |  a.m  |  (C;B)  |
                                    ACTOR(V)  |  ASYNC(a,V)  |  CLASS(C):B

Value rows:         R       ::=     O,B                                             associative
Orderings:          O       ::=     O,V    |  .                                     associative
Bindings:           B       ::=     B,x=V  |  B,C=V  |  .                           associative & commutative\duplicates, disjoint C

Statements:         S       ::=     E  |  x = E  |  (F) = E  |  D  |  return E  |
                                    E.x = E  |  if E: S else S  |  while E: S  |
                                    var z = E  |  z = E  |  after E: E'  |
                                    raise E  |  try S Z else S finally S  |
                                    pass  |  S; S                                   associative, with unit 'pass'

Declarations:       D       ::=     def x(F): S  |
                                    actor x(F): S  |  
                                    class C(C): M  |
                                    D; D                                            associative & commutative & disjoint

Excepts:            Z       ::=     except C as y: S Z  |  .

---- Only intangible constructs below

Global states:      G       ::=     a:<L|Q>  |  G,G                                 associative, commutative & disjoint
Local states:       L       ::=     z=V, L  |  l=V, L  |  .                         associative, commutative & disjoint
Queues:             Q       ::=     m=E,Q  |  .                                     associative & disjoint
Histories:          H       ::=     m=V,H  |  m=do raise V, H  |  .                 associative & disjoint

E-in-E contexts:    EE      ::=     _.x  |  _(A)  |  E if _ else E  |  
                                    V(O,_,A)  |  V(O,*_,M)  |  V(O,***_)  |  V(R,x=_,M)  |  V(R,**_)  |
                                    (O,_,A)  |  (O,*_,M)  |  (O,***_)  |  (R,x=_,M)  |  (R,**_)  |
                                    _ is E  |  V is _  |  await _  |  isinstance(_,C)

E-in-S contexts:    SE      ::=     _  |  return _  |  x = _  |  (F) = _  |  if _: S else S  |
                                    _.x = E  |  var z = _  |  z = _  |  raise _  |
                                    after _: x(A)  |  after V: _
                                    
S-in-S contexts:    SS      ::=     _; S  |  try _ Z else S finally S

E-in-Q contexts:    QE      ::=     H, m=_, Q


####################################### Expression evaluation ##########################################

***** B |- C(C') ********************

B  |-  C(C)

B,C=CLASS(C'):B'   |-  C(C1)                                                    if  B |- C'(C1)


***** B |- L | E --> L' | E' *******

B  |-  L  |  EE[E]          -->     L'  |  EE[E']                               if  B |- L | E --> L' | E'

B  |-  L  |  do S           -->     L'  |  do S'                                if  B |- L | S --> L' | S'

B  |-  L  |  E              -->     L  |  E'                                    if  B |- E --> E'

B  |-  L,z=V  |  z          -->     L,z=V  |  V

B  |-  L,l=(C;B')  |  l.x   -->     L,l=(C;B')  |  V                            if  B' |- x --> V
B  |-  L,l=(C;B')  |  l.x   -->     L,l=(C;B')  |  CLOS(B2,y=l;F):S             if  x # B' and B |- C.x --> CLOS(B2;y,F):S and @classattr x
B  |-  L,l=(C;B')  |  l.x   -->     L,l=(C;B')  |  V                            if  x # B' and B |- C.x --> V otherwise

B  |-  L  |  C(R)           -->     L,l=(C;.)  |  do l._init_(R); return l      if  B = B1,C=CLASS(C'):B2  and  N |- C(object)

B  |-  L,l=(C;B')  |  isinstance(l,C')    
                            -->     L,l=(C;B')  |  True                         if  B |- C(C')
                            -->     L,l=(C;B')  |  False                        if  not B |- C(C')


***** B |- E --> E' ****************

B  |-  E                    -->     E'                                          if  E --> E'

B,x=V  |-  x                -->     V

B  |-  lambda F: E          -->     CLOS(B;F): return E

B  |-  (C;B').x             -->     V                                           if  B' |- x --> V
B  |-  (C;B').x             -->     CLOS(B2,y=(C;B');F):S                       if  x # B' and B |- C.x --> CLOS(B2;y,F):S and @classattr x
B  |-  (C;B').x             -->     V                                           if  x # B' and B |- C.x --> V otherwise

B,C=CLASS(C'):B'  |-  C.x   -->     V                                           if  (B').x --> V
B,C=CLASS(C'):B'  |-  C.x   -->     V                                           if  x # B' and B |- C'.x --> V

B  |-  C(B')                -->     (C;B')                                      if  B = B1,C=CLASS(C'):B2  and  N |- C(struct)

B  |-  isinstance((C;B'),C')-->     True                                        if  B |- C(C')
                            -->     False                                       if  not B |- C(C')


***** E --> E' *********************

E1 if True else E2          -->     E1
E1 if False else E2         -->     E2

do B; pass                  -->     None
do B; return V              -->     V                                           if  fc(V) # dc(B)
do B; raise V               -->     do raise V                                  if  fc(V) # dc(B)

EE[do raise V]              -->     do raise V

(O,*(O'),M)                 -->     (O,O',M)
(O,B,**(B'))                -->     (O,B',B)                                    (The binding order...!)

V(R)                        -->     do B; (F)=(R); S                            if  V = CLOS(B;F):S

(V0,..,Vn,R).n              -->     Vn
(R,x=V).x                   -->     V

l is l                      -->     True
l is l'                     -->     False                                       if  l != l'

a is a                      -->     True
a is b                      -->     False                                       if  a != b


######################################## Statement execution ###########################################


***** B |- L | S --> L' | S' *******

B  |-  L  |  SS[S]          -->     L'  |  SS[S']                               if  B |- L | S --> L' | S'

B  |-  L  |  SE[E]          -->     L'  |  SE[E']                               if  B |- L | E --> L' | E'

B  |-  L  |  S              -->     L'  |  S'                                   if  L | S --> L' | S'

B  |-  L  |  S              -->     L  |  S'                                    if  B |- S --> S'


***** B |- S --> S' ****************

B  |-  B'; S                -->     B'; S'                                      if  B,B' |- S --> S'

B  |-  S                    -->     S'                                          if  S --> S'

B  |-  D                    -->     B'                                          if  B,B' |- D ==> B'


***** S --> S' *********************

V; S                        -->     S
return V; S                 -->     return V
raise V; S                  -->     raise V

if True: S1 else S2         -->     S1
if False: S1 else S2        -->     S2
while E: S                  -->     if E: S; while E: S else pass

(x,F) = (V,O,B)             -->     x = V; (F) = (O,B)
(x=E,F) = (None,O,B)        -->     x = E; (F) = (O,B)
(x=E,F) = (V,O,B)           -->     x = V; (F) = (O,B)
(*x,K) = (O,B)              -->     x = (O); (K) = (B)
(***x) = (O,B)              -->     x = (O,B)
(x,K) = (x=V,B)             -->     x = V; (K) = (B)
(x=E,K) = (x=None,B)        -->     x = E; (K) = (B)
(x=E,K) = (x=V,B)           -->     x = V; (K) = (B)
(**x) = (B)                 -->     x = (B)
() = ()                     -->     pass

SE[do raise V]              -->     raise V

try B; S Z else S1 finally S2                       -->   B; try S Z else S1 finally S2
try return V Z else S1 finally S2                   -->   S2; return V
try pass Z else pass finally S2                     -->   S2
try pass Z else S1 finally S2                       -->   try S1 . else pass finally S2
try raise V except C as y: S Z else S1 finally S2   -->   try raise V Z else S1 finally S2          if  V = (C';B) and C != C'
try raise V except C as y: S Z else S1 finally S2   -->   try y=V; S . else pass finally S2         if  V = (C;B)
try raise V . else S1 finally S2                    -->   S2; raise V


***** L | S --> L' | S' ************

L  |  B; S                  -->     L'  |  B; S'                                    if  L | S --> L' | S'

L  |  var z=V               -->     L,z=V  |  pass
L,z=V  |  z = W             -->     L,z=W  |  pass

L,l=(C;B)  |  l.x = V       -->     L,l=(C;B),x=V  |  pass                          if  x # B
L,l=(C;B),x=W  |  l.x = V   -->     L,l=(C;B),x=V  |  pass


***** B |- D ==> B *****************

B  |-  def x(F): S          ==>     x = CLOS(B;F): S
B  |-  actor x(F): S        ==>     x = ACTOR(CLOS(B;_self_,F):S)
B  |-  class C(C'): M       ==>     C = CLASS(C'): B'                               if  B |- M ==> B'
B  |-  D1; D2               ==>     B1; B2                                          if  B |- D1 ==> B1 and B |- D2 ==> B2


***** B |- M ==> B *****************

B  |-  x=y,M                ==>     x=V,B'                                          if  B |- x --> V and B |- M ==> B'
B  |-  .                    ==>     .



######################################### Global reduction #############################################


***** B |- G --> G' ****************

B  |-  G1, G2               -->     G1', G2                                         if  B |- G1 --> G1'

B  |-  a:<L | QE[E]>        -->     a:<L' | QE[E']>                                 if  B |- L | E --> L' | E'

B  |-  G                    -->     G'                                              if  G --> G'


***** G --> G' *********************

a:<L | QE[ ASYNC(a,V)(R) ]>                               -->     a:<L | QE[ a.m ],m=V(R)>
a:<L | QE[ ASYNC(b,V)(R) ]>,  b:<L' | Q>                  -->     a:<L | QE[ b.m ]>,           b:<L' | Q,m=V(R)>
a:<L | QE[ ACTOR(V)(R) ]>                                 -->     a:<L | QE[ await b.m ]>,     b:< . | m=V(b,R)>
a:<L | QE[ await b.m ]>,      b:<L' | H,m=V,Q>            -->     a:<L | QE[ V ]>,             b:<L' | H,m=V,Q>

a:<L | QE[ await b.m ]>,      b:<L' | H,m=do raise V,Q>   -->     a:<L | QE[ do raise V ]>,    b:<L' | H,m=do raise V,Q>




Recent decisions:
- Mutable lists, dicts and sets are true class instances (although built-in)
- Frozen lists, dicts and sets are true immutable class instances (although built-in)
- Automatic coercion of mutable objects into immutable ones is abandoned for now (replaced by explicit conversion calls)
- The 'protocol' and 'extension' declarations introduce static overloading, which gets translated into class declaration and explicit witness terms
- Attribute selection can thus be overloaded, and supported on any type
- Indexed selection and indexed update get translated to overloaded _getitem_ and _setitem_ calls, respectively
- Built-in names int, float, str and bool are constructor/conversion functions, supporting multiple argument types via overloading
- Class inheritance is single ancestor only (all other types of mix-ins are expressed as protocol adoption)
- Classes are the only nominal types, and only these support the 'isinstance' primitive
- Narrowing of the option type is done through ==None and !=None comparisons


=========================================================================================================

Type inference:

- Function arities always match
- Short-hand positional arguments are preceeded by explicit keywords
- Keyword arguments are in type order
- Extra arguments are converted to explicit tupes/records
- Missing arguments are replaced by explicit None values
- Protocols and extensions are translated into classes
- Overloaded names (global or attributes) are explicitly qualified by class
- Binary and unary operators are replaced by their corresponding __op__ calls
- Indexed and sliced expressions (Index/Slice) are replaced by __getitem__/__getslice__ calls
- Assignments to indexed and sliced patterns (PIndex/PSlice) are replaced by __setitem__/__setslice__ calls

Normalization:
- All imported or built-in names are qualified by module, including those imported by 'from _ import'
- All module aliases are replaced by their original module name
X All parameters are positional
X Parameter defaults are moved inside function definitions
- Comprehensions are translated into loops
X String literals are concatenated
- Tuple (and list) patterns are replaced by a var pattern followed by explicit element assignments
- For loops are replaced by while over iterators
- With statemenmts are replaced by enter/exit prim calls + exception handling
X The assert statement is replaced by a prim call ASSERT
- The delete statement is replaced by (a sequence of) __delitem__ calls (for PIndex) or None assignments
X Return without argument is replaced by return None
- Incremental assignments are replaced by the corresponding __iop__ calls
- The else branch of a while loop is replaced by an explicit if statement enclosing the loop

Deactorization:

- Every actor definition 
    
    actor a(p): b

  is translated into
  
    class _a():
      def __init__(__self__,p):
          b1                                deactorized b \\ bound b4
      b2                                    deactorized b && bound b4
    
    class a():
      def __init__(_this_,p):
          _this_.__self__ = _a(p)           
          b3                                bound(b) \\ decls \\ var
      b4                                    stored b
  
  where
  
    - b1 contains all non-def statements in b, where each "var z = e" is replaced by "__self__.z = e"
      and all local variables are referenced via __self__
    
    - b2 contains one 
    
          def m(__self__,p):c1
    
      for each "async def m(p):c" in b, where c1 is c with all state and local names referenced via __self__
    
    - b3 contains one assignment
    
          _this_.x = _this_.__self__.x
        
      for every constant variable "x" defined in b
    
    - b4 contains one
    
          def m(_this_,p): return ASYNC(_this_.__self__, lambda: _this_.__self__.m(p))
        
      for each "async def m(p):c" in b

- Every "await e" expression is translated into AWAIT(e)

CPS transformation:

- All potentially blocking functions receive continuations
- All potentially blocking function calls are converted to tail calls that receive continuation arguments
- All calls to continuation parameters are written as "return CONT(cont,value)"
- Exception handlers are broken down into continuations and PUSH/POP calls
- For loops are replaced by while over iterators

Lambda-lifting:

- All function definitions are moved either to the top level or to the closest class
- Functions lifted to the top level are closed via additional parameters
- Functions lifted to a class are closed via additional self attributes
- Top-level and method functions in non-calling contexts are replaced by closure constructions

UNDECIDED:

- Where is self-application (x.m(ps) --> x.m(x,ps)) performed?
