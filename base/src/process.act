"""Constructs for spawning and interacting with sub-processes
"""


def _get_env_path() -> ?str:
    """Get the PATH environment variable"""
    NotImplemented

class ProcessCap():
    """Capability to start processes"""
    def __init__(self, cap: WorldCap):
        pass

actor Process(cap: ProcessCap,
              cmd: list[str],
              on_stdout: action(Process, ?bytes) -> None,
              on_stderr: action(Process, ?bytes) -> None,
              on_exit: action(Process, int, int) -> None,
              on_error: action(Process, str) -> None,
              workdir: ?str=None,
              env: ?dict[str, str]=None,
              timeout: ?float=None):
    """A process
    - cap: capability to start processes
    - cmd: the command to run
    - on_stdout: stdout callback actor method
    - on_stderr: stderr callback actor method
    - on_exit: exit callback
      - process
      - exit code
      - signal that caused program to exit
    - on_error: error callback
    - workdir: working directory, use None for current directory
    - env: environment for process, use None to inherit current environment
      When a new env is provided and it does not have PATH set, PATH is
      inherited from the current env. The PATH variable in the new env,
      regardless if the new env is inherited or provided, is used to find the
      executable specified by cmd (unless cmd is a path).
    - timeout: time in seconds before process is stopped
    """
    _p = 0
    var new_env = env

    action def aid() -> int:
        """Actor ID of process actor

        Workaround for lack of working repr on actors.
        """
        NotImplemented

    proc def _create_process():
        """Do the C magic to actually create a process and talk to it
        """
        NotImplemented

    action def done_writing() -> None:
        """Close stdin of process

        Closing stdin allows cat to terminate
        """
        NotImplemented

    action def pid() -> ?int:
        """Get PID of process or None if the process is not running
        """
        NotImplemented

    action def signal(signal: int) -> None:
        """Send signal to process

        Sends the provided signal to the process.
        """
        NotImplemented

    action def write(data: bytes) -> None:
        """Write data to stdin of process
        """
        NotImplemented

    action def kill():
        """Abrubtly kill process by sending SIGKILL
        """
        signal(9)

    action def terminate():
        """Stop process by sending SIGTERM
        """
        signal(15)

    def stop():
        """Stop process

        Attempts to stop process using normal means, which means SIGTERM on a
        Unix system. After 1 second, SIGKILL is sent to ensure the process is
        stopped.
        """
        terminate()
        after 1.0: kill()

    # Handle PATH inheritance for custom environments
    # When PATH is not explicitly set in the provided environment, inherit it
    # from the current environment (if set in the current environment).
    if env is not None and "PATH" not in env:
        parent_path = _get_env_path()
        if parent_path is not None:
            new = dict(env.items())
            new["PATH"] = parent_path
            new_env = new

    _create_process()

    if timeout is not None:
        after timeout: stop()


actor RunProcess(cap: ProcessCap,
                 cmd: list[str],
                 on_exit: action(Process, int, int, bytes, bytes) -> None,
                 on_error: action(Process, str) -> None,
                 workdir: ?str,
                 env: ?dict[str, str],
                 timeout: ?float=None):
    """Run a process and wait for it to finish
    """
    var out_buf = b""
    var err_buf = b""
    var _out_done = False
    var _err_done = False
    var _exited = False
    var _exit_code = 0
    var _signal = 0
    var _process: ?Process = None


    def _on_stdout(p: Process, data: ?bytes):
        if data is not None:
            out_buf += data
        else:
            _out_done = True
            _check_done()

    def _on_stderr(p: Process, data: ?bytes):
        if data is not None:
            err_buf += data
        else:
            _err_done = True
            _check_done()

    def _on_exit(p: Process, exit_code: int, signal: int):
        _exited = True
        _exit_code = exit_code
        _signal = signal
        _check_done()

    def _check_done():
        if _process is not None:
            if _out_done and _err_done and _exited:
                on_exit(_process, _exit_code, _signal, out_buf, err_buf)

    _p = Process(cap, cmd, _on_stdout, _on_stderr, _on_exit, on_error, workdir, env, timeout)
    _process = _p

    def signal(sig: int):
        """Send signal to process"""
        _p.signal(sig)

    def kill():
        """Abrubtly kill process by sending SIGKILL
        """
        _p.kill()

    def terminate():
        """Stop process by sending SIGTERM
        """
        _p.terminate()

    def stop():
        """Stop process

        Attempts to stop process using normal means, which means SIGTERM on a
        Unix system. After kill_after seconds (defaults to 1), SIGKILL is sent
        to ensure the process is stopped.
        """
        _p.stop()
