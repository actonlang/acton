import random

class FileCap():
    def __init__(self, cap: WorldCap):
        pass

class ReadFileCap():
    def __init__(self, cap: FileCap):
        pass

class WriteFileCap():
    def __init__(self, cap: FileCap):
        pass

def get_relative_path(target_path: str, from_path: str) -> str:
    """
    Compute the relative path from one absolute path to another.

    Args:
        target_path: The absolute path we want to reach
        from_path: The absolute path we're starting from

    Returns:
        A relative path that will reach target_path from from_path

    Raises:
        ValueError: If either path is not absolute (doesn't start with '/')
    """
    # Validate inputs are absolute paths
    if not target_path.startswith('/') or not from_path.startswith('/'):
        raise ValueError("Both paths must be absolute (start with '/')")

    # Split paths into components and remove empty strings
    target_parts = []
    for p in target_path.split('/'):
        if p:
            target_parts.append(p)

    from_parts = []
    for p in from_path.split('/'):
        if p:
            from_parts.append(p)

    # Find common prefix
    common_length = 0
    for t, f in zip(target_parts, from_parts):
        if t != f:
            break
        common_length += 1

    # Build the relative path
    # First go up as many levels as needed
    up_levels = len(from_parts) - common_length
    up_path = []
    for _ in range(up_levels):
        up_path.append('..')

    # Then add the path to the target
    down_path = []
    for i in range(common_length, len(target_parts)):
        down_path.append(target_parts[i])

    # Combine the parts
    relative_parts = []
    relative_parts.extend(up_path)
    relative_parts.extend(down_path)

    # Handle special case where paths are identical
    if not relative_parts:
        return '.'

    # Join with forward slashes
    return '/'.join(relative_parts)


def resolve_relative_path(start_dir: str, rel_path: str) -> str:
    """
    Resolve a relative path against a working directory to get an absolute path.

    Args:
        start_dir: Start directory (must be absolute)
        rel_path: Relative path to resolve

    Returns:
        The resulting absolute path

    Raises:
        ValueError: If start_dir is not absolute or if rel_path is absolute
    """
    if not start_dir.startswith('/'):
        raise ValueError("Working directory must be absolute (start with '/')")
    if rel_path.startswith('/'):
        # Relative path is already absolute
        return rel_path

    # Handle empty or current directory case
    if not rel_path or rel_path == '.':
        return start_dir

    # Split both paths into components
    sd_parts = []
    for p in start_dir.split('/'):
        if p:
            sd_parts.append(p)

    rel_parts = []
    for p in rel_path.split('/'):
        if p != '.':
            rel_parts.append(p)

    # Start with the working directory components
    result_parts = []
    result_parts.extend(sd_parts)

    # Process each component of the relative path
    for part in rel_parts:
        if part == '..':
            if not result_parts:
                raise ValueError("Relative path goes above root directory")
            result_parts.pop()
        else:
            result_parts.append(part)

    # Construct the final path
    if not result_parts:
        return '/'
    return '/' + '/'.join(result_parts)



class FileStat(value):
    name: str
    dev: u64
    mode: u64
    nlink: u64
    uid: u64
    gid: u64
    rdev: u64
    ino: u64
    size: u64
    blksize: u64
    blocks: u64
    flags: u64
    gen: u64
    atime: float
    mtime: float
    ctime: float
    birthtime: float

    def __init__(self, name: str, dev: u64, mode: u64, nlink: u64, uid: u64, gid: u64, rdev: u64, ino: u64, size: u64, blksize: u64, blocks: u64, flags: u64, gen: u64, atime: float, mtime: float, ctime: float, birthtime: float):
        self.name = name
        self.dev = dev
        self.mode = mode
        self.nlink = nlink
        self.uid = uid
        self.gid = gid
        self.rdev = rdev
        self.ino = ino
        self.size = size
        self.blksize = blksize
        self.blocks = blocks
        self.flags = flags
        self.gen = gen
        self.atime = atime
        self.mtime = mtime
        self.ctime = ctime
        self.birthtime = birthtime

    def is_dir(self) -> bool:
        """Return True if the file is a directory"""
        NotImplemented

    def is_file(self) -> bool:
        """Return True if the file is a regular file"""
        NotImplemented

    def is_symlink(self) -> bool:
        """Return True if the file is a symbolic link"""
        NotImplemented

    def is_block_device(self) -> bool:
        """Return True if the file is a block device"""
        NotImplemented

    def is_char_device(self) -> bool:
        """Return True if the file is a character device"""
        NotImplemented

    def is_fifo(self) -> bool:
        """Return True if the file is a FIFO"""
        NotImplemented

    def is_socket(self) -> bool:
        """Return True if the file is a socket"""
        NotImplemented

extension FileStat (Eq):
    def __eq__(self, other) -> bool:
        return self.name == other.name and self.dev == other.dev and self.mode == other.mode and self.nlink == other.nlink and self.uid == other.uid and self.gid == other.gid and self.rdev == other.rdev and self.ino == other.ino and self.size == other.size and self.blksize == other.blksize and self.blocks == other.blocks and self.flags == other.flags and self.gen == other.gen and self.atime == other.atime and self.mtime == other.mtime and self.ctime == other.ctime and self.birthtime == other.birthtime

def join_path(parts: list[str], sep: ?str=None) -> str:
    """Join two paths"""
    # TODO: support more than just / as separator based on platform
    psep = "/"
    if sep is not None:
        psep = sep
    return psep.join(parts)

# TODO: refactor into a read-only version and one for writing!?
actor FS(cap: FileCap):
    """File system operations """

    proc def _pin_affinity() -> None:
        NotImplemented
    _pin_affinity()

    action def copyfile(src: str, dst: str) -> None:
        """Copy a file"""
        NotImplemented

    action def copytree(src: str, dst: str) -> None:
        """Copy a directory tree"""
        for entry in listdir(src):
            s = lstat(join_path([src, entry]))
            if s.is_dir():
                mkdir(join_path([dst, entry]))
                copytree(join_path([src, entry]), join_path([dst, entry]))
            else:
                copyfile(join_path([src, entry]), join_path([dst, entry]))

    action def cwd() -> str:
        """Get the current working directory"""
        NotImplemented

    action def exepath() -> str:
        """Get the path to the executable"""
        NotImplemented

    action def homedir() -> str:
        """Get the home directory"""
        NotImplemented

    action def mkdir(filename: str):
        """Make a directory"""
        NotImplemented

    action def mktmpdir(prefix: str=""):
        """Make a temporary directory"""
        # TODO: is this better implemented with mkdtemp or similar libc
        # function? Maybe we can have this function but then we should at least
        # do the same thing, like create the tmp dir with exclusive flags etc to
        # make sure its our own dir.
        base_tmp_dir = tmpdir()
        # TODO: use a path join function
        new_tmp_dir = base_tmp_dir + "/" + prefix + random.randstr(16)
        mkdir(new_tmp_dir)
        return new_tmp_dir

    action def listdir(path: str) -> list[str]:
        """List directory contents"""
        NotImplemented

    action def lstat(filename: str) -> FileStat:
        """Get file status without following symlinks"""
        NotImplemented

    action def remove(filename: str) -> None:
        """Remove a file"""
        NotImplemented

    action def rmdir(dirname: str) -> None:
        """Remove a directory"""
        NotImplemented

    action def rmtree(d: str) -> None:
        """Recursively remove a directory tree"""
        try:
            for entry in listdir(d):
                try:
                    s = lstat(d + "/" + entry)
                    if s.is_dir():
                        rmtree(d + "/" + entry)
                        rmdir(d + "/" + entry)
                    else:
                        remove(d + "/" + entry)
                except OSError:
                    # probably a symlink or permission denied
                    pass
        except OSError:
            # dir doesn't exist
            pass

    action def tmpdir() -> str:
        """Get temporary directory"""
        NotImplemented

    action def stat(filename: str) -> FileStat:
        """Get file status"""
        NotImplemented

    action def walk(d: str, follow_symlinks: bool=False) -> list[FileStat]:
        """Recursively walk a directory tree"""
        # TODO: this should be a generator
        res = []
        try:
            for entry in listdir(d):
                try:
                    if follow_symlinks:
                        s = stat(d + "/" + entry)
                    else:
                        s = lstat(d + "/" + entry)
                    res.append(s)
                    if s.is_dir():
                        res.extend(walk(d + "/" + entry))
                except OSError:
                    # probably a symlink or permission denied
                    pass
        except OSError:
            # dir doesn't exist
            pass
        return res


actor ReadFile(cap: ReadFileCap, filename: str, lock=False):
    """Read a file
    """
    var _fd = -1

    proc def _open_file():
        """C magic"""
        NotImplemented

    proc def _lock_file():
        NotImplemented

    _open_file()
    if lock:
        _lock_file()

    action def read() -> bytes:
        """Read content of file"""
        NotImplemented

    action def close() -> None:
        """Close file"""
        NotImplemented


actor WriteFile(cap: WriteFileCap, filename: str, lock=False):
    """Write a file
    """
    var _fd = -1

    proc def _open_file():
        """C magic"""
        NotImplemented

    proc def _lock_file():
        NotImplemented

    _open_file()
    if lock:
        _lock_file()

    action def write(data: bytes) -> None:
        """Write data to file"""
        NotImplemented

    action def close() -> None:
        """Close file"""
        NotImplemented
