import re

import yang.schema
import yang.syntax

class EOF(Exception):
    def __init__(self):
        self.msg = "EOF"
        pass

class Position(object):
    ref: ?str
    line: int
    top: ?str
    uses_pos: ?bool

    def __init__(self, ref):
        self.ref = ref
        self.line = 0


class YangTokenizer(object):
    buf: str
    is_1_1: bool
    errors: list[str]
    strict_quoting: bool

    def __init__(self, text: str, pos, errors=[],
                 strict_quoting = True):
        self.lines = text.splitlines(True)
        self.pos = pos
        self.buf = ''
        self.offset = 0
        """Position on line.  Used to remove leading whitespace from strings."""

        self.errors = errors
        self.is_1_1 = False
        self.strict_quoting = strict_quoting

    def readline(self) -> None:
        if len(self.lines) == 0:
            raise EOF()
        self.buf = self.lines.pop(0)
        self.pos.line += 1
        self.offset = 0

    def set_buf(self, i: int) -> None:
        self.offset = self.offset + i
        self.buf = self.buf[i:]

    def skip(self) -> None:
        """Skip whitespace and count position"""
        buflen = len(self.buf)

        while True:
            self.buf = self.buf.lstrip(" \n")
            if self.buf == '':
                self.readline()
                buflen = len(self.buf)
            else:
                self.offset += (buflen - len(self.buf))
                break

        # do not keep comments in the syntax tree
        # skip line comment
        if self.buf[0] == '/':
            if self.buf[1] == '/':
                self.readline()
                self.skip()
        # skip block comment
            elif self.buf[1] == '*':
                i = self.buf.find('*/')
                while i == -1:
                    self.readline()
                    i = self.buf.find('*/')
                self.set_buf(i+2)
                self.skip()

    def get_comment(self, last_line: int) -> (?str, bool, bool):
        """ret: string()"""
        is_multi_line = False
        is_line_end = False
        self.skip()
        offset = self.offset
        m = re.match(yang.syntax.comment, self.buf)
        if m is not None:
            cmt = m.group[0]
            self.set_buf(m.end_pos)
            is_line_end = (last_line == self.pos.line)
            # look for a multiline comment
            if cmt[:2] == '/*' and cmt[-2:] != '*/':
                i = self.buf.find('*/')
                is_multi_line = True
                while i == -1:
                    self.readline()
                    # remove at most the same number of whitespace as
                    # the comment start was indented
                    j = 0
                    while (j < offset and j < len(self.buf) and
                           self.buf[j].isspace()):
                        j = j + 1
                    self.buf = self.buf[j:]
                    cmt += '\n'+self.buf.replace('\n','')
                    i = self.buf.find('*/')
                self.set_buf(i+2)
            return cmt, is_line_end, is_multi_line
        else:
            return None, is_line_end, is_multi_line

    def get_keyword(self) -> (identifier: str, prefix: str):
        """ret: identifier | (prefix, identifier)"""
        self.skip()

        m = re.match(yang.syntax.keyword, self.buf)
        if m is not None:
            self.set_buf(m.end_pos)
            # check the separator
            if (self.buf[0].isspace() or
                (self.buf[0] == '/' and self.buf[1] in ['/', '*']) or
                (self.buf[0] in [';','{'])):
                pass
            else:
                raise ValueError("expected separator, got: " + self.buf[:6] + '...')

            return (identifier=m.group[3], prefix=m.group[2])
#            g2 = m.group[2]
#            g3 = m.group[3]
#            if g2 is None and g3 is not None: # no prefix
#                return (g3, g2)
#            else:
#                return [m.group[2], m.group[3]]
        else:
            raise ValueError("illegal keyword: " + self.buf)

    def peek(self) -> str:
        """Return next real character in input stream.

        Skips whitespace and comments, and returns next character
        without consuming it.  Use skip_tok() to consume the characater.
        """
        self.skip()
        try:
            return self.buf[0]
        except:
            raise EOF()

    def skip_tok(self) -> None:
        self.skip()
        self.set_buf(1)

    def get_strings(self, need_quote: bool=False) -> list[(str, str)]:
        """ret: string"""
        self.skip()

        if self.buf[0] == ';' or self.buf[0] == '{' or self.buf[0] == '}':
            raise ValueError("expected argument, got: " + self.buf[0])

        if self.buf[0] == '"' or self.buf[0] == "'":
            # for double-quoted string,  loop over string and translate
            # escaped characters.  also strip leading whitespace as
            # necessary.
            # for single-quoted string, keep going until end quote is found.
            quote_char = self.buf[0]
            # collect output in strs (list of strings)
            strs = []
            res = []
            # remember position of " character
            indentpos = self.offset
            i = 1
            while True:
                buflen = len(self.buf)
                start = i
                while i < buflen:
                    if self.buf[i] == quote_char:
                        # end-of-string; copy the buf to output
                        res.append(self.buf[start:i])
                        strs.append((''.join(res), quote_char))
                        # and trim buf
                        self.set_buf(i+1)
                        # check for '+' operator
                        self.skip()
                        if self.buf[0] == '+':
                            self.set_buf(1)
                            self.skip()
                            nstrs = self.get_strings(need_quote=True)
                            strs.extend(nstrs)
                        return strs
                    elif (quote_char == '"' and
                          self.buf[i] == '\\' and i < (buflen-1)):
                        # check for special characters
                        special = None
                        if self.buf[i+1] == 'n':
                            special = '\n'
                        elif self.buf[i+1] == 't':
                            special = '\t'
                        elif self.buf[i+1] == '\"':
                            special = '\"'
                        elif self.buf[i+1] == '\\':
                            special = '\\'
                        elif self.strict_quoting and self.is_1_1:
                            raise ValueError("illegal escape: " + self.buf[i+1])
                        elif self.strict_quoting:
                            raise ValueError("illegal escape: " + self.buf[i+1])
                        if special is not None:
                            res.append(self.buf[start:i])
                            res.append(special)
                            i = i + 1
                            start = i + 1
                    i = i + 1
                # end-of-line
                # first strip trailing whitespace in double quoted strings
                # pre: self.buf[i-1] == '\n'
                if i > 2 and self.buf[i-2] == '\r':
                    j = i - 3
                else:
                    j = i - 2
                k = j
                while j >= 0 and self.buf[j].isspace():
                    j = j - 1
                if j != k: # we found trailing whitespace
                    s = self.buf[start:j+1] + self.buf[k+1:i]
                else:
                    s = self.buf[start:i]
                res.append(s)
                self.readline()
                i = 0
                indent = 0
                if quote_char == '"':
                    # skip whitespace used for indentation
                    buflen = len(self.buf)
                    while (i < buflen and self.buf[i].isspace() and
                           indent <= indentpos):
                        if self.buf[i] == '\t':
                            indent = indent + 8
                        else:
                            indent = indent + 1
                        i = i + 1
                    if indent > indentpos + 1:
                        res.append(' ' * (indent - indentpos - 1))
                    elif i == buflen:
                        # whitespace only on this line; keep it as is
                        i = 0
        elif need_quote == True:
            raise ValueError("expected quoted string, got: " + self.buf)
        else:
            # unquoted string
            buflen = len(self.buf)
            i = 0
            while i < buflen:
                if (self.buf[i].isspace() or self.buf[i] == ';' or
                    self.buf[i] == '"' or self.buf[i] == "'" or
                    self.buf[i] == '{' or self.buf[i] == '}' or
                    self.buf[i:i+2] == '//' or self.buf[i:i+2] == '/*' or
                    self.buf[i:i+2] == '*/'):
                    res = self.buf[:i]
                    self.set_buf(i)
                    return [(res, '')]
                i = i + 1
        return []

class Context(object):
    def __init__(self):
        self.error = []


class YangParser(object):
    pos: Position
    tokenizer: YangTokenizer
    top: yang.schema.Statement

    def __init__(self, text: str, ref=None):
        self.ctx = Context()
        self.pos = Position(ref)
        self.last_line = 0

        try:
            self.tokenizer = YangTokenizer(text, self.pos)
            self.top = self._parse_statement(None)
        except EOF:
            pass

    def _parse_statement(self, parent):
        keywd = self.tokenizer.get_keyword()
        # check for argument
        tok = self.tokenizer.peek()
        if tok == '{' or tok == ';':
            arg = None
            argstrs = None
        else:
            argstrs = self.tokenizer.get_strings()
            ass = []
            for a in argstrs:
                ass.append(a.0)
            arg = ''.join(ass)
        # check for YANG 1.1
        if keywd.identifier == 'yang-version' and arg == '1.1':
            self.tokenizer.is_1_1 = True
            self.tokenizer.strict_quoting = True

        #stmt = new_stmt(keywd.identifier, keywd.prefix, arg)
        stmt = yang.schema.Statement(keywd.identifier, arg, keywd.prefix)

        # check for substatements
        tok = self.tokenizer.peek()
        if tok == '{':
            self.tokenizer.skip_tok() # skip the '{'
            self.last_line = self.pos.line
            # TODO: the commented out while loop here was the original used, how are the following 4 lines not equivalent?
            #while self.tokenizer.peek() != '}':
            while True:
                p = self.tokenizer.peek()
                if p == '}':
                    break
                substmt = self._parse_statement(stmt)
                stmt.substatements.append(substmt)
            self.tokenizer.skip_tok() # skip the '}'
        elif tok == ';':
            self.tokenizer.skip_tok() # skip the ';'
        else:
#            error.err_add(self.ctx.errors, self.pos, 'INCOMPLETE_STATEMENT',
#                          (keywd, tok))
#            raise error.Abort
            raise ValueError("incomplete statement, expected '{' or ';', got: " + tok)
        self.last_line = self.pos.line
        return stmt

def parse(text: str) -> yang.schema.Statement:
    parser = YangParser(text)
    if parser is not None:
        return parser.top
    raise ValueError("Parse error")
