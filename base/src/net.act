"""Network IO
"""

class NetCap():
    """Capability to access network"""
    def __init__(self, cap: WorldCap):
        pass

class DNSCap():
    """Capability to perform DNS queries"""
    def __init__(self, cap: NetCap):
        pass

class TCPCap():
    """Capability to connect or listen with TCP"""
    def __init__(self, cap: NetCap):
        pass

class TCPConnectCap():
    """Capability to connect using TCP to a remote host"""
    def __init__(self, cap: TCPCap):
        pass

class TCPListenCap():
    """Capability to listen with TCP"""
    def __init__(self, cap: TCPCap):
        pass

class _TCPListenConnectCap():
    """Internal use only"""
    pass


def _lookup_a(name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type A
    """
    NotImplemented

def _lookup_aaaa(name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type AAAA
    """
    NotImplemented


def lookup_a(cap: DNSCap, name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type A
    """
    _lookup_a(name, on_resolve, on_error)

def lookup_aaaa(cap: DNSCap, name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type AAAA
    """
    _lookup_aaaa(name, on_resolve, on_error)


actor TCPIPConnection(cap: TCPConnectCap, address: str, port: int, on_connect: action(TCPIPConnection) -> None, on_receive: action(TCPIPConnection, bytes) -> None, on_error: action(TCPIPConnection, str) -> None):
    """TCP IP Connection"""
    _socket = -1

    action def close(on_close: action(TCPIPConnection) -> None) -> None:
        """Close the connection"""
        NotImplemented

    def reconnect():
        close(_connect)

    action def write(data: bytes) -> None:
        """Write data to remote"""
        NotImplemented

    mut def __resume__() -> None:
        NotImplemented

    proc def _init():
        NotImplemented

    proc def _connect(c):
        NotImplemented
    _init()
    _connect(self)

actor TCPListenConnection(cap: _TCPListenConnectCap, server_client: int):
    """TCP Listener Connection"""
    var client: int = -1
    var on_receive: ?action(TCPListenConnection, bytes) -> None = None
    var on_error: ?action(TCPListenConnection, str) -> None = None
    var _initialized = False

    proc def _read_start():
        """Implementation internal"""
        NotImplemented

    action def cb_install(new_on_receive: action(TCPListenConnection, bytes) -> None, new_on_error: action(TCPListenConnection, str) -> None) -> None:
        """Install callback handlers"""
        on_receive = new_on_receive
        on_error = new_on_error
        if not _initialized:
            _read_start()
            _initialized = True

    action def close() -> None:
        """Close connection"""
        NotImplemented

    action def write(data: bytes) -> None:
        """Write data to remote"""
        NotImplemented

    mut def __resume__() -> None:
        NotImplemented

    proc def _init() -> None:
        """Implementation internal"""
        NotImplemented
    _init()

actor TCPListener(cap: TCPListenCap, address: str, port: int, on_error: action(TCPListener, str) -> None, on_accept: action(TCPListenConnection) -> None):
    """TCP Listener"""
    _stream = -1
    def create_tcp_listen_connection(cap: _TCPListenConnectCap, client: int):
        """Implementation internal"""
        c = TCPListenConnection(cap, client)
        on_accept(c)

    mut def __resume__() -> None:
        NotImplemented

    proc def _init():
        """Implementation internal"""
        NotImplemented
    _init()
