"""Network IO
"""

class NetCap():
    """Capability to access network"""
    def __init__(self, cap: WorldCap):
        pass

class DNSCap():
    """Capability to perform DNS queries"""
    def __init__(self, cap: NetCap):
        pass

class TCPCap():
    """Capability to connect or listen with TCP"""
    def __init__(self, cap: NetCap):
        pass

class TCPConnectCap():
    """Capability to connect using TCP to a remote host"""
    def __init__(self, cap: TCPCap):
        pass

class TCPListenCap():
    """Capability to listen with TCP"""
    def __init__(self, cap: TCPCap):
        pass

class _TCPListenConnectCap():
    """Internal use only"""
    pass

def is_ipv4(address: str) -> bool:
    NotImplemented

def is_ipv6(address: str) -> bool:
    NotImplemented

def _lookup_a(name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type A
    """
    NotImplemented

def _lookup_aaaa(name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type AAAA
    """
    NotImplemented


def lookup_a(cap: DNSCap, name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type A
    """
    _lookup_a(name, on_resolve, on_error)

def lookup_aaaa(cap: DNSCap, name: str, on_resolve: action(list[str]) -> None, on_error: action(str, str) -> None) -> None:
    """Perform DNS lookup for name of record type AAAA
    """
    _lookup_aaaa(name, on_resolve, on_error)


actor TCPConnection(cap: TCPConnectCap, address: str, port: int, on_connect: action(TCPConnection) -> None, on_receive: action(TCPConnection, bytes) -> None, on_error: action(TCPConnection, str) -> None, on_remote_close: ?action(TCPConnection) -> None, connect_timeout: float=10.0):
    """TCP IP Connection"""
    var _a_res: list[str] = []
    var _aaaa_res: list[str] = []
    var _sock = -1
    var _sock4 = -1
    var _sock4_state = 0
    var _sock4_error = ""
    var _sock6 = -1
    var _sock6_state = 0
    var _sock6_error = ""

    STATE_NONE = 0
    STATE_RESOLVING  = 1 # Resolving DNS
    STATE_CONNECTING = 2 # Got DNS response or input was IP address so now doing TCP connect
    STATE_CONNECTED  = 3 # TCP Connected
    STATE_CLOSED     = 4 # TCP Connection disconnected / closed (it might never have been connected)
    var _state = STATE_NONE

    var _connections = 0
    var _consecutive_connect_errors = 0
    var _bytes_in: u64 = 0
    var _bytes_out: u64 = 0

    proc def _pin_affinity() -> None:
        NotImplemented
    _pin_affinity()

    # TODO: we should not just connect to the first IPv4 and first IPv6 result
    # but rather arrange them in order of preference and try them in that order,
    # more details in Happy Eye Balls v2 https://tools.ietf.org/html/rfc8305

    # DNS A
    def _on_dns_a_resolve(result):
        _a_res = result
        _sock4_state = STATE_CONNECTING
        _state = STATE_CONNECTING
        _connect4(result[0])

    def _on_dns_a_error(name, msg):
        if _state == STATE_RESOLVING:
            after 0.1: _lookup_a(address, _on_dns_a_resolve, _on_dns_a_error)

    # DNS AAAA
    def _on_dns_aaaa_resolve(result):
        _aaaa_res = result
        _sock6_state = STATE_CONNECTING
        _state = STATE_CONNECTING
        _connect6(result[0])

    def _on_dns_aaaa_error(name, msg):
        if _state == STATE_RESOLVING:
            after 0.1: _lookup_aaaa(address, _on_dns_aaaa_resolve, _on_dns_aaaa_error)

    action def _on_tcp_error(sockfamily: int, err: int, errmsg: str):
        if sockfamily == 4:
            if _sock6_state == STATE_NONE: # IPv4 only connection
                _consecutive_connect_errors += 1
                on_error(self, errmsg)
            else: # dual stack connection
                # wait for other socket to connect or fail
                if _sock6_error != "":
                    _consecutive_connect_errors += 1
                    on_error(self, errmsg + "  IPv6 error: " + _sock6_error)
            _sock4_error = errmsg
        elif sockfamily == 6:
            if _sock4_state == STATE_NONE: # IPv6 only connection
                _consecutive_connect_errors += 1
                on_error(self, errmsg)
            else: # dual stack connection
                # wait for other socket to connect or fail
                if _sock4_error != "":
                    _consecutive_connect_errors += 1
                    on_error(self, errmsg + "  IPv4 error: " + _sock4_error)
            _sock6_error = errmsg

    # TCP connect over IPv4
    proc def _connect4(ip_address: str):
        NotImplemented

    # TCP connect over IPv6
    proc def _connect6(ip_address: str):
        NotImplemented

    action def _on_connect4():
        _sock4_state = STATE_CONNECTED
        _sock4_error = ""
        if _sock6_state == STATE_CONNECTED:
            # If IPv6 is already connected, we (IPv4) lost, so close our socket
            # TODO: close IPv4 socket
            return
        _on_connect(_sock4)

    action def _on_connect6():
        _sock6_state = STATE_CONNECTED
        _sock6_error = ""
        if _sock4_state == STATE_CONNECTED:
            # If IPv4 is already connected, we (IPv6) lost, so close our socket
            # TODO: close IPv6 socket
            return
        _on_connect(_sock6)

    # Handle on_connect event
    proc def _on_connect(sock: int):
        if _state == STATE_CONNECTING:
            _state = STATE_CONNECTED
            _sock = sock
            _read_start()
            _connections += 1
            _consecutive_connect_errors = 0
            on_connect(self)
        elif _state == STATE_CONNECTED:
            # It is normal to get multiple on_connect events since we are doing
            # Happy Eyeballs and letting IPv4 race against IPv6, however, those
            # should be cancelled out in the _on_connect[46] functions above.
            pass
        else:
            # We don't expect to establish a connection in any other state
            # TODO: use RTS log instead
            print("Unexpected state", _state)

    proc def _read_start():
        NotImplemented

    action def write(data: bytes) -> None:
        """Write data to remote"""
        NotImplemented

    action def close(on_close: action(TCPConnection) -> None) -> None:
        """Close the connection"""
        NotImplemented

    def _connect_timeout():
        if _state == STATE_CONNECTING:
            _state = STATE_CLOSED
            _consecutive_connect_errors += 1
            def _on_close(c):
                on_error(self, "Connection attempt failed due to timeout")
            close(_on_close)

    def reconnect():
        close(_connect)

    def _connect(c):
        # TODO: would be nice to cancel connect_timeout when connection succeeds
        after connect_timeout: _connect_timeout()
        if is_ipv4(address):
            _sock4_state = STATE_CONNECTING
            _state = STATE_CONNECTING
            _connect4(address)
        elif is_ipv6(address):
            _sock6_state = STATE_CONNECTING
            _state = STATE_CONNECTING
            _connect6(address)
        else:
            _state = STATE_RESOLVING
            _lookup_aaaa(address, _on_dns_aaaa_resolve, _on_dns_aaaa_error)
            # TODO: delay this by a few milliseconds to give IPv6 a slight preference
            _lookup_a(address, _on_dns_a_resolve, _on_dns_a_error)

    mut def __resume__() -> None:
        NotImplemented

    action def ip_version() -> ?int:
        NotImplemented

    action def local_address() -> str:
        NotImplemented

    action def remote_address() -> str:
        NotImplemented

    action def metrics():
        return (connections=_connections,
                consecutive_connect_errors=_consecutive_connect_errors,
                bytes_in=_bytes_in,
                bytes_out=_bytes_out)

    _connect(self)


actor TCPListenConnection(cap: _TCPListenConnectCap, server_client: int):
    """TCP Listener Connection"""
    var client: int = -1
    var on_receive: ?action(TCPListenConnection, bytes) -> None = None
    var on_error: ?action(TCPListenConnection, str) -> None = None
    var on_remote_close: ?action(TCPListenConnection) -> None = None
    var _initialized = False

    proc def _read_start():
        """Implementation internal"""
        NotImplemented

    action def cb_install(new_on_receive: action(TCPListenConnection, bytes) -> None, new_on_error: action(TCPListenConnection, str) -> None, new_on_remote_close: ?action(TCPListenConnection) -> None) -> None:
        """Install callback handlers"""
        on_receive = new_on_receive
        on_error = new_on_error
        on_remote_close = new_on_remote_close
        if not _initialized:
            _read_start()
            _initialized = True

    action def close() -> None:
        """Close connection"""
        NotImplemented

    action def write(data: bytes) -> None:
        """Write data to remote"""
        NotImplemented

    mut def __resume__() -> None:
        NotImplemented

    proc def _init() -> None:
        """Implementation internal"""
        NotImplemented
    _init()

actor TCPListener(cap: TCPListenCap, address: str, port: int, on_error: action(TCPListener, str) -> None, on_accept: action(TCPListenConnection) -> None):
    """TCP Listener"""
    _stream = -1
    def create_tcp_listen_connection(cap: _TCPListenConnectCap, client: int):
        """Implementation internal"""
        c = TCPListenConnection(cap, client)
        on_accept(c)

    mut def __resume__() -> None:
        NotImplemented

    proc def _init():
        """Implementation internal"""
        NotImplemented
    _init()

actor TLSConnection(cap: TCPConnectCap, address: str, port: int, on_connect: action(TLSConnection) -> None, on_receive: action(TLSConnection, bytes) -> None, on_error: action(TLSConnection, str) -> None, on_remote_close: ?action(TLSConnection) -> None, verify_tls: bool=True):
    # TODO: support hostname/CN mismatch, good when connecting with IP address?
    # TODO: do DNS lookup in Acton
    # TODO: support ALPN
    # TODO: support SNI
    # TODO: support client certificates
    # TODO: implement state machine
    # TODO: support timeout
    # TODO: do Happy Eyeballs
    var _stream = -1

    var _on_close: ?action(TLSConnection) -> None = None

    var _connections = 0
    var _consecutive_connect_errors = 0
    var _bytes_in: u64 = 0
    var _bytes_out: u64 = 0

    proc def _pin_affinity() -> None:
        NotImplemented
    _pin_affinity()

    action def _on_tls_connect():
        _connections += 1
        on_connect(self)

    action def _on_tls_error(sockfamily: int, err: int, errmsg: str):
        on_error(self, errmsg)

    action def close(on_close: action(TLSConnection) -> None) -> None:
        """Close the connection"""
        NotImplemented

    action def write(data: bytes) -> None:
        """Write data to remote"""
        NotImplemented

    def reconnect():
        close(_connect)

    proc def _connect_tls():
        NotImplemented

    proc def _connect(c):
        _connect_tls()
    _connect(self)
