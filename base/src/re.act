
#class Pattern():
#    pass
#
#class Or(Pattern):
#    def __init__(self, p: list[Pattern]):
#        self.p = p
#
#    def __str__(self):
#        res = "("
#        l = len(self.p)
#        for i in range(l):
#            res += str(self.p[i])
#            if i < l-1:
#                res += "|"
#        res += ")"
#        return res
#
#class Text(Pattern):
#    """Literal text
#    """
#    def __init__(self, t: str):
#        self.text = t
#        # TODO: complete patterns for escaping re patterns
#        self.re_text = t.replace(".", r"\.", None).replace("?", r"\?", None)
#
#    def __str__(self):
#        return self.re_text


class Match:
    def __init__(self, pattern: str, string: str, start_pos: i64, end_pos: i64, group: list[?str], named_group: dict[str, ?str]) -> None:
        self.pattern = pattern
        self.string = string
        self.start_pos = start_pos
        self.end_pos = end_pos
        self.group = group
        self.named = named_group

# TODO: add _compile function to compile a pattern to a regex, and use it in
# _match function to avoid recompiling the pattern each time

def _match(pattern: str, string: str, start_pos: i64) -> ?Match:
    NotImplemented

def match(pattern: str, string: str) -> ?Match:
    """Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.
    """
    return _match(pattern, string, 0)

def matches(pattern: str, string: str) -> list[Match]:
    """Find all non-overlapping matches in string
    """
    # TODO: implement as a generator instead
    res = []
    pos = 0
    str_len = len(string)
    while True:
        if pos >= str_len:
            break
        m = _match(pattern, string, pos)
        if m is None:
            break
        if m is not None:
            res.append(m)
            if m.end_pos == pos:
                # Zero-width match: move forward one character if possible
                if pos < str_len:
                    pos += 1
                else:
                    # At the very end, just break
                    break
            else:
                pos = m.end_pos
    return res

def split(pattern: str, subject: str, max_split: int=0) -> list[str]:
    if pattern == "":
        raise ValueError("empty pattern")

    result = []
    splits_done = 0
    pos = 0
    str_len = len(subject)

    while True:
        if max_split != 0 and splits_done >= max_split:
            # Reached maximum number of splits
            break

        m = _match(pattern, subject, pos)
        if m is not None:
            # Append substring before match (normal match)
            if m.end_pos > pos:
                result.append(subject[pos:m.start_pos])
                if len(m.group) > 1:
                    for g in m.group[1:]:
                        result.append(g if g is not None else "")
                pos = m.end_pos
                splits_done += 1
            else:
                # Zero-width match
                if pos == 0:
                    # At the start: append empty substring to indicate a split at the start
                    result.append(subject[pos:m.start_pos])
                else:
                    # Not at the start: do not append empty substring
                    # If there are capturing groups, append them (if any)
                    if len(m.group) > 1:
                        for g in m.group[1:]:
                            result.append(g if g is not None else "")

                # After handling zero-width match, break to avoid infinite loops
                break
        else:
            # No match found
            break

    # Append remainder
    result.append(subject[pos:])
    return result
