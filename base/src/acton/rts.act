def gc(cap: SysCap) -> None:
    """Collect garbage

    Jedi level. This is not the function you are looking for.
    """
    NotImplemented

def enable_gc(cap: SysCap) -> None:
    """Enable the garbage collector

    Jedi level. This is not the function you are looking for.
    """
    NotImplemented

def disable_gc(cap: SysCap) -> None:
    """Disable the garbage collector

    Jedi level. This is not the function you are looking for.
    """
    NotImplemented

def get_mem_usage(cap: SysCap) -> u64:
    """Get memory usage in number of bytes

    Gets the approximate current memory usage by this program. This is not the
    same as the heap size (which is the amount of memory allocated to us from
    the OS).
    Computed by taking the heap size and subtracting unmapped bytes and free
    bytes as the GC thinks of it. It's approximate because the GC gives us an
    approximate value, usually on the order of ~10KB. Thus, it is hard to
    precisely measure small usage of memory whereas for applications consuming
    hundreds of KB or megabytes of memory, the precision is quite enough.
    """
    NotImplemented

# sleep is sort of dangerous - it will actually put the RTS thread executing the
# actor calling this function to sleep. This could be seen as ultrabad, like we
# would want to just pause execution of one actor and let the RTS thread process
# other actors meanwhile. There would be room for such a function, however, the
# acton.rts.sleep() is deliberately putting the RTS thread to sleep. This is a
# simple way of simulating heavy work without actually doing the heavy work, so
# in a benchmark we can pretend some actors are doing relatively heavy work, yet
# our CPU usage will be lower, so this is like laptop airplane mode friendly
# (consumes less battery).
def sleep(cap: SysCap, duration: float) -> None:
    """Put RTS worker thread to sleep"""
    NotImplemented

def rss(cap: SysCap) -> int:
    """Get Resident Set Size"""
    NotImplemented

def _io_handles(cap: SysCap) -> dict[u64, (typ: str, act: u64)]:
    """Return all I/O handles and their type for the current worker thread"""
    NotImplemented

def rts_stats(cap: SysCap) -> dict[u64, (state: str, sleeps: u64, conts_count: u64, conts_sum: u64, conts_100ns: u64, conts_1us: u64, conts_10us: u64, conts_100us: u64, conts_1ms: u64, conts_10ms: u64, conts_100ms: u64, conts_1s: u64, conts_10s: u64, conts_100s: u64, conts_inf: u64, bkeep_count: u64, bkeep_sum: u64, bkeep_100ns: u64, bkeep_1us: u64, bkeep_10us: u64, bkeep_100us: u64, bkeep_1ms: u64, bkeep_10ms: u64, bkeep_100ms: u64, bkeep_1s: u64, bkeep_10s: u64, bkeep_100s: u64, bkeep_inf: u64)]:
    """Return all I/O handles and their type for the current worker thread"""
    NotImplemented

actor WThreadMonitor(env: Env, arg_wthread_id: int):
    wthread_id = arg_wthread_id

    def io_handles():
        return _io_handles(env.syscap)

    proc def _init():
        """Implementation internal"""
        NotImplemented
    _init()

actor Monitor(env: Env):
    tms: dict[int, WThreadMonitor] = {}

    for wthread_id in range(1, env.nr_wthreads+1, 1):
        tm = WThreadMonitor(env, wthread_id)
        tms[wthread_id] = tm

    def io_handles():
        res = {}
        for wthread_id, tm in tms.items():
            res[wthread_id] = tm.io_handles()
        return res

