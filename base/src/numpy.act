# Copyright (C) 2019-2021 Data Ductus AB
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import math

protocol Primitive:
    pass

class ndselect(value):
    pass

class ndindex(ndselect):
    def __init__(self, index: int) -> None:
        NotImplemented

class ndslice(ndselect):
    def __init__(self, slc: slice) -> None:
        NotImplemented

class ndarray[A] ():
    def __init__(self, val: atom) -> None:
        NotImplemented
    shape           : list[int]                      # should be a method? (at least until we have immutable lists)
    strides         : list[int]                      #      -"-

    size            : int
    def reshape (self, newshape: list[int]) -> Self:
        NotImplemented
    def transpose(self, axes: ?list[int]) -> Self:
        NotImplemented
    def flatten(self) -> Self:                       # the same as reshape([-1])
        NotImplemented
    def copy(self) -> Self:                          # makes a contiguous deep copy
        NotImplemented
    def __ndgetslice__(self, ix: list[ndselect]) -> Self:
        NotImplemented


def partition [A (Primitive)] (a: ndarray[A], k: int) -> ndarray[A]:
    NotImplemented

def clip [A (Primitive)] (a: ndarray[A], low: ?A, high: ?A) -> ndarray[A]:
    NotImplemented

def dot [A (Primitive)] (a: ndarray[A], b: ndarray[A]) -> ndarray[A]:
    NotImplemented

def sum [A (Primitive)] (array: ndarray[A], axis: ?int) -> ndarray[A]:
    NotImplemented

def sort [A (Primitive)] (a: ndarray[A], axis: ?int) -> ndarray[A]:
    NotImplemented

def abs [A (Primitive)] (a: ndarray[A]) -> ndarray[A]:
    NotImplemented

def scalar [A (Primitive)] (a: ndarray[A]) -> A:           #only for 0-dim array
    NotImplemented

def roll [A (Primitive)] (a: ndarray[A], n: int) -> ndarray[A]:
    NotImplemented

def tile [A (Primitive)] (a: ndarray[A], n: int) -> ndarray[A]:
    NotImplemented

def zeros [A (Primitive)] (n: int) -> ndarray[A]:
    NotImplemented

def concatenate [A (Primitive)] (arrays: list[ndarray[A]]) -> ndarray[A]:
    NotImplemented

def mean [A (Primitive)] (a: ndarray[A], axis: ?int) -> ndarray[float]:
    NotImplemented

def arange(start: ?int, stop: int, step: ?int) -> ndarray[int]:
    NotImplemented

def linspace(a: float, b: float, n: int) -> ndarray[float]:
    NotImplemented

def array [A (Primitive)] (elems: list[A]) -> ndarray[A]:
    NotImplemented

def full [A (Primitive)] (shape: list[int], val: A) -> ndarray[A]:
    NotImplemented

def unirandint (a: int, b: int, n: int) -> ndarray[int]:
    NotImplemented

def unirandfloat (a: float, b: float, n: int) -> ndarray[float]:
    NotImplemented

extension ndarray[int] (Integral):
    NotImplemented
extension ndarray[int] (Div[ndarray[float]]):
    NotImplemented
extension ndarray[A (Primitive)] (Real):
    NotImplemented
extension ndarray[float] (Div[ndarray[float]]):
    NotImplemented
extension ndarray[A (Primitive)] (Sliceable[ndarray[A]]):
    NotImplemented
extension ndarray[A (Primitive)] (Collection[A]):
    NotImplemented
extension ndarray[A (Primitive, math.RealFuns)] (math.RealFuns):
    NotImplemented
extension ndarray[A (Primitive, RealFloat)] (RealFloat):
    NotImplemented

extension int (Primitive):
    NotImplemented
extension float (Primitive):
    NotImplemented

  # unspecified value guaranteed not to be used for indexing (e.g. LONG_MIN)
newaxis : int = -9223372036854775808
