class Node():
    """
A node is an abstract syntax tree for XML.

It is similar to Python's xml.etree.ElementTree.Element.
A node always represent an XML tagged element; so also the children are elements.
Text is represented in the attributes text and tail: in node n,
 - n.text is the string before n's first child;
 - n.tail is the string before n's next sibling.
So, to get the text at top level of node n, one must concatenate
n.text and c.tail for all children of n.
"""
    def __init__(self, tag : str, nsdefs : list[(?str,str)], prefix : ?str,
                 attributes : list[(str, str)], children : list[Node], text: ?str, tail: ?str):
        self.tag = tag
        self.nsdefs = nsdefs
        self.prefix = prefix
        self.attributes = attributes
        self.children = children
        self.text = text
        self.tail = tail
    def encode(self) -> str:
        NotImplemented

def decode(data : str) -> Node:
    NotImplemented

def encode(node : Node) -> str:
    return node.encode()

def toplevel_text(node):
     """Returns the toplevel text in node, as if all subelements were replaced by sep"""
     sep = ' '
     chunks = []
     txt = node.text
     if txt is not None:
         chunks.append(txt)
     for c in node.children:
         tl = c.tail
         if tl is not None:
             chunks.append(tl)
     return sep.join(chunks)
