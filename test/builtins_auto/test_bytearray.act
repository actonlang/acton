def test_bytearray_basic_len():
    ba = bytearray(b"hello, world!")
    result = len(ba)
    print("len(bytearray(b'hello, world!')): {result}")
    return result == 13

def test_bytearray_basic_indexing():
    ba = bytearray(b"hello, world!")
    result = ba[0]
    print("bytearray(b'hello, world!')[0]: {result}")
    return result == 104  # ASCII 'h'

def test_bytearray_basic_modification():
    ba = bytearray(b"hello, world!")
    ba[0] = 72  # ASCII 'H'
    result = ba[0]
    print("bytearray modification ba[0] = 72, result: {result}")
    return result == 72

def test_bytearray_basic_slicing():
    ba = bytearray(b"hello, world!")
    ba[0] = 72  # ASCII 'H'
    result = ba[0:5]
    print("bytearray(b'Hello, world!')[0:5]: {result}")
    return result == bytearray(b"Hello")

def test_bytearray_find():
    ba = bytearray(b"hello, world!")
    world = bytearray(b"world")
    print("Testing bytearray.find()")
    return (ba.find(world) == 7 and
            ba.find(world, 0) == 7 and
            ba.find(world, 8) == -1 and
            ba.find(world, 0, 5) == -1 and
            ba.find(world, 0, 7) == -1 and
            ba.find(bytearray(b"crap")) == -1)

def test_bytearray_append():
    ba = bytearray(b"test")
    ba.append(33)  # ASCII '!'
    result = ba
    print("bytearray(b'test').append(33): {result}")
    return result == bytearray(b"test!")

def test_bytearray_insert():
    ba = bytearray(b"test")
    ba.insert(0, 65)  # ASCII 'A'
    result = ba
    print("bytearray(b'test').insert(0, 65): {result}")
    return result == bytearray(b"Atest")

def test_bytearray_reverse():
    ba = bytearray(b"test")
    ba.reverse()
    result = ba
    print("bytearray(b'test').reverse(): {result}")
    return result == bytearray(b"tset")

def test_empty_bytearray_capitalize():
    result = bytearray(b"").capitalize()
    print("empty bytearray.capitalize(): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_center():
    result = bytearray(b"").center(5)
    print("empty bytearray.center(5): {result}")
    return result == bytearray(b"     ")

def test_empty_bytearray_count():
    result = bytearray(b"").count(bytearray(b"a"))
    print("empty bytearray.count(bytearray(b'a')): {result}")
    return result == 0

def test_empty_bytearray_decode():
    result = bytearray(b"").decode()
    print("empty bytearray.decode(): '{result}'")
    return result == ""

def test_empty_bytearray_endswith():
    result = bytearray(b"").endswith(bytearray(b""))
    print("empty bytearray.endswith(bytearray(b'')): {result}")
    return result == True

def test_empty_bytearray_expandtabs():
    result = bytearray(b"").expandtabs()
    print("empty bytearray.expandtabs(): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_find():
    result = bytearray(b"").find(bytearray(b"a"))
    print("empty bytearray.find(bytearray(b'a')): {result}")
    return result == -1

def test_empty_bytearray_index():
    print("empty bytearray.index(bytearray(b'a')): testing exception")
    try:
        bytearray(b"").index(bytearray(b"a"))
        return False
    except ValueError:
        return True

def test_empty_bytearray_isalnum():
    result = bytearray(b"").isalnum()
    print("empty bytearray.isalnum(): {result}")
    return result == False

def test_empty_bytearray_isalpha():
    result = bytearray(b"").isalpha()
    print("empty bytearray.isalpha(): {result}")
    return result == False

def test_empty_bytearray_isascii():
    result = bytearray(b"").isascii()
    print("empty bytearray.isascii(): {result}")
    return result == True

def test_empty_bytearray_isdigit():
    result = bytearray(b"").isdigit()
    print("empty bytearray.isdigit(): {result}")
    return result == False

def test_empty_bytearray_islower():
    result = bytearray(b"").islower()
    print("empty bytearray.islower(): {result}")
    return result == False

def test_empty_bytearray_isspace():
    result = bytearray(b"").isspace()
    print("empty bytearray.isspace(): {result}")
    return result == False

def test_empty_bytearray_istitle():
    result = bytearray(b"").istitle()
    print("empty bytearray.istitle(): {result}")
    return result == False

def test_empty_bytearray_isupper():
    result = bytearray(b"").isupper()
    print("empty bytearray.isupper(): {result}")
    return result == False

def test_empty_bytearray_join():
    result = bytearray(b"").join([bytearray(b"a"), bytearray(b"b"), bytearray(b"c")])
    print("empty bytearray.join([bytearray(b'a'), bytearray(b'b'), bytearray(b'c')]): {result}")
    return result == bytearray(b"abc")

def test_empty_bytearray_ljust():
    result = bytearray(b"").ljust(5)
    print("empty bytearray.ljust(5): {result}")
    return result == bytearray(b"     ")

def test_empty_bytearray_lower():
    result = bytearray(b"").lower()
    print("empty bytearray.lower(): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_lstrip():
    result = bytearray(b"").lstrip()
    print("empty bytearray.lstrip(): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_partition():
    sp = bytearray(b"").partition(bytearray(b"a"))
    print("empty bytearray.partition(bytearray(b'a')): ({sp.0}, {sp.1}, {sp.2})")
    return sp.0 == bytearray(b"") and sp.1 == bytearray(b"") and sp.2 == bytearray(b"")

def test_empty_bytearray_replace():
    result = bytearray(b"").replace(bytearray(b"a"), bytearray(b"b"))
    print("empty bytearray.replace(bytearray(b'a'), bytearray(b'b')): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_replace_empty():
    result = bytearray(b"").replace(bytearray(b""), bytearray(b""))
    print("empty bytearray.replace(bytearray(b''), bytearray(b'')): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_rfind():
    result = bytearray(b"").rfind(bytearray(b"a"))
    print("empty bytearray.rfind(bytearray(b'a')): {result}")
    return result == -1

def test_empty_bytearray_rindex():
    print("empty bytearray.rindex(bytearray(b'a')): testing exception")
    try:
        bytearray(b"").rindex(bytearray(b"a"))
        return False
    except ValueError:
        return True

def test_empty_bytearray_rjust():
    result = bytearray(b"").rjust(5)
    print("empty bytearray.rjust(5): {result}")
    return result == bytearray(b"     ")

def test_empty_bytearray_rpartition():
    sp = bytearray(b"").rpartition(bytearray(b"a"))
    print("empty bytearray.rpartition(bytearray(b'a')): ({sp.0}, {sp.1}, {sp.2})")
    return sp.0 == bytearray(b"") and sp.1 == bytearray(b"") and sp.2 == bytearray(b"")

def test_empty_bytearray_rstrip():
    result = bytearray(b"").rstrip()
    print("empty bytearray.rstrip(): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_split():
    result = bytearray(b"").split(bytearray(b"a"))
    print("empty bytearray.split(bytearray(b'a')): {result}")
    return result == [bytearray(b"")]

def test_empty_bytearray_splitlines():
    result = bytearray(b"").splitlines()
    print("empty bytearray.splitlines(): {result}")
    return result == []

def test_empty_bytearray_startswith():
    result = bytearray(b"").startswith(bytearray(b""))
    print("empty bytearray.startswith(bytearray(b'')): {result}")
    return result == True

def test_empty_bytearray_strip():
    result = bytearray(b"").strip()
    print("empty bytearray.strip(): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_upper():
    result = bytearray(b"").upper()
    print("empty bytearray.upper(): {result}")
    return result == bytearray(b"")

def test_empty_bytearray_zfill():
    result = bytearray(b"").zfill(5)
    print("empty bytearray.zfill(5): {result}")
    return result == bytearray(b"00000")

def test_bytearray_startswith_same_length():
    result = bytearray(b"foo").startswith(bytearray(b"foo"))
    print("bytearray(b'foo').startswith(bytearray(b'foo')): {result}")
    return result == True

def test_bytearray_startswith_prefix():
    result = bytearray(b"hello world").startswith(bytearray(b"hello"))
    print("bytearray(b'hello world').startswith(bytearray(b'hello')): {result}")
    return result == True

def test_bytearray_startswith_not_prefix():
    result = bytearray(b"hello world").startswith(bytearray(b"world"))
    print("bytearray(b'hello world').startswith(bytearray(b'world')): {result}")
    return result == False

def test_bytearray_startswith_empty():
    result = bytearray(b"hello world").startswith(bytearray(b""))
    print("bytearray(b'hello world').startswith(bytearray(b'')): {result}")
    return result == True

def test_bytearray_startswith_single_char():
    result = bytearray(b"a").startswith(bytearray(b"a"))
    print("bytearray(b'a').startswith(bytearray(b'a')): {result}")
    return result == True

def test_bytearray_startswith_longer_prefix():
    result = bytearray(b"foo").startswith(bytearray(b"foobar"))
    print("bytearray(b'foo').startswith(bytearray(b'foobar')): {result}")
    return result == False

def test_empty_bytearray_hex():
    result = bytearray(b"\xde\xad\xbe\xef").hex()
    print("empty bytearray.hex(): '{result}'")
    return result == "deadbeef"

def test_empty_bytearray_from_hex():
    result = bytearray.from_hex("deadbeef").hex()
    print("empty bytearray.from_hex(''): {result}")
    return result == "deadbeef"

def test_bytearray_hex():
    ba = bytearray(b"\xde\xad\xbe\xef")
    result = ba.hex()
    print("bytearray.hex(): {result}")
    return result == "deadbeef"

def test_bytearray_from_hex():
    result = bytearray.from_hex("deadbeef").hex()
    print("bytearray.from_hex('deadbeef').hex(): {result}")
    return result == "deadbeef"

tests = {
    "test_bytearray_basic_len": test_bytearray_basic_len,
    "test_bytearray_basic_indexing": test_bytearray_basic_indexing,
    "test_bytearray_basic_modification": test_bytearray_basic_modification,
    "test_bytearray_basic_slicing": test_bytearray_basic_slicing,
    "test_bytearray_find": test_bytearray_find,
    "test_bytearray_append": test_bytearray_append,
    "test_bytearray_insert": test_bytearray_insert,
    "test_bytearray_reverse": test_bytearray_reverse,
    "test_empty_bytearray_capitalize": test_empty_bytearray_capitalize,
    "test_empty_bytearray_center": test_empty_bytearray_center,
    "test_empty_bytearray_count": test_empty_bytearray_count,
    "test_empty_bytearray_decode": test_empty_bytearray_decode,
    "test_empty_bytearray_endswith": test_empty_bytearray_endswith,
    "test_empty_bytearray_expandtabs": test_empty_bytearray_expandtabs,
    "test_empty_bytearray_find": test_empty_bytearray_find,
    "test_empty_bytearray_index": test_empty_bytearray_index,
    "test_empty_bytearray_isalnum": test_empty_bytearray_isalnum,
    "test_empty_bytearray_isalpha": test_empty_bytearray_isalpha,
    "test_empty_bytearray_isascii": test_empty_bytearray_isascii,
    "test_empty_bytearray_isdigit": test_empty_bytearray_isdigit,
    "test_empty_bytearray_islower": test_empty_bytearray_islower,
    "test_empty_bytearray_isspace": test_empty_bytearray_isspace,
    "test_empty_bytearray_istitle": test_empty_bytearray_istitle,
    "test_empty_bytearray_isupper": test_empty_bytearray_isupper,
    "test_empty_bytearray_join": test_empty_bytearray_join,
    "test_empty_bytearray_ljust": test_empty_bytearray_ljust,
    "test_empty_bytearray_lower": test_empty_bytearray_lower,
    "test_empty_bytearray_lstrip": test_empty_bytearray_lstrip,
    "test_empty_bytearray_partition": test_empty_bytearray_partition,
    "test_empty_bytearray_replace": test_empty_bytearray_replace,
    "test_empty_bytearray_replace_empty": test_empty_bytearray_replace_empty,
    "test_empty_bytearray_rfind": test_empty_bytearray_rfind,
    "test_empty_bytearray_rindex": test_empty_bytearray_rindex,
    "test_empty_bytearray_rjust": test_empty_bytearray_rjust,
    "test_empty_bytearray_rpartition": test_empty_bytearray_rpartition,
    "test_empty_bytearray_rstrip": test_empty_bytearray_rstrip,
    "test_empty_bytearray_split": test_empty_bytearray_split,
    "test_empty_bytearray_splitlines": test_empty_bytearray_splitlines,
    "test_empty_bytearray_startswith": test_empty_bytearray_startswith,
    "test_empty_bytearray_strip": test_empty_bytearray_strip,
    "test_empty_bytearray_upper": test_empty_bytearray_upper,
    "test_empty_bytearray_zfill": test_empty_bytearray_zfill,
    "test_empty_bytearray_hex": test_empty_bytearray_hex,
    "test_empty_bytearray_from_hex": test_empty_bytearray_from_hex,
    "test_bytearray_startswith_same_length": test_bytearray_startswith_same_length,
    "test_bytearray_startswith_prefix": test_bytearray_startswith_prefix,
    "test_bytearray_startswith_not_prefix": test_bytearray_startswith_not_prefix,
    "test_bytearray_startswith_empty": test_bytearray_startswith_empty,
    "test_bytearray_startswith_single_char": test_bytearray_startswith_single_char,
    "test_bytearray_startswith_longer_prefix": test_bytearray_startswith_longer_prefix,
    "test_bytearray_hex": test_bytearray_hex,
    "test_bytearray_from_hex": test_bytearray_from_hex,
}

actor main(env):
    failed = []
    for name, t in tests.items():
        print("== test: " + name)
        if not t():
            print("-- FAILED test: " + name)
            failed.append(name)
        print()
    if len(failed) == 0:
        print("All {len(tests)} tests OK!")
    else:
        print("\n{len(failed)} of {len(tests)} tests failed:")
        for name in failed:
            print(" - {name}")
    env.exit(max([0, min([len(failed), 1])]))
