actor main(env):
    def assertEqual(desc, e, a):
        if e != a:
            exit(env.cap, 1)

    def test_helloworld():
        ascii = "Hello, world!"
        hex = "\x48ello, world!"
        assertEqual("ascii == escaped hex codes", ascii, hex)

    def test_limdef():
        uniesc = "\u2200 \u03b5>0 \u2203 \u03b4>0 . |x - a| < \u03b4 \u21d2 |f(x) - c| < \u03b5."
        uni = "∀ ε>0 ∃ δ>0 . |x - a| < δ ⇒ |f(x) - c| < ε."
        assertEqual("escaped unicode == actual unicode in source", uniesc, uni)
        blim = uniesc.encode()
        ulim = blim.decode()
        # encoding & decoding function pairs are exceedingly well suited to
        # property based testing, but we don't have a property based testing
        # library in Acton :/
        assertEqual("encoded & decoded == original", uniesc, ulim)

    test_helloworld()
    test_limdef()
    exit(env.cap, 0)
