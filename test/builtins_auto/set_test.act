
def test_set_pop():
    s = {1, 2, 3}
    if s.pop() not in {1, 2, 3}:
        raise ValueError("pop() returned an invalid value")
    if len(s) != 2:
        raise ValueError("pop() did not remove an element")
    s.pop()
    s.pop()
    try:
        s.pop()
    except ValueError:
        pass
    else:
        raise ValueError("pop() did not raise an exception when called on an empty set")

actor main(env):
    try:
        test_set_pop()
    except Exception as e:
        print("Unexpected exception during testing:", e)
        await async env.exit(1)

    s = {400}
    for i in range(13, 1000):
        s.add(i*i)
    s.discard(64)
    s.discard(225)
    s.discard(10000)
    n = 0
    for k in range(1000):
        if k in s: n += 1
    if n != 18:
        raise ValueError("n is" + str(n) + ", not 18")

        env.exit(1)
    s2 = {1}
    for i in range(500):
        s2.add(i*i*i*i)
    if len(s) != 985 or len(s2) != 500:
        raise ValueError("set length error 1")
    if len(s & s2) != 27 or len(s | s2) != 1458 or len(s ^ s2) != 1431:  
        raise ValueError("set length error 2")
    env.exit(0)
