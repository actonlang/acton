import testing

# Test all integer types:
# - i16
# - i32
# - i64
# - u16
# - u32
# - u64
# - int

# TODO: test that division by zero raises ZeroDivisionError

def test_i16_divzero():
    n = i16(0)
    try:
        i16(3) / n
    except ZeroDivisionError:
        try:
            i16(3) // n
        except ZeroDivisionError:
            return
    raise testing.NotRaisesError("expected ZeroDivisionError for i16")

def test_i32_divzero():
    n = i32(0)
    try:
        i32(3) / n
    except ZeroDivisionError:
        try:
            i32(3) // n
        except ZeroDivisionError:
            return
    raise testing.NotRaisesError("expected ZeroDivisionError for i32")

def test_i64_divzero():
    n = i64(0)
    try:
        i64(3) / n
    except ZeroDivisionError:
        try:
            i64(3) // n
        except ZeroDivisionError:
            return
    raise testing.NotRaisesError("expected ZeroDivisionError for i64")

def test_u16_divzero():
    n = u16(0)
    try:
        u16(3) / n
    except ZeroDivisionError:
        try:
            u16(3) // n
        except ZeroDivisionError:
            return
    raise testing.NotRaisesError("expected ZeroDivisionError for u16")

def test_u32_divzero():
    n = u32(0)
    try:
        u32(3) / n
    except ZeroDivisionError:
        try:
            u32(3) // n
        except ZeroDivisionError:
            return

        raise testing.NotRaisesError("expected ZeroDivisionError for u32")

def test_u64_divzero():
    n = u64(0)
    try:
        u64(3) / n
    except ZeroDivisionError:
        try:
            u64(3) // n
        except ZeroDivisionError:
            return
    raise testing.NotRaisesError("expected ZeroDivisionError for u64")


def test_i16():
    test_i16_divzero()
    x: i16 = 0
    if (bool(x != 0)):
       raise ValueError("unexpected: bool(x) != 0")
    if x != 0:
       raise ValueError("unexpected: x != 0")
    return True
    if i16("1234") != 1234:
        raise ValueError('i16("1234") gives wrong result')
    if i16("0x1234") != 4660:
        raise ValueError('i16("0x1234") gives wrong result')
    if i16("0o1234") != 668:
        raise ValueError('i16("0o1234") gives wrong result')
    if i16("0b1111") != 15:
        raise ValueError('i16("0b1111") gives wrong result')
    if i16("1234",7) != 466:
        raise ValueError('i16("1234",7) gives wrong result')

def test_i32():
    test_i32_divzero()
    x: i32 = 0
    if (bool(x != 0)):
       raise ValueError("unexpected: bool(x) != 0")
    if x != 0:
       raise ValueError("unexpected: x != 0")
    return True

def test_i64():
    test_i64_divzero()
    x: i64 = 0
    if (bool(x != 0)):
       raise ValueError("unexpected: bool(x) != 0")
    if x != 0:
       raise ValueError("unexpected: x != 0")
    return True

def test_u16():
    test_u16_divzero()
    x: u16 = 0
    if (bool(x != 0)):
       raise ValueError("unexpected: bool(x) != 0")
    if x != 0:
       raise ValueError("unexpected: x != 0")
    return True

def test_u32():
    test_u32_divzero()
    x: u32 = 0
    if (bool(x != 0)):
       raise ValueError("unexpected: bool(x) != 0")
    if x != 0:
       raise ValueError("unexpected: x != 0")
    return True

def test_u64():
    test_u64_divzero()
    x: u64 = 0
    if (bool(x != 0)):
       raise ValueError("unexpected: bool(x) != 0")
    if x != 0:
       raise ValueError("unexpected: x != 0")
    return True
    if u64("1234") != 1234:
        raise ValueError('u64("1234") gives wrong result')
    if u64("0x1234") != 4660:
        raise ValueError('u64("0x1234") gives wrong result')
    if u64("0o1234") != 668:
        raise ValueError('u64("0o1234") gives wrong result')
    if u64("0b1111") != 15:
        raise ValueError('u64("0b1111") gives wrong result')
    if u64("1234",7) != 466:
        raise ValueError('u64("1234",7) gives wrong result')



def test_int():
    if (141234567898765434567654345678765456787654 << 12) != 578496790113343219989112199900223311002230784:
        raise ValueError("left shift of positive int broken")
    if (-141234567898765434567654345678765456787654 << 12) != -578496790113343219989112199900223311002230784:
        raise ValueError("left shift of negative int broken")
    if (141234567898765434567654345678765456787654 >> 12) != 34481095678409529923743736737979847848:
        raise ValueError("right shift of positive int broken")
    if (-141234567898765434567654345678765456787654 >> 12) != -34481095678409529923743736737979847848:
        raise ValueError("right shift of negative int broken")
    if (123457665434567898765434567876545678765456789876587678767876789876578456787645676543456765435 >> 100) != 97390925711186052433660104097118587966803147032967724376831828:
        raise ValueError("right shift of positive int broken")
    if int(1.23456789e15) != 1234567890000000:
        raise ValueError("int() of float e15 not working")
    if int(1.23456789e150) != 1234567889999999836491654725378050829066454385249330908721879362956247951768828819773169753596449374655959952724750267483926250851143576906326291251200:
        raise ValueError("int() of float e150 not working")
    if abs (10**500/10**500 - 1) > 1e-100:
        raise ValueError("10**500/10**500 != 1")
    if (round(123456789, 10)) != 1.23456789e8:
        raise ValueError("round(123456789, 10) != 1.23456789e8")
    if round(123456789, -4) != 123460000:
        raise ValueError("round(123456789, -10) != 1234567890000000000")
    if round(-123456789, -4) != -123460000:
        raise ValueError("round(-123456789, -10) != -1234567890000000000")
    if int('123') != 123:
        raise ValueError("int('123') != 123")
    if hash(2**131) >= 2**64:
        raise ValueError("hash(2**131) too big")
    if int("1234") != 1234:
        raise ValueError('int("1234") gives wrong result')
    if int("0x1234") != 4660:
        raise ValueError('int("0x1234") gives wrong result')
    if int("0o1234") != 668:
        raise ValueError('int("0o1234") gives wrong result')
    if int("0b1111") != 15:
        raise ValueError('int("0b1111") gives wrong result')
    if int("1234",7) != 466:
        raise ValueError('int("1234",7) gives wrong result')
    if int(" -0x34ac53ba0976ae3345A4E8765CCD2345",16) != -70014629019847787457594182942686257989:
        raise ValueError('int(" -0x34ac53ba0976ae3345A4E8765CCD2345",16) gives wrong result')
    if int("123rtgvhu7654erfghjuyt54567ujhgfrtyujhgvfc3456ytyhgt54edf",36) != 1505279714924572685646656049328765658872190236487877560661160764208141566553212677331651:
        raise ValueError('int("123rtgvhu7654erfghjuyt54567ujhgfrtyujhgvfc3456ytyhgt54edf",36) gives wrong result')
    if int("0") != 0:
        raise ValueError('int("0")  gives wrong result')
    if int("1234567890abcdef" * 100,16) != 0x1234567890abcdef * (2**6400)//(2**64-1):
        raise ValueError('int("1234567890abcdef" * 100,16) gives wrong result')
    if int('1'* 10000,2) != 2**10000 - 1:
        raise ValueError("int('1'* 10000,2) gives wrong result")

actor main(env):
    try:
        test_int()
        test_i16()
        test_i32()
        test_i64()
        test_u16()
        test_u32()
        test_u64()
        env.exit(0)
    except Exception as e:
        print(e)
        env.exit(1)
