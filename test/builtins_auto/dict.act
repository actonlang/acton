
actor main(env):
    d: dict[str, str] = {"a": "A"}

    d["b"] = "B"
    if d != {"a": "A", "b": "B"}:
        print("Unexpected result of dict[\"b\"]=\"b\":", d)
        await async env.exit(1)

    if len(d) != 2:
        print("Unexpected result of len(d):", len(d))
        await async env.exit(1)

    if list(d.keys()) != ["a", "b"]:
        print("Unexpected result of d.keys():", d.keys())
        await async env.exit(1)

    if repr(list(d.items())) != repr([("a", "A"), ("b", "B")]):
        print("Unexpected result of d.items():", d.items())
        await async env.exit(1)

    if list(d.values()) != ["A", "B"]:
        print("Unexpected result of d.values():", d.values())
        await async env.exit(1)

    del d["b"]
    if d != {"a": "A"}:
        print("Unexpected result of del dict[\"b\"]:", d)
        await async env.exit(1)

#    pop is a merhod of protocol Set, so for Mapping we have chosen name popitem...
#    d["pop"] = 123
#    p = d.pop("pop")
#    if p != 123:
#        print("Unexpected result of d.pop(\"b\"):", p)
#        await async env.exit(1)

    d["popi"] = "POPI"
    pi = d.popitem()
    if pi.0 != "popi" and pi.1 != "POPI":
        print("Unexpected result of d.popitem():", str(pi.0), str(pi.1))
        await async env.exit(1)

    g = d.get("a", "")
    if g != "A":
        print("Unexpected result of d.get(\"a\"):", g)
        await async env.exit(1)

    d.update({"c": "C"}.items())
    if d != {"a": "A", "c": "C"}:
        print("Unexpected result of dict.update():", d)
        await async env.exit(1)

    sd = d.setdefault("setdef", "a")
    if sd is None or (sd is not None and sd != "a") or d != {'a':'A', 'c':'C', 'setdef':'a'}:
        print("Unexpected result of d.setdefault(\"setdef\", \"a\")")
        await async env.exit(1)

#    Code generation for calls of copy is wrong; the hashwit needed is not supplied.
#    d = {'a' : 'A', 'b' : 'B'}
#    d2 = d.copy()
#    if d2 !=  {'a' : 'A', 'b' : 'B'}:
#        print("Unexpected result of d.copy():", d2)
#        await async env.exit(1)

#    d3 = d
#    d.clear()
#    if d != {} or d3 !=  {}: 
#       print("Unexpected result of d.clear():", d)
#       await async env.exit(1)

    d1 : dict[str,?str] = {"a":"A", "b" : None, "c" : "C"}
    del d1["a"]
    if d1 != {"b" : None, "c" : "C"}:
        print("Unexpected result with None value:", d1)
        await async env.exit(1)

    await async env.exit(0)
