def test_str_find():
    s = "hello, world!"
    print("Testing str.find()")
    return (s.find("hello, world!") == 0 and
            s.find("world") == 7 and
            s.find("world", 0) == 7 and
            s.find("world", 8) == -1 and
            s.find("world", 0, 5) == -1 and
            s.find("world", 0, 7) == -1 and
            s.find("crap") == -1)

def test_empty_str_capitalize():
    result = "".capitalize()
    print("empty str.capitalize(): '{result}'")
    return result == ""

def test_empty_str_center():
    result = "".center(5)
    print("empty str.center(5): '{result}'")
    return result == "     "

def test_empty_str_count():
    result = "".count("a")
    print("empty str.count('a'): {result}")
    return result == 0

def test_empty_str_encode():
    result = "".encode()
    print("empty str.encode(): {result}")
    return result == b""

def test_empty_str_endswith():
    result = "".endswith("")
    print("empty str.endswith(''): {result}")
    return result == True

def test_empty_str_expandtabs():
    result = "".expandtabs()
    print("empty str.expandtabs(): '{result}'")
    return result == ""

def test_empty_str_find():
    result = "".find("a")
    print("empty str.find('a'): {result}")
    return result == -1

def test_empty_str_index():
    print("empty str.index('a'): testing exception")
    try:
        "".index("a")
        return False
    except ValueError:
        return True

def test_empty_str_isalnum():
    result = "".isalnum()
    print("empty str.isalnum(): {result}")
    return result == False

def test_empty_str_isalpha():
    result = "".isalpha()
    print("empty str.isalpha(): {result}")
    return result == False

def test_empty_str_isascii():
    result = "".isascii()
    print("empty str.isascii(): {result}")
    return result == True

def test_empty_str_isdecimal():
    result = "".isdecimal()
    print("empty str.isdecimal(): {result}")
    return result == False

def test_empty_str_islower():
    result = "".islower()
    print("empty str.islower(): {result}")
    return result == False

def test_empty_str_isprintable():
    result = "".isprintable()
    print("empty str.isprintable(): {result}")
    # TODO: Is this right?!
    return result == False

def test_empty_str_isspace():
    result = "".isspace()
    print("empty str.isspace(): {result}")
    return result == False

def test_empty_str_istitle():
    result = "".istitle()
    print("empty str.istitle(): {result}")
    return result == False

def test_empty_str_isupper():
    result = "".isupper()
    print("empty str.isupper(): {result}")
    return result == False

def test_empty_str_join():
    result = "".join(["a", "b", "c"])
    print("empty str.join(['a', 'b', 'c']): '{result}'")
    return result == "abc"

def test_empty_str_ljust():
    result = "".ljust(5)
    print("empty str.ljust(5): '{result}'")
    return result == "     "

def test_empty_str_lower():
    result = "".lower()
    print("empty str.lower(): '{result}'")
    return result == ""

def test_empty_str_lstrip():
    result = "".lstrip()
    print("empty str.lstrip(): '{result}'")
    return result == ""

def test_empty_str_partition():
    sp = "".partition("a")
    print("empty str.partition('a'): ({sp.0}, {sp.1}, {sp.2})")
    return sp.0 == "" and sp.1 == "" and sp.2 == ""

def test_empty_str_replace():
    result = "".replace("a", "b")
    print("empty str.replace('a', 'b'): '{result}'")
    return result == ""

def test_empty_str_rfind():
    result = "".rfind("a")
    print("empty str.rfind('a'): {result}")
    return result == -1

def test_empty_str_rindex():
    print("empty str.rindex('a'): testing exception")
    try:
        "".rindex("a")
        return False
    except ValueError:
        return True

def test_empty_str_rjust():
    result = "".rjust(5)
    print("empty str.rjust(5): '{result}'")
    return result == "     "

def test_empty_str_rpartition():
    sp = "".rpartition("a")
    print("empty str.rpartition('a'): ({sp.0}, {sp.1}, {sp.2})")
    return sp.0 == "" and sp.1 == "" and sp.2 == ""

def test_empty_str_rstrip():
    result = "".rstrip()
    print("empty str.rstrip(): '{result}'")
    return result == ""

def test_empty_str_split():
    result = "".split("a")
    print("empty str.split('a'): {result}")
    return result == [""]

def test_empty_str_splitlines():
    result = "".splitlines()
    print("empty str.splitlines(): {result}")
    return result == []

def test_empty_str_startswith():
    result = "".startswith("")
    print("empty str.startswith(''): {result}")
    return result == True

def test_empty_str_strip():
    result = "".strip()
    print("empty str.strip(): '{result}'")
    return result == ""

def test_empty_str_upper():
    result = "".upper()
    print("empty str.upper(): '{result}'")
    return result == ""

def test_empty_str_zfill():
    result = "".zfill(5)
    print("empty str.zfill(5): '{result}'")
    return result == "00000"

def test_endswith():
    s = "foobar"
    print("Testing str.endswith()")
    return (s.endswith("foobar") == True and
            s.endswith("bar") == True and
            s.endswith("banana") == False and
            s.endswith("longbanana") == False)

def test_str_contains():
    result = "hello, world!" in "hello, world!"
    print("'hello, world!' in 'hello, world!': {result}")
    return result == True

def test_str_startswith_same_length():
    result = "hello world".startswith("hello world")
    print("'hello world'.startswith('hello world'): {result}")
    return result == True

def test_str_startswith_prefix():
    result = "hello world".startswith("hello")
    print("'hello world'.startswith('hello'): {result}")
    return result == True

def test_str_startswith_not_prefix():
    result = "hello world".startswith("world")
    print("'hello world'.startswith('world'): {result}")
    return result == False

def test_str_startswith_empty():
    result = "hello world".startswith("")
    print("'hello world'.startswith(''): {result}")
    return result == True

def test_str_startswith_single_char():
    result = "a".startswith("a")
    print("'a'.startswith('a'): {result}")
    return result == True

def test_str_startswith_longer_prefix():
    result = "foo".startswith("foobar")
    print("'foo'.startswith('foobar'): {result}")
    return result == False

def test_bytes_hex():
    b = b'\xde\xad\xbe\xef'
    result = b.hex()
    print("bytes.hex(): {result}")
    return result == "deadbeef"

def test_bytes_from_hex():
    result = bytes.from_hex("deadbeef").hex()
    print("bytes.from_hex('deadbeef').hex(): {result}")
    return result == "deadbeef"

# Tests from strings_and_bytes.act
def test_helloworld():
    ascii = "Hello, world!"
    hex = "\x48ello, world!"
    return ascii == hex

def test_limdef():
    uniesc = "\u2200 \u03b5>0 \u2203 \u03b4>0 . |x - a| < \u03b4 \u21d2 |f(x) - c| < \u03b5."
    uni = "∀ ε>0 ∃ δ>0 . |x - a| < δ ⇒ |f(x) - c| < ε."
    return uniesc == uni

def test_encode_decode():
    uniesc = "\u2200 \u03b5>0 \u2203 \u03b4>0 . |x - a| < \u03b4 \u21d2 |f(x) - c| < \u03b5."
    blim = uniesc.encode()
    ulim = blim.decode()
    # encoding & decoding function pairs are exceedingly well suited to
    # property based testing, but we don't have a property based testing
    # library in Acton :/
    return uniesc == ulim

def test_strip_list_str():
    a = ["".strip()]
    return str(a) == "['']"

tests = {
    "test_str_find": test_str_find,
    "test_empty_str_capitalize": test_empty_str_capitalize,
    "test_empty_str_center": test_empty_str_center,
    "test_empty_str_count": test_empty_str_count,
    "test_empty_str_encode": test_empty_str_encode,
    "test_empty_str_endswith": test_empty_str_endswith,
    "test_empty_str_expandtabs": test_empty_str_expandtabs,
    "test_empty_str_index": test_empty_str_index,
    "test_empty_str_isalnum": test_empty_str_isalnum,
    "test_empty_str_isalpha": test_empty_str_isalpha,
    "test_empty_str_isascii": test_empty_str_isascii,
    "test_empty_str_isdecimal": test_empty_str_isdecimal,
    "test_empty_str_islower": test_empty_str_islower,
    "test_empty_str_isprintable": test_empty_str_isprintable,
    "test_empty_str_isspace": test_empty_str_isspace,
    "test_empty_str_istitle": test_empty_str_istitle,
    "test_empty_str_isupper": test_empty_str_isupper,
    "test_empty_str_join": test_empty_str_join,
    "test_empty_str_ljust": test_empty_str_ljust,
    "test_empty_str_lower": test_empty_str_lower,
    "test_empty_str_lstrip": test_empty_str_lstrip,
    "test_empty_str_partition": test_empty_str_partition,
    "test_empty_str_replace": test_empty_str_replace,
    "test_empty_str_rfind": test_empty_str_rfind,
    "test_empty_str_rindex": test_empty_str_rindex,
    "test_empty_str_rjust": test_empty_str_rjust,
    "test_empty_str_rpartition": test_empty_str_rpartition,
    "test_empty_str_rstrip": test_empty_str_rstrip,
    "test_empty_str_split": test_empty_str_split,
    "test_empty_str_splitlines": test_empty_str_splitlines,
    "test_empty_str_startswith": test_empty_str_startswith,
    "test_empty_str_strip": test_empty_str_strip,
    "test_empty_str_upper": test_empty_str_upper,
    "test_empty_str_zfill": test_empty_str_zfill,
    "test_endswith": test_endswith,
    "test_str_contains": test_str_contains,
    "test_str_startswith_same_length": test_str_startswith_same_length,
    "test_str_startswith_prefix": test_str_startswith_prefix,
    "test_str_startswith_not_prefix": test_str_startswith_not_prefix,
    "test_str_startswith_empty": test_str_startswith_empty,
    "test_str_startswith_single_char": test_str_startswith_single_char,
    "test_str_startswith_longer_prefix": test_str_startswith_longer_prefix,
    "test_bytes_hex": test_bytes_hex,
    "test_bytes_from_hex": test_bytes_from_hex,
    "test_helloworld": test_helloworld,
    "test_limdef": test_limdef,
    "test_encode_decode": test_encode_decode,
    "test_strip_list_str": test_strip_list_str,
}

actor main(env):
    failed = []
    for name, t in tests.items():
        print("== test: " + name)
        if not t():
            print("-- FAILED test: " + name)
            failed.append(name)
        print()
    if len(failed) == 0:
        print("All {len(tests)} tests OK!")
    else:
        print("\n{len(failed)} of {len(tests)} tests failed:")
        for name in failed:
            print(" - {name}")
    env.exit(max([0, min([len(failed), 1])]))
