import testing
import time

def _test_time():
    time.now()
    time.utcnow()
    time.monotonic()
    time.time()
    #print("Local datetime    :", time.now())
    #print("UTC datetime      :", time.utcnow())
    #print("Monotonic instant :", time.monotonic())
    #print("Wall clock instant:", time.time())
# TODO: fix so this runs, some compiler bug?
#        t1 = time.Instant.now()
#        t2 = time.Instant.now()
#        d = t2.since(t1)
#        print(d)
    time.test()
#        a = time.Instant.now()

def _test_instant_add():
    c = time.MonotonicClock(0, 0, 0)
    t1 = time.Instant(1234, 2 * 10**17, c)
    t2 = t1.add(time.Duration(1, 9 * 10**17, c))
    testing.assertEqual(t2.second, 1236, "second mismatch")
    testing.assertEqual(t2.attosecond, 10**17, "attosecond mismatch")

def _test_instant_sub():
    c = time.MonotonicClock(0, 0, 0)
    t1 = time.Instant(1234, 2 * 10**17, c)
    t2 = t1.sub(time.Duration(1, 5 * 10**17, c))
    testing.assertEqual(t2.second, 1232, "second mismatch ")
    testing.assertEqual(t2.attosecond, 7 * 10**17, "attosecond mismatch")

def _test_instant_ord():
    c = time.MonotonicClock(0, 0, 0)
    t1 = time.Instant(1234, 2 * 10**17, c)
    _t1 = time.Instant(1234, 2 * 10**17, c)
    t2 = time.Instant(1234, 3 * 10**17, c)
    t3 = time.Instant(1235, 1 * 10**17, c)

    testing.assertTrue(t1 == t1, "self comparison failed")
    testing.assertFalse(t1 != t1, "self comparison failed")
    testing.assertTrue(t1 == _t1, "eq comparison failed")
    testing.assertTrue(t1 != t2, "ne comparison failed")
    testing.assertTrue(t1 != t3, "ne comparison failed")
    testing.assertTrue(t1 <= t1, "self comparison failed")
    testing.assertTrue(t1 >= t1, "self comparison failed")
    testing.assertTrue(t1 < t2, "le comparison failed")
    testing.assertTrue(t1 <= t2, "le comparison failed")
    testing.assertTrue(t2 >= t1, "ge comparison failed")
    testing.assertTrue(t2 > t1, "ge comparison failed")
    testing.assertTrue(t1 < t3, "le comparison failed")
    testing.assertTrue(t1 <= t3, "le comparison failed")
    testing.assertTrue(t3 >= t1, "ge comparison failed")
    testing.assertTrue(t3 > t1, "ge comparison failed")
    testing.assertFalse(t1 > t2, "le comparison failed")
    testing.assertFalse(t1 > t2, "le comparison failed")
    testing.assertFalse(t2 < t1, "ge comparison failed")
    testing.assertFalse(t2 <= t1, "ge comparison failed")
    testing.assertFalse(t1 >= t3, "le comparison failed")
    testing.assertFalse(t1 > t3, "le comparison failed")
    testing.assertFalse(t3 < t1, "ge comparison failed")
    testing.assertFalse(t3 <= t1, "ge comparison failed")


__unit_tests: dict[str, testing.UnitTest] = {
    "_test_time": testing.UnitTest(_test_time, "time", "Time functions"),
    "_test_instant_add": testing.UnitTest(_test_instant_add, "instant_add", "Instant addition"),
    "_test_instant_sub": testing.UnitTest(_test_instant_sub, "instant_sub", "Instant subtraction"),
    "_test_instant_ord": testing.UnitTest(_test_instant_ord, "instant_ord", "Instant ordering"),
}

actor main(env):
    testing.test_runner(env, __unit_tests)
