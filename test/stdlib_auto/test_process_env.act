import process


actor main(env):
    def on_stderr(p, data):
        print("Received output on stderr:", data)
        print("... but not expecting any, exiting with error")
        await async env.exit(1)

    def on_stdout(p, data):
        print("Received output on stdout:", data)
        if data == b"FOO=BAR\n":
            print("environment variables as they should, yay")
            await async env.exit(0)
        else:
            print("Unexpected environment variables, exiting with error...")
            await async env.exit(1)

    def on_exit(p, error, exit_code, term_signal):
        if error is not None:
            print("Error from process:", error)
            await async env.exit(1)
        else:
            print("Process exited with code: ", exit_code, " terminated with signal:", term_signal)
            print("Exited in unexpected way, error...")
            await async env.exit(1)

    def test():
        print("Starting process..")
        pa = process.ProcessAuth(env.auth)
        p = process.Process(pa, ["env"], None, {"FOO": "BAR"}, on_stdout, on_stderr, on_exit)

    def ex():
        print("Test timeout, exiting with error")
        env.exit(1)

    test()
    after 3: ex()
