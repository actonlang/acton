# Test stdlib net module by first starting a server which listens to a TCP port
# and then creating a TCP client connection which connects to the server, sends
# a message and expects a reply. This exercices both ends of the TCP connection.

import net
import random

actor Server(conn):
    def on_receive(c, data):
        print("Server received some data:", data, " from:", c)
        if data == b"PING":
            c.write(b"PONG")
            c.close()

    def on_error(c, error):
        print("There was an error:", error, " from:", c)


actor Listener(env, port):
    def on_lsock_error(l, error):
        print("There was an error with the TCPListener socket:", error)

    def on_server_accept(c):
        s = Server(c)
        c.cb_install(s.on_receive, s.on_error)

    listen_auth = net.TCPListenAuth(net.TCPAuth(net.NetAuth(env.auth)))
    server = net.TCPListener(listen_auth, "0.0.0.0", port, on_lsock_error, on_server_accept)


actor Client(env: Env, port: int):
    def on_connect(c):
        print("Client established connection")
        await async c.write(b"PING")

    def on_receive(c, data):
        print("Client RECV", data)
        if data == b"PONG":
            print("Got PONG, all good, yay")
            # Test idempotency / that we don't break anything by double-closing
            c.close()
            c.close()
            after 0.1: _exit()
        else:
            print("Got bad response, exiting with error..")
            await async env.exit(1)

    def on_error(c, msg):
        print("Client ERR", msg)

    def _exit():
        await async env.exit(0)

    connect_auth = net.TCPConnectAuth(net.TCPAuth(net.NetAuth(env.auth)))
    client = net.TCPIPConnection(connect_auth, "127.0.0.1", port, on_connect, on_receive, on_error)


actor main(env):
    def timeout_error():
        print("Timeout reached, exiting with error...")
        await async env.exit(1)

    after 2: timeout_error()

    port = random.randint(10000, 20000)
    print("Using port", port)
    l = Listener(env, port)
    c = Client(env, port)

