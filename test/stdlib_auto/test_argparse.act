import logging
import argparse

def test_opts():
    p = argparse.Parser()
    p.add_bool("verbose", "verbose mode")
    p.add_option("num", "int", "?", 1337, "number field")
    p.add_option("text", "str", "?", "Hello", "text field")

    args = p.parse(["./app"])
    if args.get_bool("verbose") != False:
        raise ValueError("default bool verbose != True")
    if args.get_int("num") != 1337:
        raise ValueError("default int num != 1337")
    if args.get_str("text") != "Hello":
        raise ValueError('default str text != "Hello"')

    args = p.parse(["./app", "--verbose", "--num", "123", "--text", "foo"])
    if args.get_bool("verbose") != True:
        raise ValueError("bool verbose != True")
    if args.get_int("num") != 123:
        raise ValueError("int num != 123")
    if args.get_str("text") != "foo":
        raise ValueError('str text != "foo"')

def test_opts_dupe():
    p = argparse.Parser()
    p.add_option("text", "str", "?", "Hello", "Text field")
    try:
        p.add_option("text", "str", "?", "Hello", "Text field")
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError due to duplicate option")

def test_opts_nargs():
    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_option("text", "strlist", "+", [], "Text field")

    args = p.parse(["./app", "--text", "A", "--verbose", "--text", "B"])
    if args.get_strlist("text") != ["A", "B"]:
        raise ValueError('opt strlist != ["A", "B"]')
    if args.get_bool("verbose") != True:
        raise ValueError("bool verbose != True")

def test_posarg():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")
    p.add_arg("outfile", "output file", True, "?")

    args = p.parse(["./app", "foo", "bar"])
    if args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if args.get_str("outfile") != "bar":
        raise ValueError("pos arg outfile != bar")

def test_posarg_nargs1():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "+")
    p.add_arg("outfile", "output file", True, "?")

    args = p.parse(["./app", "in1", "in2", "bar"])
    if args.get_strlist("infile") != ["in1", "in2"]:
        raise ValueError('pos arg infile != ["in1", "in2"]')
    if args.get_str("outfile") != "bar":
        raise ValueError("pos arg outfile != bar")

def test_posarg_nargs2():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")
    p.add_arg("outfile", "output file", True, "+")

    args = p.parse(["./app", "in1", "out1", "out2"])
    if args.get_str("infile") != "in1":
        raise ValueError('pos arg infile != "in1"')
    if args.get_strlist("outfile") != ["out1", "out2"]:
        raise ValueError('pos arg outfile != ["out1", "out2"]')


def test_posarg_nargs_invalid():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "+")
    try:
        p.add_arg("outfile", "output file", True, "+")
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError since multiple nargs=+ args is invalid (ambiguous)")

def test_posarg_missing():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")

    try:
        p.parse(["./app"])
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError since positional argument is missing")

def test_posarg_not_required1():
    p = argparse.Parser()
    p.add_arg("infile", "input file", False, "?")
    p.add_arg("outfile", "output file", False, "?")

    args = p.parse(["./app", "foo", "bar"])
    if args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if args.get_str("outfile") != "bar":
        raise ValueError("pos arg outfile != bar")

def test_posarg_not_required2():
    p = argparse.Parser()
    p.add_arg("infile", "input file", False, "?")

    # These should both work fine
    args = p.parse(["./app"])
    try:
        args.get_str("infile")
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError since optional positional argument is missing")


def test_posarg_dashdash():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")
    p.add_arg("outfile", "output file", True, "?")

    args = p.parse(["./app", "--", "foo", "--bar"])
    if args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if args.get_str("outfile") != "--bar":
        raise ValueError("pos arg outfile != --bar")



actor Foo():
    def foo():
        return "foo"

# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd():
    proc def _build(args):
        # make sure we can actually call an action here
        f = Foo()
        f.foo()

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_arg("infile", "input file", True, "?")
    pb = p.add_cmd("build", "Build stuff", _build)
    pb.add_bool("dev", "Enable dev mode")
    pb.add_option("sigs", "str", help="Show signatures of file")

    _args = p.parse(["./app", "--verbose", "foo", "build", "--dev", "--sigs", "bar.ty"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("build cmd verbose flag == True")
    if _args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_str("sigs") != "bar.ty":
        raise ValueError("--sigs != bar.ty")

# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_strlist():
    proc def _build(args):
        pass

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_arg("infile", "input file", True, "?")
    pb = p.add_cmd("build", "Build stuff", _build)
    pb.add_bool("dev", "Enable dev mode")
    pb.add_option("text", "strlist", "+", [], "Text field")

    _args = p.parse(["./app", "--verbose", "foo", "build", "--dev", "--text", "A", "--text", "B"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("build cmd verbose flag == True")
    if _args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_strlist("text") != ["A", "B"]:
        raise ValueError("build cmd text strlist != ['A', 'B']")


# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_nested():
    proc def _build(args):
        pass

    proc def _build_and_run(args):
        pass

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    pb = p.add_cmd("build", "Build stuf", _build)
    pb.add_bool("dev", "Enable dev mode")
    pbr = pb.add_cmd("run", "build and run stuff", _build_and_run)
    pbr.add_bool("foo", "FOO")

    _args = p.parse(["./app", "--verbose", "build", "--dev", "run", "--foo"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("build cmd verbose flag == True")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_bool("foo") != True:
        raise ValueError("build cmd flag flag == True")


# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_nested2():
    proc def _build(args):
        pass

    proc def _build_and_run(args):
        pass

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_bool("some-flag", "Some flag")
    pb = p.add_cmd("build", "Build stuf", _build)
    pb.add_bool("dev", "Enable dev mode")
    pbr = pb.add_cmd("run", "build and run stuff", _build_and_run)
    pbr.add_bool("foo", "FOO")

    _args = p.parse(["./app", "--verbose", "build", "--dev", "run", "--foo", "--some-flag"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("verbose flag == True")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_bool("foo") != True:
        raise ValueError("build run cmd foo flag == True")
    if _args.get_bool("some-flag") != True:
        raise ValueError("some-flag flag == True")

# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_optional_argument():
    proc def _new(args):
        pass

    p = argparse.Parser()
    p.add_arg("infile", "input file", False)
    pb = p.add_cmd("new", "New", _new)
    pb.add_arg("dirname")

    _args = p.parse(["./app", "new", "foobar", "foo"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_str("dirname") != "foobar":
        raise ValueError("dirname != foobar, actual: " + _args.get_str("dirname"))
    if _args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")

def test_help():
    p = argparse.Parser()
    try:
        args = p.parse(["./app", "--help"])
    except argparse.PrintUsage:
        return
    raise ValueError("Expected PrintUsage")

actor test_help_subcmd():
    def _cmd_build(args):
        pass

    def test():
        p = argparse.Parser()
        p.add_bool("verbose", "Enable verbose output")
        pb = p.add_cmd("build", "Build stuff", _cmd_build)
        pb.add_bool("dev", "Enable dev mode")
        pb.add_option("haxx", "str", help="HAXX")

        try:
            args = p.parse(["./app", "build", "--help"])
        except argparse.PrintUsage as e:
            # We want to see the help for the build command
            if "HAXX" not in e.msg:
                raise ValueError("Expected help for build command, got:\n{e.msg}")
            return
        raise ValueError("Expected PrintUsage")
    test()


def test_short_bool():
    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output", short="v")
    p.add_bool("debug", "Enable debug mode", short="d")

    # Test short option
    args = p.parse(["./app", "-v"])
    if args.get_bool("verbose") != True:
        raise ValueError("short bool -v should be True")
    if args.get_bool("debug") != False:
        raise ValueError("debug should remain False")

    # Test long option still works
    args = p.parse(["./app", "--verbose"])
    if args.get_bool("verbose") != True:
        raise ValueError("long bool --verbose should be True")

def test_short_option_with_value():
    p = argparse.Parser()
    p.add_option("output", "str", default="out.txt", help="Output file", short="o")
    p.add_option("count", "int", default=1, help="Number of times", short="n")

    # Test short option with value
    args = p.parse(["./app", "-o", "result.txt"])
    if args.get_str("output") != "result.txt":
        raise ValueError("short option -o should set output to result.txt")

    # Test short option with int value
    args = p.parse(["./app", "-n", "42"])
    if args.get_int("count") != 42:
        raise ValueError("short option -n should set count to 42")

    # Test long options still work
    args = p.parse(["./app", "--output", "final.txt", "--count", "100"])
    if args.get_str("output") != "final.txt":
        raise ValueError("long option --output should work")
    if args.get_int("count") != 100:
        raise ValueError("long option --count should work")

def test_short_grouped():
    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output", short="v")
    p.add_bool("debug", "Enable debug mode", short="d")
    p.add_bool("force", "Force operation", short="f")

    # Test grouped short options
    args = p.parse(["./app", "-vdf"])
    if args.get_bool("verbose") != True:
        raise ValueError("grouped -vdf should set verbose=True")
    if args.get_bool("debug") != True:
        raise ValueError("grouped -vdf should set debug=True")
    if args.get_bool("force") != True:
        raise ValueError("grouped -vdf should set force=True")

def test_short_mixed_with_long():
    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output", short="v")
    p.add_option("output", "str", default="out.txt", help="Output file", short="o")
    p.add_bool("debug", "Enable debug mode")  # No short option

    args = p.parse(["./app", "-v", "--debug", "-o", "test.txt"])
    if args.get_bool("verbose") != True:
        raise ValueError("mixed: -v should be True")
    if args.get_bool("debug") != True:
        raise ValueError("mixed: --debug should be True")
    if args.get_str("output") != "test.txt":
        raise ValueError("mixed: -o should set output")

def test_short_option_conflicts():
    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output", short="v")
    try:
        p.add_bool("version", "Show version", short="v")  # Conflict!
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError for conflicting short options")

def test_short_invalid_chars():
    p = argparse.Parser()
    try:
        p.add_bool("verbose", "Enable verbose output", short="ab")  # Too long
    except argparse.ArgumentError:
        pass
    else:
        raise ValueError("Expected ArgumentError for multi-char short option")

    try:
        p.add_bool("debug", "Enable debug", short="")  # Empty
    except argparse.ArgumentError:
        pass
    else:
        raise ValueError("Expected ArgumentError for empty short option")

    try:
        p.add_bool("force", "Force operation", short="-")  # Invalid char
    except argparse.ArgumentError:
        pass
    else:
        raise ValueError("Expected ArgumentError for invalid character")

    try:
        p.add_bool("quiet", "Quiet mode", short="=")  # Invalid char
    except argparse.ArgumentError:
        pass
    else:
        raise ValueError("Expected ArgumentError for invalid character")

def test_short_inline_values():
    p = argparse.Parser()
    p.add_option("output", "str", help="Output file", short="o")
    p.add_option("count", "int", help="Number", short="n")

    # Test inline string value
    args = p.parse(["./app", "-otest.txt"])
    if args.get_str("output") != "test.txt":
        raise ValueError("Inline string value -otest.txt failed")

    # Test inline int value
    args = p.parse(["./app", "-n42"])
    if args.get_int("count") != 42:
        raise ValueError("Inline int value -n42 failed")

def test_short_ambiguous_grouping():
    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose", short="v")
    p.add_option("output", "str", help="Output file", short="o")

    # This should be treated as -o with value "verbose.txt"
    args = p.parse(["./app", "-overbose.txt"])
    if args.get_str("output") != "verbose.txt":
        raise ValueError("Expected -overbose.txt to be treated as -o with value 'verbose.txt'")

    # But this should fail: non-bool option in middle of group
    try:
        args = p.parse(["./app", "-vov"])  # -v -o -v but -o needs value
    except argparse.ArgumentError:
        pass
    else:
        raise ValueError("Expected error for non-bool option in middle of group")

def test_short_options_with_subcommands():
    def _cmd_build(args):
        pass

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output", short="v")

    build_cmd = p.add_cmd("build", "Build project", _cmd_build)
    build_cmd.add_bool("dev", "Development mode", short="d")
    build_cmd.add_option("output", "str", help="Output file", short="o")

    # Test short option on main parser
    args = p.parse(["./app", "-v", "build", "-d", "-o", "result.txt"])
    if args.get_bool("verbose") != True:
        raise ValueError("Main parser short option -v should work")
    if args.get_bool("dev") != True:
        raise ValueError("Sub-command short option -d should work")
    if args.get_str("output") != "result.txt":
        raise ValueError("Sub-command short option -o should work")

    # Test grouped short options on sub-command
    args = p.parse(["./app", "build", "-do", "test.txt"])
    if args.get_bool("dev") != True:
        raise ValueError("Grouped sub-command short option -d should work")
    if args.get_str("output") != "test.txt":
        raise ValueError("Grouped sub-command short option -o should work")

actor main(env):
    try:
        test_opts()
        test_opts_nargs()
        test_opts_dupe()
        test_posarg()
        test_posarg_nargs_invalid()
        test_posarg_nargs1()
        test_posarg_nargs2()
        test_posarg_missing()
        test_posarg_not_required1()
        test_posarg_not_required2()
        test_posarg_dashdash()
        test_cmd()
        test_cmd_strlist()
        test_cmd_nested()
        test_cmd_nested2()
        test_cmd_optional_argument()
        test_help()
        test_help_subcmd()
        test_short_bool()
        test_short_option_with_value()
        test_short_grouped()
        test_short_mixed_with_long()
        test_short_option_conflicts()
        test_short_invalid_chars()
        test_short_inline_values()
        test_short_ambiguous_grouping()
        test_short_options_with_subcommands()
        env.exit(0)
    except Exception as exc:
        env.exit(1)
        raise exc
