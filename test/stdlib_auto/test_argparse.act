import logging
import argparse

def test_opts():
    p = argparse.Parser()
    p.add_bool("verbose", "verbose mode")
    p.add_option("num", "int", "?", 1337, "number field")
    p.add_option("text", "str", "?", "Hello", "text field")

    args = p.parse(["./app"])
    if args.get_bool("verbose") != False:
        raise ValueError("default bool verbose != True")
    if args.get_int("num") != 1337:
        raise ValueError("default int num != 1337")
    if args.get_str("text") != "Hello":
        raise ValueError('default str text != "Hello"')

    args = p.parse(["./app", "--verbose", "--num", "123", "--text", "foo"])
    if args.get_bool("verbose") != True:
        raise ValueError("bool verbose != True")
    if args.get_int("num") != 123:
        raise ValueError("int num != 123")
    if args.get_str("text") != "foo":
        raise ValueError('str text != "foo"')

def test_opts_dupe():
    p = argparse.Parser()
    p.add_option("text", "str", "?", "Hello", "Text field")
    try:
        p.add_option("text", "str", "?", "Hello", "Text field")
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError due to duplicate option")

def test_opts_nargs():
    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_option("text", "strlist", "+", [], "Text field")

    args = p.parse(["./app", "--text", "A", "--verbose", "--text", "B"])
    if args.get_strlist("text") != ["A", "B"]:
        raise ValueError('opt strlist != ["A", "B"]')
    if args.get_bool("verbose") != True:
        raise ValueError("bool verbose != True")

def test_posarg():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")
    p.add_arg("outfile", "output file", True, "?")

    args = p.parse(["./app", "foo", "bar"])
    if args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if args.get_str("outfile") != "bar":
        raise ValueError("pos arg outfile != bar")

def test_posarg_nargs1():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "+")
    p.add_arg("outfile", "output file", True, "?")

    args = p.parse(["./app", "in1", "in2", "bar"])
    if args.get_strlist("infile") != ["in1", "in2"]:
        raise ValueError('pos arg infile != ["in1", "in2"]')
    if args.get_str("outfile") != "bar":
        raise ValueError("pos arg outfile != bar")

def test_posarg_nargs2():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")
    p.add_arg("outfile", "output file", True, "+")

    args = p.parse(["./app", "in1", "out1", "out2"])
    if args.get_str("infile") != "in1":
        raise ValueError('pos arg infile != "in1"')
    if args.get_strlist("outfile") != ["out1", "out2"]:
        raise ValueError('pos arg outfile != ["out1", "out2"]')


def test_posarg_nargs_invalid():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "+")
    try:
        p.add_arg("outfile", "output file", True, "+")
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError since multiple nargs=+ args is invalid (ambiguous)")

def test_posarg_missing():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")

    try:
        p.parse(["./app"])
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError since positional argument is missing")

def test_posarg_not_required1():
    p = argparse.Parser()
    p.add_arg("infile", "input file", False, "?")
    p.add_arg("outfile", "output file", False, "?")

    args = p.parse(["./app", "foo", "bar"])
    if args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if args.get_str("outfile") != "bar":
        raise ValueError("pos arg outfile != bar")

def test_posarg_not_required2():
    p = argparse.Parser()
    p.add_arg("infile", "input file", False, "?")

    # These should both work fine
    args = p.parse(["./app"])
    try:
        args.get_str("infile")
    except argparse.ArgumentError:
        return
    raise ValueError("Expected ArgumentError since optional positional argument is missing")


def test_posarg_dashdash():
    p = argparse.Parser()
    p.add_arg("infile", "input file", True, "?")
    p.add_arg("outfile", "output file", True, "?")

    args = p.parse(["./app", "--", "foo", "--bar"])
    if args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if args.get_str("outfile") != "--bar":
        raise ValueError("pos arg outfile != --bar")



actor Foo():
    def foo():
        return "foo"

# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd():
    proc def _build(args):
        # make sure we can actually call an action here
        f = Foo()
        f.foo()

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_arg("infile", "input file", True, "?")
    pb = p.add_cmd("build", "Build stuff", _build)
    pb.add_bool("dev", "Enable dev mode")
    pb.add_option("sigs", "str", help="Show signatures of file")

    _args = p.parse(["./app", "--verbose", "foo", "build", "--dev", "--sigs", "bar.ty"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("build cmd verbose flag == True")
    if _args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_str("sigs") != "bar.ty":
        raise ValueError("--sigs != bar.ty")

# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_strlist():
    proc def _build(args):
        pass

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_arg("infile", "input file", True, "?")
    pb = p.add_cmd("build", "Build stuff", _build)
    pb.add_bool("dev", "Enable dev mode")
    pb.add_option("text", "strlist", "+", [], "Text field")

    _args = p.parse(["./app", "--verbose", "foo", "build", "--dev", "--text", "A", "--text", "B"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("build cmd verbose flag == True")
    if _args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_strlist("text") != ["A", "B"]:
        raise ValueError("build cmd text strlist != ['A', 'B']")


# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_nested():
    proc def _build(args):
        pass

    proc def _build_and_run(args):
        pass

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    pb = p.add_cmd("build", "Build stuf", _build)
    pb.add_bool("dev", "Enable dev mode")
    pbr = pb.add_cmd("run", "build and run stuff", _build_and_run)
    pbr.add_bool("foo", "FOO")

    _args = p.parse(["./app", "--verbose", "build", "--dev", "run", "--foo"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("build cmd verbose flag == True")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_bool("foo") != True:
        raise ValueError("build cmd flag flag == True")


# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_nested2():
    proc def _build(args):
        pass

    proc def _build_and_run(args):
        pass

    p = argparse.Parser()
    p.add_bool("verbose", "Enable verbose output")
    p.add_bool("some-flag", "Some flag")
    pb = p.add_cmd("build", "Build stuf", _build)
    pb.add_bool("dev", "Enable dev mode")
    pbr = pb.add_cmd("run", "build and run stuff", _build_and_run)
    pbr.add_bool("foo", "FOO")

    _args = p.parse(["./app", "--verbose", "build", "--dev", "run", "--foo", "--some-flag"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_bool("verbose") != True:
        raise ValueError("verbose flag == True")
    if _args.get_bool("dev") != True:
        raise ValueError("build cmd dev flag == True")
    if _args.get_bool("foo") != True:
        raise ValueError("build run cmd foo flag == True")
    if _args.get_bool("some-flag") != True:
        raise ValueError("some-flag flag == True")

# TODO: this should be a function, not an actor but that gives a lambdalifter error
actor test_cmd_optional_argument():
    proc def _new(args):
        pass

    p = argparse.Parser()
    p.add_arg("infile", "input file", False)
    pb = p.add_cmd("new", "New", _new)
    pb.add_arg("dirname")

    _args = p.parse(["./app", "new", "foobar", "foo"])
    _cmd = _args.cmd
    if _cmd is None:
        raise ValueError("Expected build cmd set")
    if _args.get_str("dirname") != "foobar":
        raise ValueError("dirname != foobar, actual: " + _args.get_str("dirname"))
    if _args.get_str("infile") != "foo":
        raise ValueError("pos arg infile != foo")

def test_help():
    p = argparse.Parser()
    try:
        args = p.parse(["./app", "--help"])
    except argparse.PrintUsage:
        return
    raise ValueError("Expected PrintUsage")

actor test_help_subcmd():
    def _cmd_build(args):
        pass

    def test():
        p = argparse.Parser()
        p.add_bool("verbose", "Enable verbose output")
        pb = p.add_cmd("build", "Build stuff", _cmd_build)
        pb.add_bool("dev", "Enable dev mode")
        pb.add_option("haxx", "str", help="HAXX")

        try:
            args = p.parse(["./app", "build", "--help"])
        except argparse.PrintUsage as e:
            # We want to see the help for the build command
            if "HAXX" not in e.error_message:
                raise ValueError("Expected help for build command, got:\n" + e.error_message)
            return
        raise ValueError("Expected PrintUsage")
    test()


actor main(env):
    try:
        test_opts()
        test_opts_nargs()
        test_opts_dupe()
        test_posarg()
        test_posarg_nargs_invalid()
        test_posarg_nargs1()
        test_posarg_nargs2()
        test_posarg_missing()
        test_posarg_not_required1()
        test_posarg_not_required2()
        test_posarg_dashdash()
        test_cmd()
        test_cmd_strlist()
        test_cmd_nested()
        test_cmd_nested2()
        test_cmd_optional_argument()
        test_help()
        test_help_subcmd()
        env.exit(0)
    except Exception as exc:
        env.exit(1)
        raise exc
