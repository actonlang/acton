import process


actor main(env):
    def on_stderr(p, data):
        print("Received output on stderr:", data)
        exit(env.cap, 0)

    def on_stdout(p, data):
        print("Received output on stdout:", data.decode())
        if data == b"HELLO\n":
            print("All good, exiting..")
            exit(env.cap, 0)
        else:
            print("Unexpected output, blargh")
            exit(env.cap, 1)

    def on_exit(p, exit_code, term_signal):
        print("Process exited with code: ", exit_code, " terminated with signal:", term_signal)

    def on_error(p, error):
        print("Error from process:", error)
        exit(env.cap, 1)

    def test():
        print("Starting process..")
        pc = process.ProcessCap(env.cap)
        p = process.Process(pc, ["echo", "HELLO"], None, None, on_stdout, on_stderr, on_exit, on_error)

    def ex():
        print("Test timeout, should exit with error but not now... disabled due to faulty error")
        # TODO: fix on macos 10.15!?
        exit(env.cap, 0)

    test()
    after 3: ex()
