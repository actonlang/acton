
import net
import http
import logging
import testing

def _test_http_parser(log_handler: logging.Handler):
    log = logging.Logger(log_handler)
    def partializer(testfun, query, parsed) -> bool:
        # Go through query byte by byte, and feed it to the parser one more
        # byte at a time until we get a complete request
        for i in range(len(query)):
            partial_request = query[0:i+1]
            req, rest = http.parse_request(partial_request, log)
            if req is not None:
                if str(parsed) == str(req):
                    return True
                else:
                    print("Expected: " + str(parsed) + " got: " + str(req))
                    return False
        return False

    a = b"\r\n\r\n"
    qs = a.split(b"\r\n\r\n", 1)
    # Test various aspects of parsing HTTP requests
    tests = [
        (query = b"GET / HTTP/1.1\r\nHost: 127.0.0.1:8000\r\nUser-Agent: curl/7.85.0\r\nAccept: */*\r\n\r\n",
         expected = http.Request("GET", "/", b"1.1", {"host": "127.0.0.1:8000", "user-agent": "curl/7.85.0", "accept": "*/*"}, b"")),
        (query = b"GET / HTTP/1.1\r\nHost: 127.0.0.1:8000\r\nUser-Agent: curl/7.85.0\r\nAccept: */*\r\nContent-Length: 5\r\n\r\nhello",
         expected = http.Request("GET", "/", b"1.1", {"host": "127.0.0.1:8000", "user-agent": "curl/7.85.0", "accept": "*/*", "content-length": "5"}, b"hello")),
        (query = b"GET / HTTP/1.1\r\nHost: 127.0.0.1:8000\r\nUser-Agent: curl/7.85.0\r\nAccept: */*\r\nTransfer-Encoding: chunked\r\n\r\n4\r\nWiki\r\n5\r\npedia\r\nE\r\n in\r\n\r\nchunks.\r\n0\r\n\r\n",
         expected = http.Request("GET", "/", b"1.1", {"host": "127.0.0.1:8000", "user-agent": "curl/7.85.0", "accept": "*/*", "transfer-encoding": "chunked"}, b"Wikipedia in\r\n\r\nchunks.")),
    ]
    all_good = True
    for t in tests:
        query = t.query
        expected = t.expected
        # Parse whole request
        parsed, rest = http.parse_request(t.query, log)
        testing.assertEqual(expected, parsed, "Parsed request does not match expected")

        # Parse request byte by byte
        for i in range(len(t.query)):
            partial_request = t.query[0:i+1]
            req, rest = http.parse_request(partial_request, log)
            if req is not None:
                testing.assertEqual(expected, req, "Parsed request does not match expected")

# TODO: why do we have to have an actor here? all this code would preferably go right in the _test function
actor _actest_http_client_server(report_result, env, log_handler: logging.Handler):
    log = logging.Logger(log_handler)

    serv_cap = net.TCPListenCap(net.TCPCap(net.NetCap(env.cap)))

    def _on_http_listen_error(listener, error):
        pass

    def _on_http_accept(server):
        server.cb_install(_on_http_server_request, _on_http_server_error)

    def _on_http_server_request(server, request, respond):
        respond(200, {}, "Hello, world!")

    def _on_http_server_error(server, error):
        pass

    server = http.Listener(serv_cap, "0.0.0.0", 8473, _on_http_listen_error, _on_http_accept)

    def _on_http_connect(c):
        c.get("/", {}, _on_http_receive)

    def _on_http_receive(c, data):
        report_result(True, None)

    def _on_http_error(c, errmsg):
        print(errmsg)

    conn_cap = net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap)))
    client = http.Client(conn_cap, "127.0.0.1", _on_http_connect, _on_http_error, scheme="http", port=8473)

def _test_http_client_server(report_result, env, log_handler: logging.Handler):
    _actest_http_client_server(report_result, env, log_handler)

# TODO: this should be generated by the compiler
__unit_tests: dict[str, testing.UnitTest] = {
}

__sync_actor_tests: dict[str, testing.SyncActorTest] = {
    "_test_http_parser": testing.SyncActorTest(_test_http_parser, "http_parser", "HTTP Parser"),
}

__async_actor_tests: dict[str, testing.AsyncActorTest] = {
}

__env_tests: dict[str, testing.EnvTest] = {
    "_test_http_client_server": testing.EnvTest(_test_http_client_server, "http_client_server", "HTTP Client/Server"),
}

actor __test_main(env):
    testing.test_runner(env, __unit_tests, __sync_actor_tests, __async_actor_tests, __env_tests)
