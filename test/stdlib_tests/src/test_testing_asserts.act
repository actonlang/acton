
import testing
from testing import NotEqualError

def _test_assert_equal():
    """Test assertEqual"""
    messages = []

    # should raise NotEqualError because 1 != 2
    try:
        testing.assertEqual(1, 2)
    except AssertionError as e:
        messages.append(str(e))
    else:
        raise Exception("assertEqual(1, 2) should have raised NotEqualError")

    # should raise NotEqualError because 1 != None
    try:
        testing.assertEqual(1, None)
    except AssertionError as e:
        messages.append(str(e))
    else:
        raise Exception("assertEqual(1, None) should have raised NotEqualError")

    # should raise NotEqualError because None != 1
    try:
        testing.assertEqual(None, 1)
    except AssertionError as e:
        messages.append(str(e))
    else:
        raise Exception("assertEqual(None, 1) should have raised NotEqualError")

    # should not raise NotEqualError because None == None
    try:
        testing.assertEqual(None, None)
    except AssertionError as e:
        raise Exception("assertEqual(None, None) should not have raised NotEqual")

    return "\n".join(messages)

def _test_assert_not_equal():
    """Test assertNotEqual"""
    messages = []

    # should not raise NotEqualError because 1 != 2
    try:
        testing.assertNotEqual(1, 2)
    except AssertionError as e:
        raise Exception("assertNotEqual(1, 2) should not have raised NotEqualError")

    # should not raise NotEqualError because 1 != None
    try:
        testing.assertNotEqual(1, None)
    except AssertionError as e:
        raise Exception("assertNotEqual(1, None) should not have raised NotEqualError")

    # should not raise NotEqualError because None != 1
    try:
        testing.assertNotEqual(None, 1)
    except AssertionError as e:
        raise Exception("assertNotEqual(None, 1) should not have raised NotEqualError")

    # should raise NotEqualError because None == None
    try:
        testing.assertNotEqual(None, None)
    except AssertionError as e:
        messages.append(str(e))
    else:
        raise Exception("assertNotEqual(None, None) should have raised NotEqual")

    try:
        testing.assertNotEqual(1, 1)
    except AssertionError as e:
        messages.append(str(e))
    else:
        raise Exception("assertNotEqual(1, 1) should have raised NotEqual")

    return "\n".join(messages)
