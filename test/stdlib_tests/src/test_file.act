
import file
import logging
import testing

def _test_file_walk(report_result: action(?bool, ?Exception) -> None, env: Env, log_handler: logging.Handler) -> None:
    try:
        fc = file.FileCap(env.cap)
        fs = file.FS(fc)
        tmpdir = fs.mktmpdir()
        fs.mkdir(tmpdir + "/foo")
        fs.mkdir(tmpdir + "/foo2")
        rel_things = []
        for e in fs.walk(tmpdir):
            rel_things.append(e.name.split("/")[-1])
        testing.assertEqual(set(["foo", "foo2"]), set(rel_things))
        fs.rmtree(tmpdir)
        report_result(True, None)
    except AssertionError as exc:
        report_result(False, exc)
    except Exception as exc:
        report_result(None, exc)

def _test_fs_write_read_file(report_result: action(?bool, ?Exception) -> None, env: Env, log_handler: logging.Handler) -> None:
    try:
        fc = file.FileCap(env.cap)
        fs = file.FS(fc)
        tmpdir = fs.mktmpdir()
        filename = file.join_path([tmpdir, "test-file"])
        test_data = b"test-data\n"
        wf = file.WriteFile(file.WriteFileCap(fc), filename)
        await async wf.write(test_data)
        await async wf.close()

        rf = file.ReadFile(file.ReadFileCap(fc), filename)
        rd = rf.read()
        rf.close()
        testing.assertEqual(test_data, rd)
        await async fs.rmtree(tmpdir)
        report_result(True, None)
    except AssertionError as exc:
        report_result(False, exc)
    except Exception as exc:
        report_result(None, exc)
