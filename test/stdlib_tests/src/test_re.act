import testing

import re

def _test_basic():
    """Basic regexp matching
    """
    m = re.match("foo[a-z]+", "åbc123 foobar åbc123")
    testing.assertIsNotNone(m, "basic regexp matching failed")

def _test_group():
    """Regexp matching with groups
    """
    m = re.match("foo[a-z]+", "åbc123 foobar åbc123")
    testing.assertIsNotNone(m, "basic regexp matching failed")
    if m is not None:
        testing.assertEqual(m.group[0], "foobar", "match failed")

def _test_named_groups():
    """Regexp matching with named groups
    """
    m = re.match("(?P<mypattern>foo[a-z]+)", "åbc123 foobar åbc123")
    testing.assertIsNotNone(m, "regexp matching with named groups failed")
    if m is not None:
        testing.assertEqual(m.named["mypattern"], "foobar", "named group ('foobar') match failed")

def _test_multi_groups():
    """Regexp matching with multiple groups including named groups
    """
    m = re.match("([0-9]+).*(?P<mypattern>foo[a-z]+) *(?P<myotherpattern>bar[A-Za-z0-9]+)", "åbc123 foobar barEX4MPLE åbc123")
    testing.assertIsNotNone(m, "regexp matching with multiple groups failed")
    if m is not None:
        testing.assertEqual(m.group[0], "123 foobar barEX4MPLE", "failed to match")
        testing.assertEqual(m.group[1], "123", "failed to match group 1")
        testing.assertEqual(m.group[2], "foobar", "failed to match named group 'mypattern'")
        testing.assertEqual(m.group[3], "barEX4MPLE", "failed to match named group 'myotherpattern'")

def _test_matches():
    """Regexp finding all matches
    """
    ms = re.matches(r"foo[0-9]+", "åbc123 foo1 foo2 foo3 åbc123 foo4")
    testing.assertEqual(len(ms), 4, "failed to find all matches")
    testing.assertEqual(ms[0].group[0], "foo1", "failed to match first match")
    testing.assertEqual(ms[1].group[0], "foo2", "failed to match second match")
    testing.assertEqual(ms[2].group[0], "foo3", "failed to match third match")
    testing.assertEqual(ms[3].group[0], "foo4", "failed to match fourth match")
