import logging
import testing

actor MathTester():
    def add(a, b):
        return a + b


actor SyncActTester(log_handler):
    log = logging.Logger(log_handler)
    def test():
        m = MathTester()
        log.info("SyncActTester.test()")
        testing.assertEqual(m.add(1, 2), 3, "1 + 2 = 3")

actor SimpleSyncTester():
    def test():
        m = MathTester()
        print("SimpleSyncTester.test()")
        testing.assertEqual(m.add(1, 2), 3, "1 + 2 = 3")

actor SyncTester(t):
    log = logging.Logger(t.log_handler)
    def test():
        m = MathTester()
        log.info("SyncTester.test()")
        print("SyncTester.test()")
        testing.assertEqual(m.add(1, 2), 3, "1 + 2 = 3")

actor AsyncActTester(report_result, log_handler):
    log = logging.Logger(log_handler)
    def test():
        log.info("AsyncTester.test()")
        report_result(True, None)
    after 0: test()

actor AsyncTester(t):
    log = logging.Logger(t.log_handler)
    def test():
        log.info("AsyncTester.test()", {"data": "test"})
        t.success()
    after 0: test()

actor OldEnvTester(report_result, env, log_handler):
    log = logging.Logger(log_handler)
    def test():
        log.info("EnvTester.test()")
        report_result(True, None)
    after 0: test()

actor EnvTester(t):
    log = logging.Logger(t.log_handler)
    def test():
        log.info("EnvTester.test() wthreads:", {"nr_wthreads": t.env.nr_wthreads})
        print("EnvTester.test() wthreads:", t.env.nr_wthreads)
        t.success()
    after 0: test()

def _test_foo() -> None:
    pass

def _test_syncact(log_handler: logging.Handler) -> None:
    s = SyncActTester(log_handler)
    return s.test()

def _test_simple_sync() -> None:
    s = SimpleSyncTester()
    return s.test()

def _test_sync(t: testing.SyncT) -> None:
    s = SyncTester(t)
    return s.test()

def _test_asyncact(report_result, log_handler: logging.Handler) -> None:
    s = AsyncActTester(report_result, log_handler)

def _test_async(t: testing.AsyncT) -> None:
    s = AsyncTester(t)

def _test_oldenvtest(report_result, env: Env, log_handler: logging.Handler) -> None:
    s = OldEnvTester(report_result, env, log_handler)

def _test_envtest(t: testing.EnvT) -> None:
    s = EnvTester(t)
