import random
import testing

# choice()
def _test_choice_basic_functionality():
    lst = [1, 2, 3, 4, 5]
    for _ in range(1000):  # Repeat many times to ensure randomness
        testing.assertIn(random.choice(lst), lst, "random.choice() returned a value not in the list")

def _test_choice_empty_sequence():
    try:
        random.choice([])
        raise testing.NotRaisesError("random.choice() did not raise IndexError when passed an empty sequence")
    except ValueError:
        pass

def _test_choice_single_element():
    testing.assertEqual(42, random.choice([42]), "Expected the only element in the list")

def _test_choice_repeatability():
    lst = [1, 2, 3, 4, 5]
    results = set()
    for _ in range(1000):
        results.add(random.choice(lst))
    testing.assertTrue(bool(len(results) > 1), "Expected multiple unique results for repeated calls")

# sample()
def _test_sample_basic_functionality():
    """Test that random.sample() returns the correct number of elements and that
    all returned elements are in the original population.
    """
    population = list(range(0, 100, 10))
    k = 5
    sample = random.sample(population, k)
    testing.assertEqual(len(sample), k, "Sample size does not match k")
    for elem in sample:
        testing.assertIn(elem, population, "Sampled element not in the population")

def _test_sample_size_larger_than_population():
    """Test that random.sample() raises a ValueError when the sample size is
    larger than the population size.
    """
    try:
        random.sample([1, 2, 3], 5)
        testing.assertTrue(False, "Expected a ValueError for k > population size")
    except ValueError:
        pass

def _test_sample_with_single_element_population():
    """Test sampling from a population with a single element.
    """
    sample = random.sample([42], 1)
    testing.assertEqual(sample, [42], "Expected the only element in the population")

def _test_sample_repeatability() -> None:
    """Test that repeated calls to random.sample() produce different results.
    """
    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    sample_1 = random.sample(lst, 2)

    for _ in range(1000):
        sample_2 = random.sample(lst, 2)
        if sample_1 != sample_2:
            return None

    # If we reach this point, all samples were identical
    testing.assertTrue(False, "random.sample() appears to be producing identical results.")

def _test_sample_size_zero():
    """Test sampling with k=0, which should return an empty list.
    """
    sample = random.sample([1, 2, 3, 4, 5], 0)
    testing.assertEqual(sample, [], "Expected an empty list for k=0")


# randint()
def _test_random_distribution():
    """Test that random.randint() produces a somewhat uniform distribution.
    """
    low = 500
    high = 1000
    total = 10000
    num_range = high - low
    stats = {}
    for i in range(total):
        r = random.randint(low, high)
        if r not in stats:
            stats[r] = 0
        stats[r] += 1
    exp_count = total / num_range
    slack = 0.1
    exp_low = exp_count * (1-slack)
    exp_high = exp_count * (1+slack)
#    for n, v in stats.items():
#        if v < exp_low:
#            print("n", n, "with a count of", v, "is below expected value of", exp_low)
#        if v > exp_high:
#            print("n", n, "with a count of", v, "is above expected value of", exp_high)
        #if n > (expected_count * 1.1) or n < (expected_count * 0.9):
            #print("n", n, " outside of expected range (", (expected_count*0.9), "-", (expected_count*1.1), "):", stats[n])

def _test_random1():
    for i in range(1000):
        r = random.randint(0, 1234)
        testing.assertTrue(r >= 0 and r <= 1234, "random.randint() returned a value outside of the range")

def _test_random2():
    for i in range(1000):
        r = random.randint(1293862, 97309358)
        testing.assertTrue(r >= 1293862 and r <= 97309358, "random.randint() returned a value outside of the range")

def _test_randstr():
    a = random.randstr(8)
    testing.assertEqual(8, len(a))
    testing.assertNotEqual("", a)
