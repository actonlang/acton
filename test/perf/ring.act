import acton.rts
#
# The ring program sets up a ring of actors and injects a message which will
# cascade forever. After some time, provided through an argument, we will stop
# the program and count the number of messages sent.
#

actor Node(name):
    var next = None
    var counter = 0

    def set_next(arg):
        next = arg

    def get_count():
        return counter

    def ping():
        counter += 1
        if next is not None:
            next.ping()


actor main(env):
    if len(env.argv) != 3:
        print("Usage: ring NODES STOP")
        print("Starts the number of actors specified by NODES, connecting them")
        print("in a ring, then initiates the ring by injecting a message which")
        print("spins around forever. It stops when the first actor has")
        print("processed STOP number of messages.")
        exit(env.cap, 1)

    num_nodes = int(env.argv[1])
    stop_at = float(env.argv[2])

    nodes = []
    for i in range(0, num_nodes, 1):
        n = Node(i)
        nodes.append(n)
    for i in range(0, num_nodes-1, 1):
        nodes[i].set_next(nodes[i+1])
    nodes[-1].set_next(nodes[0])
    a = nodes[0].ping()

    def stop():
        count = 0
        for i in range(0, num_nodes, 1):
            c = nodes[i].get_count()
            print("Actor %d:" % i, c)
            count += c
        print("In total across all actors:", count)
        print("Total messages per second:", int(float(count)/stop_at))
        print("RSS:", acton.rts.rss(env.cap))
        exit(env.cap, 0)

    var alive = 0
    def report():
        print("RSS at second", alive, ":", acton.rts.rss(env.cap) / (1024*1024), "MB")
        alive += 1
        after 1: report()

    report()

    after stop_at: stop()
