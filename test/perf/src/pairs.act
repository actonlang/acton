import acton.rts
import time

"""Pairs
Sets up pairs of actors that ping each other.
"""

def print_rts_stats(cap: SysCap) -> None:
    for wtid, stats in acton.rts.rts_stats(cap).items():
        print("-- RTS stats wtid=%d" % int(wtid))
        #print("   state: %s" % stats.state)
        #print("   sleeps: %d" % int(stats.sleeps))
        print("   conts_count: %d" % int(stats.conts_count))
        #print("   conts_sum: %d" % int(stats.conts_sum));
        #print("     100ns     1us    10us     100us   1ms    10ms    100ms      1s    10s    100s     inf")
        #print("   %7d %7d %7d %7d %7d %7d %7d %7d %7d %7d %7d" % (int(stats.conts_100ns), int(stats.conts_1us), int(stats.conts_10us), int(stats.conts_100us), int(stats.conts_1ms), int(stats.conts_10ms), int(stats.conts_100ms), int(stats.conts_1s), int(stats.conts_10s), int(stats.conts_100s), int(stats.conts_inf)))
#        print("   Bookkeeping:")
#        print("   bkeep_count: %d" % int(stats.bkeep_count))
#        print("   bkeep_sum: %d" % int(stats.bkeep_sum));
#        print("    100ns    1us   10us   100us   1ms   10ms  100ms     1s    10s   100s    inf")
#        print("   %6d %6d %6d %6d %6d %6d %6d %6d %6d %6d %6d" % (int(stats.bkeep_100ns), int(stats.bkeep_1us), int(stats.bkeep_10us), int(stats.bkeep_100us), int(stats.bkeep_1ms), int(stats.bkeep_10ms), int(stats.bkeep_100ms), int(stats.bkeep_1s), int(stats.bkeep_10s), int(stats.bkeep_100s), int(stats.bkeep_inf)))


actor Node(name: str, _affinity: int):
    affinity = _affinity
#    print("Node %s starting with affinity %d" % (name, affinity))
    var partner = None
    var _stop = False
    var counter = 0
    var tokens = 500

    def set_affinity(wthread: int):
        NotImplemented

#    set_affinity(affinity)

    def get_count():
        return counter

    def set_partner(arg):
        partner = arg

    def ping():
        counter += 1
        tokens += 1
        if not _stop and tokens > 0 and partner is not None:
            for i in range(0, 1000, 1):
                if tokens == 0:
                    return
                tokens -= 1
                partner.ping()

    def stop():
        _stop = True


actor Pairs(wthreads, num_pairs):
    nodes = []
    var count = 0

    for i in range(0, num_pairs*2, 1):
        affinity = int(i // 2) % wthreads
        n = Node(str(i), affinity+1)
        nodes.append(n)

#    for i in range(0, num_pairs, 1):
#        affinity = i % wthreads
#        n1 = Node(str(i), affinity+1)
#        n2 = Node(str(i+1), affinity+1)
#        n1.set_partner(n2)
#        n2.set_partner(n1)
#        nodes.append(n1)
#        nodes.append(n2)


    for i in range(0, num_pairs*2, 2):
        nodes[i].set_partner(nodes[i+1])
        nodes[i+1].set_partner(nodes[i])
        nodes[i].ping()
        nodes[i+1].ping()

    def get_count():
        count = 0
        for i in range(0, num_pairs*2, 1):
            c = nodes[i].get_count()
            print("Actor %d:" % i, c)
            count += c
        return count

    def start():
#        print("Starting...")
        for i in range(0, num_pairs*2, 1):
            nodes[i].ping()

    def stop():
        for i in range(0, num_pairs*2, 1):
            nodes[i].stop()


actor main(env):
    if len(env.argv) != 3:
        print("Usage: pairs PAIRS DURATION")
        await async env.exit(1)

    num_pairs = int(env.argv[1])
    stop_in = float(env.argv[2])

#    print("Starting up with %d pairs across %d and running for %f second(s)" % (num_pairs, env.nr_wthreads, stop_in))
    pairs = Pairs(env.nr_wthreads, num_pairs)

    rts_monitor = acton.rts.Monitor(env)

    swatch = time.Stopwatch()
    def stop():
#        print("Stopping...")
        s = pairs.stop()

        conts_count = 0
        dur = swatch.elapsed()

        for wtid, stats in acton.rts.rts_stats(env.syscap).items():
            conts_count += stats.conts_count
        tps = int(float(conts_count)/dur.to_float())
        print(tps)
#        print("In total across all actors: %d  over %f seconds" % (int(conts_count), dur.to_float()))
#        print("Total messages per second:", tps)
        #print_rts_stats(env.syscap)
        env.exit(0)

    after stop_in: stop()
    def perio():
#        print("Periodic")
        after 1.0: perio()
    pairs.start()
