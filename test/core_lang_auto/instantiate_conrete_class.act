# Verify that it is possible to define an abstract class (Abstract!) that cannot
# be directly instantiated. It is the lack of __init__() that prevent it from
# being instantiated. A class, Concrete, inherit Abstract and define its own
# __init__() so that it can be instantiated!

class Abstract ():
    pass

# This should lead to compilation error
#def bad():
#    return Abstract()

class Concrete (Abstract):
    def __init__(self, x: Abstract):
        pass

# This should work
# (even though Concrete both inherits from Abstract and requires an Abstract parameter)
def fun(x: Abstract):
    return Concrete(x)

actor main(env):
    exit(env.cap, 0)
