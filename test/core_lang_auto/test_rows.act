
def test1(a, c):
    expect : (a: str, c: str) = (c=c, a=a)
    return expect

def test_row_type_1():
    out = test1('a', 'c').__str__()
    print(out)
    return out == "('a', 'c')"

def test2(c, a, kw: (b:str, **)):
    expect : (a: str, b: str, c: str, e: str) = (c=c, a=a, **kw)
    return expect

def test_row_type_2():
    out = test2('c', 'a', ('b', e='e')).__str__()
    print(out)
    return out == "('a', 'b', 'c', 'e')"

def test3(c, kw: (b: str, **)):
    expect : (c: str, **) = (c=c, **kw)
    return expect

def test_row_type_3():
    out = test3('c', ('b', x='x')).__str__()
    print(out)
    return out == "('c', ('b', ('x')))"

def test4(c, a, kw: (b: str, **)):
    expect : (a: str, b: str, c: str, **) = (c=c, a=a, **kw)
    return expect

def test_row_type_4():
    out = test4('c', 'a', ('b', e='e')).__str__()
    print(out)
    return out == "('a', 'b', 'c', ('e'))"

def test5(c, a, kw: (b: str, **)):
    expect : (a: str, b: str, c: str, e: str, **) = (c=c, a=a, **kw)
    return expect

def test_row_type_5():
    out = test5('c', 'a', ('b', e='e')).__str__()
    print(out)
    return out == "('a', 'b', 'c', 'e', ())"

def test6(c, a, **kw):
    expect : (a: str, b: str, c: str, e: str, **) = (c=c, a=a, **kw)
    return expect

def test_row_type_6():
    out = test6('c', 'a', e='e', b='b', f='f').__str__()
    print(out)
    return out == "('a', 'b', 'c', 'e', ('f'))"

def test7(c, a, d:str, **kw):
    expect : (a: str, b: str, c: str, e: str, **) = (c=c, a=a, d=d, **kw)
    return expect

def test_row_type_7():
    out = test7('c', 'a', 'd', b='b', e='e').__str__()
    print(out)
    return out == "('a', 'b', 'c', 'e', ('d', ()))"

def test8(c, a, **kw):
    expect : (a: str, c: str, **) = (c=c, a=a, **kw)
    return expect

def test_row_type_8():
    out = test8('c', 'a', e='e', b='b').__str__()
    print(out)
    return out == "('a', 'c', ('e', 'b'))"

def test9(c, a, d: str, **kw):
    expect : (a: str, c: str, **) = (c=c, a=a, d=d, **kw)
    return expect

def test_row_type_9():
    out = test9('c', 'a', 'd', b='b').__str__()
    print(out)
    return out == "('a', 'c', ('d', ('b')))"

def test10(c, a, d, **kw):
    def expect(a: str, c: str, **kw : (d: str, **)):
        return (a, c, kw)
    return expect(**(c=c, a=a, d=d, **kw))

def test_row_type_10():
    out = test10('c', 'a', 'd', b='b', e='e').__str__()
    print(out)
    return out == "('a', 'c', ('d', ('b', 'e')))"

def test11(c, a, **kw):
    def expect(a: str, c: str, **kw : (d: str, **)):
        return (a, c, kw)
    return expect(**(c=c, a=a, **kw))

def test_row_type_11():
    out = test11('c', 'a', d='d').__str__()
    print(out)
    return out == "('a', 'c', ('d', ()))"

def test12(c: str, a, d: str):
    expect : (a: str, **) = (c=c, a=a, d=d)
    return expect

def test_row_type_12():
    out = test12('c', 'a', 'd').__str__()
    print(out)
    return out == "('a', ('c', 'd'))"

def test13(c: str, a, d: str, **kw):
    expect : (a: str, **) = (c=c, a=a, d=d, **kw)
    return expect

def test_row_type_13():
    out = test13('c', 'a', 'd', b='b').__str__()
    print(out)
    return out == "('a', ('c', 'd', ('b')))"

def test14(x, *args):
    return args

def test_varargs_14():
    out = test14(None, 'a', 3.5)
    print(out)
    return out.0 == 'a' and out.1 == 3.5

def test15(x, **kwargs):
    return kwargs

def test_kwargs_15():
    out = test15(None, a='a', b=3.5)
    print(out)
    return out.a == 'a' and out.b == 3.5

def test16(x, *args, y, **kwargs):
    return (args, kwargs)

def test_varargs_kwargs_16():
    args, kwargs = test16(None, 18, '19', a='a', y=3, b=3.5)
    print("args:", args)
    print("kwargs:", kwargs)
    return args.0 == 18 and args.1 == '19' and kwargs.a == 'a' and kwargs.b == 3.5

tests = {
    "test_row_type_1": test_row_type_1,
    "test_row_type_2": test_row_type_2,
    "test_row_type_3": test_row_type_3,
    "test_row_type_4": test_row_type_4,
    "test_row_type_5": test_row_type_5,
    "test_row_type_6": test_row_type_6,
    "test_row_type_7": test_row_type_7,
    "test_row_type_8": test_row_type_8,
    "test_row_type_9": test_row_type_9,
    "test_row_type_10": test_row_type_10,
    "test_row_type_11": test_row_type_11,
    "test_row_type_12": test_row_type_12,
    "test_row_type_13": test_row_type_13,
    "test_varargs_14": test_varargs_14,
    "test_kwargs_15": test_kwargs_15,
    "test_varargs_kwargs_16": test_varargs_kwargs_16,
}

actor main(env):
    failed = []
    for name, t in tests.items():
        print("== test: " + name)
        if not t():
            print("-- FAILED test: " + name)
            failed.append(name)
        print()
    if len(failed) == 0:
        print("All {len(tests)} tests OK!")
    else:
        print("\n{len(failed)} of {len(tests)} tests failed:")
        for name in failed:
            print(" - {name}")
    env.exit(max([0, min([len(failed), 1])]))
