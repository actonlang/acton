#!/usr/bin/env runacton

import acton.rts
import random
import net
import process

# Tests that involve running an Acton program together with the database
# requires communication over localhost. By dynamically allocating ports we can
# run multiple tests concurrently. Each test invocation gets a "chunk" of ports,
# and can use the ports within its chunk freely. Port chunks are in the
# specified range (10000-30000). We deliberately stay below 32768 which is what
# Linux and many other OSes use for the lower end of ephemeral ports.
PORT_CHUNK_SIZE=20
PORT_CHUNK_MIN=10000
PORT_CHUNK_MAX=30000

# NOTE: the term signal for when an Acton RTS exits masks the termination
# signal, so when we terminate it with SIGTERM we'd normally expect to see
# termination signal 15 but instead we 0... so this is currently our expectation
# given how RTS works, but maybe that should be fixed...

actor Client(connect_cap, port: int):
    def on_connect(c):
        print("Client established connection")
        await async c.write(b"PING")

    def on_receive(c, data):
        print("Client RECV", data)
        if data == b"PONG":
            print("Got PONG, all good, yay")
        else:
            print("Got bad response, exiting with error..")

    def on_error(c, msg):
        print("Client ERR", msg)

    client = net.TCPConnection(connect_cap, "127.0.0.1", port, on_connect, on_receive, on_error)

    def write(data: bytes):
        client.write(data)


actor Tester(env, verbose, port_chunk):
    process_cap = process.ProcessCap(env.cap)
    var ps = []
    var psp: dict[int, str] = {}
    var combined_output = ""
    var p_alive = 0
    var error_encountered = False
    var tcp_client = None
    var tcp_expect = 0
    var state = 0
    var app_pid = None

    def log(msg: str) -> None:
        if verbose:
            print(msg)
        combined_output += "testOUT: " + msg + "\n"

    def error(msg: str):
        print("Encountered error:", msg)
        combined_output += "testERR: " + msg + "\n"
        error_encountered = True
        error_msg = msg
        stop(True, "error encountered")

    def report():
        if error_encountered:
            print("There was an error :/")
            print(combined_output)
            await async env.exit(1)
        else:
            print("Test success!")
            if verbose:
                print("Combined DB & App output:")
                print(combined_output)
            await async env.exit(0)

    def are_we_done():
        if p_alive > 0 :
            log("ps still alive.. %d remaining" % p_alive)
            return

        report()


    def log_process_output(p, prefix, data):
        paid = p.aid()
        for line in data.decode().splitlines(False):
            combined_output += psp[paid] + " " + prefix + ": " + line + "\n"

    def on_stderr(p, data):
        log_process_output(p, "ERR", data)

    def on_stdout(p, data):
        log_process_output(p, "OUT", data)

    def db_on_exit(p, exit_code, term_signal):
        log("DB Process exited with code: %d terminated with signal: %d" % (exit_code, term_signal))
        p_alive -= 1
        if not (exit_code == 0 and term_signal == 15):
            error("DB Process exited with code: %d terminated with signal: %d" % (exit_code, term_signal))
        are_we_done()


    def on_error(p, error):
        print("Error from process:", p, error)


    def stop(error: bool, msg: str):
        log("stopping everything, reason: " + msg)
        if error:
            error_encountered = True
        for p in ps:
            p.terminate()
        are_we_done()

    def dbc_start():
        for i in range(0, 3, 1):
            port = port_chunk + (2*i)
            cmd = ["../dist/bin/actondb", "-p", str(port), "-s", "127.0.0.1:" + str(port_chunk+1)]
            p = process.Process(process_cap, cmd, None, None, on_stdout, on_stderr, db_on_exit, on_error)
            p_alive += 1
            ps.append(p)
            paid = p.aid()
            psp[paid] = "db%d" % i

    def db_args(start_port, replication_factor) -> list[str]:
        #a = ["127.0.0.1:" for idx in range(0, replication_factor, 1)]
        args = ["--rts-ddb-replication", str(replication_factor)]
        for idx in range(0, replication_factor, 1):
            args.append("--rts-ddb-host")
            args.append("127.0.0.1:" + str(start_port + idx*2))
        return args


    def test_ddb_server():
        connect_cap = net.TCPConnectCap(net.TCPCap(net.NetCap(env.cap)))
        port = port_chunk+199
        cmd = ["./rts_db/ddb_test_server", str(port), "--rts-verbose"] + db_args(port_chunk, 3)
        p = None

        def tcpc_on_connect(c):
            if state == 1:
                state = 2
                await async c.write(b"GET")

            if state == 7:
                state = 8
                await async c.write(b"GET")

        def tcpc_on_receive(c, data):
            if state == 2:
                if int(data.decode()) == tcp_expect:
                    state = 3
                    tcp_expect += 1
                    c.write(b"INC")
                else:
                    error("Got unexpected data from server in state %d: %s" % (state, data.decode()))
            elif state == 3:
                if data == b"OK":
                    state = 4
                    c.write(b"GET")
                else:
                    error("Got unexpected data from server in state %d: %s" % (state, data.decode()))
            elif state == 4:
                if int(data.decode()) == tcp_expect:
                    state = 5
                    if p is not None:
                        log("YAY, got expected data, terminating server")
                        p.terminate()
                else:
                    error("Got unexpected data from server in state %d: %s" % (state, data.decode()))
            elif state == 8:
                if int(data.decode()) == tcp_expect:
                    log("YAY, got the right response after server restart, test success!!!!")
                    state = 9
                    if p is not None:
                        p.terminate()
                else:
                    error("Got unexpected data from server in state %d: %s" % (state, data.decode()))


        def tcpc_on_error(c, msg):
            error("Client ERR: %s" % (msg))

        def app_server_on_stdout(p, data):
            log_process_output(p, "OUT: state " + str(state), data)
            if state == 0:
                if data.find(b"NOW LISTENING", None, None) > -1:
                    log("Server app listening in state %d, starting TCP client" % state)
                    state = 1
                    tcp_client = net.TCPConnection(connect_cap, "127.0.0.1", port, tcpc_on_connect, tcpc_on_receive, tcpc_on_error)
                else:
                    log("In state " + str(state) + ", read unexpected output from server app:" + str(data))
            elif state == 6:
                if data.find(b"NOW LISTENING", None, None) > -1:
                    log("Server app listening in state %d, starting TCP client" % state)
                    state = 7
                    tcp_client = net.TCPConnection(connect_cap, "127.0.0.1", port, tcpc_on_connect, tcpc_on_receive, tcpc_on_error)
                else:
                    log("In state " + str(state) + ", read unexpected output from server app:" + str(data))

        log("Running server test")
        dbc_start()

        def app_server_on_exit(p, exit_code, term_signal):
            log("App exited in state %d with exit code %d and termination signal %d" % (state, exit_code, term_signal))
            p_alive -= 1
            paid = p.aid()
            for i in range(0, len(ps), 1):
                ps_aid = ps[i].aid()
                if ps_aid == paid:
                    del ps[i]
                    break
            if state == 5:
                if exit_code == 0 and term_signal == 0:
                    log("App successfully exited in state %d with exit code %d and termination signal %d" % (state, exit_code, term_signal))
                    state = 6
                    p = process.Process(process_cap, cmd, None, None, app_server_on_stdout, on_stderr, app_server_on_exit, on_error)
                    ps.append(p)
                    p_alive += 1
                    if p is not None:
                        paid = p.aid()
                        psp[paid] = "app"
                else:
                    error("App exited in state %d with an unexpected exit code %d and termination signal %d" % (state, exit_code, term_signal))
            elif state == 8:
                if exit_code == 0 and term_signal == 0:
                    log("App successfully exited in state %d with exit code %d and termination signal %d" % (state, exit_code, term_signal))
                else:
                    error("App exited in state %d with an unexpected exit code %d and termination signal %d" % (state, exit_code, term_signal))
            elif state == 9:
                if exit_code == 0 and term_signal == 0:
                    log("App successfully exited in state %d with exit code %d and termination signal %d" % (state, exit_code, term_signal))
                    stop(False, "success")
                else:
                    error("App exited in state %d with an unexpected exit code %d and termination signal %d" % (state, exit_code, term_signal))
            else:
                error("App unexpected exited in state %d with exit code %d and termination signal %d" % (state, exit_code, term_signal))
            are_we_done()


        # Start server
        p = process.Process(process_cap, cmd, None, None, app_server_on_stdout, on_stderr, app_server_on_exit, on_error)
        p_alive += 1
        if p is not None:
            app_pid = p.pid()
            if app_pid is not None:
                log("App started with PID: " + str(app_pid))
            else:
                error("App not running!?")
            ps.append(p)
            paid = p.aid()
            psp[paid] = "app"

        #

    test_ddb_server()

actor main(env):
    verbose = '--verbose' in set(env.argv)

    # compute random base port between PORT_CHUNK_MIN and PORT_CHUNK_MAX
    # in increments of PORT_CHUNK_SIZE
    port_chunk = random.randint(int(PORT_CHUNK_MIN/PORT_CHUNK_SIZE), int(PORT_CHUNK_MAX/PORT_CHUNK_SIZE)) * PORT_CHUNK_SIZE

    t = Tester(env, verbose, port_chunk)

    def test_timeout():
        print("Test timeout")
        await async t.error("Test failed - timeout reached")
        await async t.stop(True, "timeout")

    def unconditional_exit():
        print("Unconditional exit")
        await async t.error("Giving up...")
        await async t.report()
        await async env.exit(1)

    after 21: test_timeout()
    after 25: unconditional_exit()
