#!/usr/bin/env runacton

import acton.rts
import random
import net
import process

# Tests that involve running an Acton program together with the database
# requires communication over localhost. By dynamically allocating ports we can
# run multiple tests concurrently. Each test invocation gets a "chunk" of ports,
# and can use the ports within its chunk freely. Port chunks are in the
# specified range (10000-30000). We deliberately stay below 32768 which is what
# Linux and many other OSes use for the lower end of ephemeral ports.
PORT_CHUNK_SIZE=20
PORT_CHUNK_MIN=10000
PORT_CHUNK_MAX=30000

# NOTE: the term signal for when an Acton RTS exits masks the termination
# signal, so when we terminate it with SIGTERM we'd normally expect to see
# termination signal 15 but instead we 0... so this is currently our expectation
# given how RTS works, but maybe that should be fixed...


actor Tester(env, verbose, port_chunk):
    process_auth = process.ProcessAuth(env.auth)
    var ps = []
    var psp: dict[int, str] = {}
    var combined_output = ""
    var p_alive = 0
    var error_encountered = False
    var state = 0

    def log(msg: str) -> None:
        if verbose:
            print(msg)
        combined_output += "testOUT: " + msg + "\n"

    def error(msg: str):
        print("Encountered error:", msg)
        combined_output += "testERR: " + msg + "\n"
        error_encountered = True
        error_msg = msg
        stop(True)

    def report():
        if error_encountered:
            print("There was an error :/")
            print(combined_output)
            await async env.exit(1)
        else:
            print("Test success!")
            if verbose:
                print("Combined DB & App output:")
                print(combined_output)
            await async env.exit(0)

    def are_we_done():
        if p_alive > 0 :
            log("ps still alive.. %d remaining" % p_alive)
            return

        report()

    def log_process_output(p, prefix, data):
        paid = p.aid()
        for line in data.decode().splitlines(False):
            combined_output += psp[paid] + " " + prefix + ": " + line + "\n"

    def on_stderr(p, data):
        log_process_output(p, "ERR", data)

    def on_stdout(p, data):
        log_process_output(p, "OUT", data)


    def db_on_exit(p, exit_code, term_signal):
        log("DB Process exited with code: %d terminated with signal: %d" % (exit_code, term_signal))
        p_alive -= 1
        if not (exit_code == 0 and term_signal == 15):
            error("DB Process exited with code: %d terminated with signal: %d" % (exit_code, term_signal))
        are_we_done()

    def app_on_exit(p, exit_code, term_signal):
        log("App Process exited with code: %d terminated with signal: %d" % (exit_code, term_signal))
        p_alive -= 1
        if exit_code == 0 and term_signal == 0:
            log("App Process successfully exited with code: %d terminated with signal: %d" % (exit_code, term_signal))
            stop(False)
        else:
            error("App Process erroneously exited with code: %d terminated with signal: %d" % (exit_code, term_signal))
        are_we_done()

    def on_error(p, error):
        print("Error from process:", p, error)


    def stop(error: bool):
        log("stopping everything...")
        if error:
            error_encountered = True
        for p in ps:
            p.terminate()
        are_we_done()

    def dbc_start():
        for i in range(0, 3, 1):
            port = port_chunk + (2*i)
            cmd = ["../dist/bin/actondb", "-p", str(port)]
            p = process.Process(process_auth, cmd, None, None, on_stdout, on_stderr, db_on_exit, on_error)
            p_alive += 1
            ps.append(p)
            paid = p.aid()
            psp[paid] = "db%d" % i

    def db_args(start_port, replication_factor) -> list[str]:
        #a = ["127.0.0.1:" for idx in range(0, replication_factor, 1)]
        args = ["--rts-ddb-replication", str(replication_factor)]
        for idx in range(0, replication_factor, 1):
            args.append("--rts-ddb-host")
            args.append("127.0.0.1:" + str(start_port + idx*2))
        return args


    # Tests go here
    def test_ddb_app():
        dbc_start()
        cmd = ["rts_db/ddb_test_app", "--rts-verbose"] + db_args(port_chunk, 3)
        p = process.Process(process_auth, cmd, None, None, on_stdout, on_stderr, app_on_exit, on_error)
        p_alive += 1
        paid = p.aid()
        psp[paid] = "app"

    test_ddb_app()

actor main(env):
    verbose = '--verbose' in set(env.argv)

    # compute random base port between PORT_CHUNK_MIN and PORT_CHUNK_MAX
    # in increments of PORT_CHUNK_SIZE
    port_chunk = random.randint(int(PORT_CHUNK_MIN/PORT_CHUNK_SIZE), int(PORT_CHUNK_MAX/PORT_CHUNK_SIZE)) * PORT_CHUNK_SIZE

    t = Tester(env, verbose, port_chunk)

    def test_timeout():
        t.error("Test failed - timeout reached")
        await async t.stop(True)

    def unconditional_exit():
        t.error("Giving up...")
        t.report()
        await async env.exit(1)

    after 2: test_timeout()
    after 4: unconditional_exit()
