import net

actor Tester(env, port):
    var _lsock = None
    var i = 0

    def _on_listen(l, error):
        if error is not None:
            print("Error with our listening socket on port" + str(port) + ": " + error)
            if error == "resume":
                pass
            else:
                print("Unhandled error:", error)
            print("Attempting to re-establish listening socket")
            _lsock = _init_listen()

    def _on_server_accept(c):
        c.cb_install(_on_server_receive, _on_server_error)

    def _on_server_receive(c, data):
        print("RECV", c, data.decode())
        if data == b"GET":
            response = str(i).encode()
            print("RECV", c, data.decode(), "RESPONSE:", response)
            c.write(str(i).encode())
        if data == b"INC":
            i += 1
            print("RECV", c, data.decode(), "RESPONSE:", b"OK")
            c.write(b"OK")

    def _on_server_error(c, error):
        print("There was an error:", error, " from:", c)

    def _init_listen():
        listen_cap = net.TCPListenCap(net.TCPCap(net.NetCap(env.cap)))
        print("Starting to listen...")
        s = net.TCPListener(listen_cap, "0.0.0.0", port, _on_listen, _on_server_accept)
        print("NOW LISTENING ON", str(port))

        return s

    _lsock = _init_listen()


actor main(env):
    port = int(env.argv[1])
    var t = None
    t = Tester(env, port)
