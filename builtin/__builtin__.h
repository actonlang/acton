/*
Building project in /Users/sydow/acton/builtin/ty
  Compiling __builtin__.act for release in stub mode
#pragma once
#include "builtin/builtin.h"
#include "builtin/env.h"
#include "rts/rts.h"
*/
struct B_value;
struct B_object;
struct B_atom;
struct B_int;
struct B_i64;
struct B_i32;
struct B_i16;
struct B_u64;
struct B_u32;
struct B_u16;
struct B_float;
struct B_bool;
struct B_slice;
struct B_list;
struct B_range;
struct B_Iterator;
struct B_Iterable;
struct B_str;
struct B_bytes;
struct B_bytearray;
struct B_Msg;
struct B_BaseException;
struct B_SystemExit;
struct B_KeyboardInterrupt;
struct B_Exception;
struct B_AssertionError;
struct B_LookupError;
struct B_IndexError;
struct B_KeyError;
struct B_MemoryError;
struct B_OSError;
struct B_RuntimeError;
struct B_NotImplementedError;
struct B_ValueError;
struct B_Identity;
struct B_Eq;
struct B_Ord;
struct B_Logical;
struct B_Plus;
struct B_Minus;
struct B_Times;
struct B_Div;
struct B_Hashable;
struct B_complex;
struct B_dict;
struct B_set;
struct B_Number;
struct B_MinusD_Number;
struct B_Real;
struct B_MinusD_Real;
struct B_RealFloat;
struct B_MinusD_RealFloat;
struct B_Rational;
struct B_MinusD_Rational;
struct B_Integral;
struct B_MinusD_Integral;
struct B_LogicalD_Integral;
struct B_HashableD_bool;
struct B_IntegralD_int;
struct B_MinusD_IntegralD_int;
struct B_LogicalD_IntegralD_int;
struct B_DivD_int;
struct B_OrdD_int;
struct B_HashableD_int;
struct B_IntegralD_i64;
struct B_MinusD_IntegralD_i64;
struct B_LogicalD_IntegralD_i64;
struct B_DivD_i64;
struct B_OrdD_i64;
struct B_HashableD_i64;
struct B_IntegralD_i32;
struct B_MinusD_IntegralD_i32;
struct B_LogicalD_IntegralD_i32;
struct B_DivD_i32;
struct B_OrdD_i32;
struct B_HashableD_i32;
struct B_IntegralD_i16;
struct B_MinusD_IntegralD_i16;
struct B_LogicalD_IntegralD_i16;
struct B_DivD_i16;
struct B_OrdD_i16;
struct B_HashableD_i16;
struct B_IntegralD_u64;
struct B_MinusD_IntegralD_u64;
struct B_LogicalD_IntegralD_u64;
struct B_DivD_u64;
struct B_OrdD_u64;
struct B_HashableD_u64;
struct B_IntegralD_u32;
struct B_MinusD_IntegralD_u32;
struct B_LogicalD_IntegralD_u32;
struct B_DivD_u32;
struct B_OrdD_u32;
struct B_HashableD_u32;
struct B_IntegralD_u16;
struct B_MinusD_IntegralD_u16;
struct B_LogicalD_IntegralD_u16;
struct B_DivD_u16;
struct B_OrdD_u16;
struct B_HashableD_u16;
struct B_RealFloatD_float;
struct B_MinusD_RealFloatD_float;
struct B_DivD_float;
struct B_OrdD_float;
struct B_HashableD_float;
struct B_NumberD_complex;
struct B_MinusD_NumberD_complex;
struct B_DivD_complex;
struct B_EqD_complex;
struct B_HashableD_complex;
struct B_Indexed;
struct B_Sliceable;
struct B_Collection;
struct B_Container;
struct B_Sequence;
struct B_CollectionD_Sequence;
struct B_TimesD_Sequence;
struct B_Mapping;
struct B_IndexedD_Mapping;
struct B_Set;
struct B_OrdD_Set;
struct B_LogicalD_Set;
struct B_MinusD_Set;
struct B_SequenceD_list;
struct B_CollectionD_SequenceD_list;
struct B_TimesD_SequenceD_list;
struct B_ContainerD_list;
struct B_OrdD_list;
struct B_MappingD_dict;
struct B_IndexedD_MappingD_dict;
struct B_OrdD_dict;
struct B_SetD_set;
struct B_OrdD_SetD_set;
struct B_LogicalD_SetD_set;
struct B_MinusD_SetD_set;
struct B_IterableD_Iterator;
struct B_IterableD_range;
struct B_OrdD_str;
struct B_ContainerD_str;
struct B_SliceableD_str;
struct B_TimesD_str;
struct B_HashableD_str;
struct B_OrdD_bytearray;
struct B_SequenceD_bytearray;
struct B_CollectionD_SequenceD_bytearray;
struct B_TimesD_SequenceD_bytearray;
struct B_ContainerD_bytearray;
struct B_OrdD_bytes;
struct B_SliceableD_bytes;
struct B_ContainerD_bytes;
struct B_TimesD_bytes;
struct B_HashableD_bytes;
typedef struct B_value *B_value;
typedef struct B_object *B_object;
typedef struct B_atom *B_atom;
typedef struct B_int *B_int;
typedef struct B_i64 *B_i64;
typedef struct B_i32 *B_i32;
typedef struct B_i16 *B_i16;
typedef struct B_u64 *B_u64;
typedef struct B_u32 *B_u32;
typedef struct B_u16 *B_u16;
typedef struct B_float *B_float;
typedef struct B_bool *B_bool;
typedef struct B_slice *B_slice;
typedef struct B_list *B_list;
typedef struct B_range *B_range;
typedef struct B_Iterator *B_Iterator;
typedef struct B_Iterable *B_Iterable;
typedef struct B_str *B_str;
typedef struct B_bytes *B_bytes;
typedef struct B_bytearray *B_bytearray;
typedef struct B_Msg *B_Msg;
typedef struct B_BaseException *B_BaseException;
typedef struct B_SystemExit *B_SystemExit;
typedef struct B_KeyboardInterrupt *B_KeyboardInterrupt;
typedef struct B_Exception *B_Exception;
typedef struct B_AssertionError *B_AssertionError;
typedef struct B_LookupError *B_LookupError;
typedef struct B_IndexError *B_IndexError;
typedef struct B_KeyError *B_KeyError;
typedef struct B_MemoryError *B_MemoryError;
typedef struct B_OSError *B_OSError;
typedef struct B_RuntimeError *B_RuntimeError;
typedef struct B_NotImplementedError *B_NotImplementedError;
typedef struct B_ValueError *B_ValueError;
typedef struct B_Identity *B_Identity;
typedef struct B_Eq *B_Eq;
typedef struct B_Ord *B_Ord;
typedef struct B_Logical *B_Logical;
typedef struct B_Plus *B_Plus;
typedef struct B_Minus *B_Minus;
typedef struct B_Times *B_Times;
typedef struct B_Div *B_Div;
typedef struct B_Hashable *B_Hashable;
typedef struct B_complex *B_complex;
typedef struct B_dict *B_dict;
typedef struct B_set *B_set;
typedef struct B_Number *B_Number;
typedef struct B_MinusD_Number *B_MinusD_Number;
typedef struct B_Real *B_Real;
typedef struct B_MinusD_Real *B_MinusD_Real;
typedef struct B_RealFloat *B_RealFloat;
typedef struct B_MinusD_RealFloat *B_MinusD_RealFloat;
typedef struct B_Rational *B_Rational;
typedef struct B_MinusD_Rational *B_MinusD_Rational;
typedef struct B_Integral *B_Integral;
typedef struct B_MinusD_Integral *B_MinusD_Integral;
typedef struct B_LogicalD_Integral *B_LogicalD_Integral;
typedef struct B_HashableD_bool *B_HashableD_bool;
typedef struct B_IntegralD_int *B_IntegralD_int;
typedef struct B_MinusD_IntegralD_int *B_MinusD_IntegralD_int;
typedef struct B_LogicalD_IntegralD_int *B_LogicalD_IntegralD_int;
typedef struct B_DivD_int *B_DivD_int;
typedef struct B_OrdD_int *B_OrdD_int;
typedef struct B_HashableD_int *B_HashableD_int;
typedef struct B_IntegralD_i64 *B_IntegralD_i64;
typedef struct B_MinusD_IntegralD_i64 *B_MinusD_IntegralD_i64;
typedef struct B_LogicalD_IntegralD_i64 *B_LogicalD_IntegralD_i64;
typedef struct B_DivD_i64 *B_DivD_i64;
typedef struct B_OrdD_i64 *B_OrdD_i64;
typedef struct B_HashableD_i64 *B_HashableD_i64;
typedef struct B_IntegralD_i32 *B_IntegralD_i32;
typedef struct B_MinusD_IntegralD_i32 *B_MinusD_IntegralD_i32;
typedef struct B_LogicalD_IntegralD_i32 *B_LogicalD_IntegralD_i32;
typedef struct B_DivD_i32 *B_DivD_i32;
typedef struct B_OrdD_i32 *B_OrdD_i32;
typedef struct B_HashableD_i32 *B_HashableD_i32;
typedef struct B_IntegralD_i16 *B_IntegralD_i16;
typedef struct B_MinusD_IntegralD_i16 *B_MinusD_IntegralD_i16;
typedef struct B_LogicalD_IntegralD_i16 *B_LogicalD_IntegralD_i16;
typedef struct B_DivD_i16 *B_DivD_i16;
typedef struct B_OrdD_i16 *B_OrdD_i16;
typedef struct B_HashableD_i16 *B_HashableD_i16;
typedef struct B_IntegralD_u64 *B_IntegralD_u64;
typedef struct B_MinusD_IntegralD_u64 *B_MinusD_IntegralD_u64;
typedef struct B_LogicalD_IntegralD_u64 *B_LogicalD_IntegralD_u64;
typedef struct B_DivD_u64 *B_DivD_u64;
typedef struct B_OrdD_u64 *B_OrdD_u64;
typedef struct B_HashableD_u64 *B_HashableD_u64;
typedef struct B_IntegralD_u32 *B_IntegralD_u32;
typedef struct B_MinusD_IntegralD_u32 *B_MinusD_IntegralD_u32;
typedef struct B_LogicalD_IntegralD_u32 *B_LogicalD_IntegralD_u32;
typedef struct B_DivD_u32 *B_DivD_u32;
typedef struct B_OrdD_u32 *B_OrdD_u32;
typedef struct B_HashableD_u32 *B_HashableD_u32;
typedef struct B_IntegralD_u16 *B_IntegralD_u16;
typedef struct B_MinusD_IntegralD_u16 *B_MinusD_IntegralD_u16;
typedef struct B_LogicalD_IntegralD_u16 *B_LogicalD_IntegralD_u16;
typedef struct B_DivD_u16 *B_DivD_u16;
typedef struct B_OrdD_u16 *B_OrdD_u16;
typedef struct B_HashableD_u16 *B_HashableD_u16;
typedef struct B_RealFloatD_float *B_RealFloatD_float;
typedef struct B_MinusD_RealFloatD_float *B_MinusD_RealFloatD_float;
typedef struct B_DivD_float *B_DivD_float;
typedef struct B_OrdD_float *B_OrdD_float;
typedef struct B_HashableD_float *B_HashableD_float;
typedef struct B_NumberD_complex *B_NumberD_complex;
typedef struct B_MinusD_NumberD_complex *B_MinusD_NumberD_complex;
typedef struct B_DivD_complex *B_DivD_complex;
typedef struct B_EqD_complex *B_EqD_complex;
typedef struct B_HashableD_complex *B_HashableD_complex;
typedef struct B_Indexed *B_Indexed;
typedef struct B_Sliceable *B_Sliceable;
typedef struct B_Collection *B_Collection;
typedef struct B_Container *B_Container;
typedef struct B_Sequence *B_Sequence;
typedef struct B_CollectionD_Sequence *B_CollectionD_Sequence;
typedef struct B_TimesD_Sequence *B_TimesD_Sequence;
typedef struct B_Mapping *B_Mapping;
typedef struct B_IndexedD_Mapping *B_IndexedD_Mapping;
typedef struct B_Set *B_Set;
typedef struct B_OrdD_Set *B_OrdD_Set;
typedef struct B_LogicalD_Set *B_LogicalD_Set;
typedef struct B_MinusD_Set *B_MinusD_Set;
typedef struct B_SequenceD_list *B_SequenceD_list;
typedef struct B_CollectionD_SequenceD_list *B_CollectionD_SequenceD_list;
typedef struct B_TimesD_SequenceD_list *B_TimesD_SequenceD_list;
typedef struct B_ContainerD_list *B_ContainerD_list;
typedef struct B_OrdD_list *B_OrdD_list;
typedef struct B_MappingD_dict *B_MappingD_dict;
typedef struct B_IndexedD_MappingD_dict *B_IndexedD_MappingD_dict;
typedef struct B_OrdD_dict *B_OrdD_dict;
typedef struct B_SetD_set *B_SetD_set;
typedef struct B_OrdD_SetD_set *B_OrdD_SetD_set;
typedef struct B_LogicalD_SetD_set *B_LogicalD_SetD_set;
typedef struct B_MinusD_SetD_set *B_MinusD_SetD_set;
typedef struct B_IterableD_Iterator *B_IterableD_Iterator;
typedef struct B_IterableD_range *B_IterableD_range;
typedef struct B_OrdD_str *B_OrdD_str;
typedef struct B_ContainerD_str *B_ContainerD_str;
typedef struct B_SliceableD_str *B_SliceableD_str;
typedef struct B_TimesD_str *B_TimesD_str;
typedef struct B_HashableD_str *B_HashableD_str;
typedef struct B_OrdD_bytearray *B_OrdD_bytearray;
typedef struct B_SequenceD_bytearray *B_SequenceD_bytearray;
typedef struct B_CollectionD_SequenceD_bytearray *B_CollectionD_SequenceD_bytearray;
typedef struct B_TimesD_SequenceD_bytearray *B_TimesD_SequenceD_bytearray;
typedef struct B_ContainerD_bytearray *B_ContainerD_bytearray;
typedef struct B_OrdD_bytes *B_OrdD_bytes;
typedef struct B_SliceableD_bytes *B_SliceableD_bytes;
typedef struct B_ContainerD_bytes *B_ContainerD_bytes;
typedef struct B_TimesD_bytes *B_TimesD_bytes;
typedef struct B_HashableD_bytes *B_HashableD_bytes;
struct B_valueG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_value);
    void (*__serialize__) (B_value, $Serial$state);
    B_value (*__deserialize__) (B_value, $Serial$state);
    B_bool (*__bool__) (B_value);
    B_str (*__str__) (B_value);
    B_str (*__repr__) (B_value);
};
struct B_value {
    struct B_valueG_class *$class;
};
struct B_objectG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_object);
    void (*__serialize__) (B_object, $Serial$state);
    B_object (*__deserialize__) (B_object, $Serial$state);
    B_bool (*__bool__) (B_object);
    B_str (*__str__) (B_object);
    B_str (*__repr__) (B_object);
};
struct B_object {
    struct B_objectG_class *$class;
};
struct B_atomG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_atom);
    void (*__serialize__) (B_atom, $Serial$state);
    B_atom (*__deserialize__) (B_atom, $Serial$state);
    B_bool (*__bool__) (B_atom);
    B_str (*__str__) (B_atom);
    B_str (*__repr__) (B_atom);
};
struct B_atom {
    struct B_atomG_class *$class;
};
struct B_intG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_int, B_atom);
    void (*__serialize__) (B_int, $Serial$state);
    B_int (*__deserialize__) (B_int, $Serial$state);
    B_bool (*__bool__) (B_int);
    B_str (*__str__) (B_int);
    B_str (*__repr__) (B_int);
};
struct B_i64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_i64, B_atom);
    void (*__serialize__) (B_i64, $Serial$state);
    B_i64 (*__deserialize__) (B_i64, $Serial$state);
    B_bool (*__bool__) (B_i64);
    B_str (*__str__) (B_i64);
    B_str (*__repr__) (B_i64);
};
struct B_i32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_i32, B_atom);
    void (*__serialize__) (B_i32, $Serial$state);
    B_i32 (*__deserialize__) (B_i32, $Serial$state);
    B_bool (*__bool__) (B_i32);
    B_str (*__str__) (B_i32);
    B_str (*__repr__) (B_i32);
};
struct B_i16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_i16, B_atom);
    void (*__serialize__) (B_i16, $Serial$state);
    B_i16 (*__deserialize__) (B_i16, $Serial$state);
    B_bool (*__bool__) (B_i16);
    B_str (*__str__) (B_i16);
    B_str (*__repr__) (B_i16);
};
struct B_u64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_u64, B_atom);
    void (*__serialize__) (B_u64, $Serial$state);
    B_u64 (*__deserialize__) (B_u64, $Serial$state);
    B_bool (*__bool__) (B_u64);
    B_str (*__str__) (B_u64);
    B_str (*__repr__) (B_u64);
};
struct B_u32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_u32, B_atom);
    void (*__serialize__) (B_u32, $Serial$state);
    B_u32 (*__deserialize__) (B_u32, $Serial$state);
    B_bool (*__bool__) (B_u32);
    B_str (*__str__) (B_u32);
    B_str (*__repr__) (B_u32);
};
struct B_u16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_u16, B_atom);
    void (*__serialize__) (B_u16, $Serial$state);
    B_u16 (*__deserialize__) (B_u16, $Serial$state);
    B_bool (*__bool__) (B_u16);
    B_str (*__str__) (B_u16);
    B_str (*__repr__) (B_u16);
};
struct B_floatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_float, B_atom);
    void (*__serialize__) (B_float, $Serial$state);
    B_float (*__deserialize__) (B_float, $Serial$state);
    B_bool (*__bool__) (B_float);
    B_str (*__str__) (B_float);
    B_str (*__repr__) (B_float);
};
struct B_boolG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_bool, B_value);
    void (*__serialize__) (B_bool, $Serial$state);
    B_bool (*__deserialize__) (B_bool, $Serial$state);
    B_bool (*__bool__) (B_bool);
    B_str (*__str__) (B_bool);
    B_str (*__repr__) (B_bool);
};
struct B_sliceG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_slice, B_int, B_int, B_int);
    void (*__serialize__) (B_slice, $Serial$state);
    B_slice (*__deserialize__) (B_slice, $Serial$state);
    B_bool (*__bool__) (B_slice);
    B_str (*__str__) (B_slice);
    B_str (*__repr__) (B_slice);
};
struct B_listG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_list, B_Iterable, $WORD);
    void (*__serialize__) (B_list, $Serial$state);
    B_list (*__deserialize__) (B_list, $Serial$state);
    B_bool (*__bool__) (B_list);
    B_str (*__str__) (B_list);
    B_str (*__repr__) (B_list);
    B_NoneType (*clear) (B_list);
    B_list (*copy) (B_list);
    B_NoneType (*extend) (B_list, B_list);
    $WORD (*pop) (B_list, B_int);
};
struct B_rangeG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_range, B_int, B_int, B_int);
    void (*__serialize__) (B_range, $Serial$state);
    B_range (*__deserialize__) (B_range, $Serial$state);
    B_bool (*__bool__) (B_range);
    B_str (*__str__) (B_range);
    B_str (*__repr__) (B_range);
};
struct B_IteratorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Iterator);
    void (*__serialize__) (B_Iterator, $Serial$state);
    B_Iterator (*__deserialize__) (B_Iterator, $Serial$state);
    B_bool (*__bool__) (B_Iterator);
    B_str (*__str__) (B_Iterator);
    B_str (*__repr__) (B_Iterator);
    $WORD (*__next__) (B_Iterator);
};
struct B_Iterator {
    struct B_IteratorG_class *$class;
};
struct B_IterableG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Iterable);
    void (*__serialize__) (B_Iterable, $Serial$state);
    B_Iterable (*__deserialize__) (B_Iterable, $Serial$state);
    B_bool (*__bool__) (B_Iterable);
    B_str (*__str__) (B_Iterable);
    B_str (*__repr__) (B_Iterable);
    B_Iterator (*__iter__) (B_Iterable, $WORD);
};
struct B_Iterable {
    struct B_IterableG_class *$class;
};
struct B_strG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_str, B_value);
    void (*__serialize__) (B_str, $Serial$state);
    B_str (*__deserialize__) (B_str, $Serial$state);
    B_bool (*__bool__) (B_str);
    B_str (*__str__) (B_str);
    B_str (*__repr__) (B_str);
    B_str (*capitalize) (B_str);
    B_str (*center) (B_str, B_int, B_str);
    B_int (*count) (B_str, B_str, B_int, B_int);
    B_bytes (*encode) (B_str);
    B_bool (*endswith) (B_str, B_str, B_int, B_int);
    B_str (*expandtabs) (B_str, B_int);
    B_int (*find) (B_str, B_str, B_int, B_int);
    B_int (*index) (B_str, B_str, B_int, B_int);
    B_bool (*isalnum) (B_str);
    B_bool (*isalpha) (B_str);
    B_bool (*isascii) (B_str);
    B_bool (*isdecimal) (B_str);
    B_bool (*islower) (B_str);
    B_bool (*isprintable) (B_str);
    B_bool (*isspace) (B_str);
    B_bool (*istitle) (B_str);
    B_bool (*isupper) (B_str);
    B_str (*join) (B_str, B_Iterable, $WORD);
    B_str (*ljust) (B_str, B_int, B_str);
    B_str (*lower) (B_str);
    B_str (*lstrip) (B_str, B_str);
    B_tuple (*partition) (B_str, B_str);
    B_str (*replace) (B_str, B_str, B_str, B_int);
    B_int (*rfind) (B_str, B_str, B_int, B_int);
    B_int (*rindex) (B_str, B_str, B_int, B_int);
    B_str (*rjust) (B_str, B_int, B_str);
    B_tuple (*rpartition) (B_str, B_str);
    B_str (*rstrip) (B_str, B_str);
    B_list (*split) (B_str, B_str, B_int);
    B_list (*splitlines) (B_str, B_bool);
    B_bool (*startswith) (B_str, B_str, B_int, B_int);
    B_str (*strip) (B_str, B_str);
    B_str (*upper) (B_str);
    B_str (*zfill) (B_str, B_int);
};
struct B_bytesG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_bytes, B_Iterable, $WORD);
    void (*__serialize__) (B_bytes, $Serial$state);
    B_bytes (*__deserialize__) (B_bytes, $Serial$state);
    B_bool (*__bool__) (B_bytes);
    B_str (*__str__) (B_bytes);
    B_str (*__repr__) (B_bytes);
    B_bytes (*capitalize) (B_bytes);
    B_bytes (*center) (B_bytes, B_int, B_bytes);
    B_int (*count) (B_bytes, B_bytes, B_int, B_int);
    B_str (*decode) (B_bytes);
    B_bool (*endswith) (B_bytes, B_bytes, B_int, B_int);
    B_bytes (*expandtabs) (B_bytes, B_int);
    B_int (*find) (B_bytes, B_bytes, B_int, B_int);
    B_int (*index) (B_bytes, B_bytes, B_int, B_int);
    B_bool (*isalnum) (B_bytes);
    B_bool (*isalpha) (B_bytes);
    B_bool (*isascii) (B_bytes);
    B_bool (*isdigit) (B_bytes);
    B_bool (*islower) (B_bytes);
    B_bool (*isspace) (B_bytes);
    B_bool (*istitle) (B_bytes);
    B_bool (*isupper) (B_bytes);
    B_bytes (*join) (B_bytes, B_Iterable, $WORD);
    B_bytes (*ljust) (B_bytes, B_int, B_bytes);
    B_bytes (*lower) (B_bytes);
    B_bytes (*lstrip) (B_bytes, B_bytes);
    B_tuple (*partition) (B_bytes, B_bytes);
    B_bytes (*replace) (B_bytes, B_bytes, B_bytes, B_int);
    B_int (*rfind) (B_bytes, B_bytes, B_int, B_int);
    B_int (*rindex) (B_bytes, B_bytes, B_int, B_int);
    B_bytes (*rjust) (B_bytes, B_int, B_bytes);
    B_tuple (*rpartition) (B_bytes, B_bytes);
    B_bytes (*rstrip) (B_bytes, B_bytes);
    B_list (*split) (B_bytes, B_bytes, B_int);
    B_list (*splitlines) (B_bytes, B_bool);
    B_bool (*startswith) (B_bytes, B_bytes, B_int, B_int);
    B_bytes (*strip) (B_bytes, B_bytes);
    B_bytes (*upper) (B_bytes);
    B_bytes (*zfill) (B_bytes, B_int);
};
struct B_bytearrayG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_bytearray, B_bytes);
    void (*__serialize__) (B_bytearray, $Serial$state);
    B_bytearray (*__deserialize__) (B_bytearray, $Serial$state);
    B_bool (*__bool__) (B_bytearray);
    B_str (*__str__) (B_bytearray);
    B_str (*__repr__) (B_bytearray);
    B_bytearray (*capitalize) (B_bytearray);
    B_bytearray (*center) (B_bytearray, B_int, B_bytearray);
    B_int (*count) (B_bytearray, B_bytearray, B_int, B_int);
    B_str (*decode) (B_bytearray);
    B_bool (*endswith) (B_bytearray, B_bytearray, B_int, B_int);
    B_bytearray (*expandtabs) (B_bytearray, B_int);
    B_int (*find) (B_bytearray, B_bytearray, B_int, B_int);
    B_int (*index) (B_bytearray, B_bytearray, B_int, B_int);
    B_bool (*isalnum) (B_bytearray);
    B_bool (*isalpha) (B_bytearray);
    B_bool (*isascii) (B_bytearray);
    B_bool (*isdigit) (B_bytearray);
    B_bool (*islower) (B_bytearray);
    B_bool (*isspace) (B_bytearray);
    B_bool (*istitle) (B_bytearray);
    B_bool (*isupper) (B_bytearray);
    B_bytearray (*join) (B_bytearray, B_Iterable, $WORD);
    B_bytearray (*ljust) (B_bytearray, B_int, B_bytearray);
    B_bytearray (*lower) (B_bytearray);
    B_bytearray (*lstrip) (B_bytearray, B_bytearray);
    B_tuple (*partition) (B_bytearray, B_bytearray);
    B_bytearray (*replace) (B_bytearray, B_bytearray, B_bytearray, B_int);
    B_int (*rfind) (B_bytearray, B_bytearray, B_int, B_int);
    B_int (*rindex) (B_bytearray, B_bytearray, B_int, B_int);
    B_bytearray (*rjust) (B_bytearray, B_int, B_bytearray);
    B_tuple (*rpartition) (B_bytearray, B_bytearray);
    B_bytearray (*rstrip) (B_bytearray, B_bytearray);
    B_list (*split) (B_bytearray, B_bytearray, B_int);
    B_list (*splitlines) (B_bytearray, B_bool);
    B_bool (*startswith) (B_bytearray, B_bytearray, B_int, B_int);
    B_bytearray (*strip) (B_bytearray, B_bytearray);
    B_bytearray (*upper) (B_bytearray);
    B_bytearray (*zfill) (B_bytearray, B_int);
};
struct B_MsgG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Msg);
    void (*__serialize__) (B_Msg, $Serial$state);
    B_Msg (*__deserialize__) (B_Msg, $Serial$state);
    B_bool (*__bool__) (B_Msg);
    B_str (*__str__) (B_Msg);
    B_str (*__repr__) (B_Msg);
};
/*
struct B_Msg {
    struct B_MsgG_class *$class;
};
*/
struct B_BaseExceptionG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_BaseException, B_str);
    void (*__serialize__) (B_BaseException, $Serial$state);
    B_BaseException (*__deserialize__) (B_BaseException, $Serial$state);
    B_bool (*__bool__) (B_BaseException);
    B_str (*__str__) (B_BaseException);
    B_str (*__repr__) (B_BaseException);
};
struct B_BaseException {
    struct B_BaseExceptionG_class *$class;
    B_str error_message;
};
struct B_SystemExitG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_SystemExit, B_str);
    void (*__serialize__) (B_SystemExit, $Serial$state);
    B_SystemExit (*__deserialize__) (B_SystemExit, $Serial$state);
    B_bool (*__bool__) (B_SystemExit);
    B_str (*__str__) (B_SystemExit);
    B_str (*__repr__) (B_SystemExit);
};
struct B_SystemExit {
    struct B_SystemExitG_class *$class;
    B_str error_message;
};
struct B_KeyboardInterruptG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_KeyboardInterrupt, B_str);
    void (*__serialize__) (B_KeyboardInterrupt, $Serial$state);
    B_KeyboardInterrupt (*__deserialize__) (B_KeyboardInterrupt, $Serial$state);
    B_bool (*__bool__) (B_KeyboardInterrupt);
    B_str (*__str__) (B_KeyboardInterrupt);
    B_str (*__repr__) (B_KeyboardInterrupt);
};
struct B_KeyboardInterrupt {
    struct B_KeyboardInterruptG_class *$class;
    B_str error_message;
};
struct B_ExceptionG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Exception, B_str);
    void (*__serialize__) (B_Exception, $Serial$state);
    B_Exception (*__deserialize__) (B_Exception, $Serial$state);
    B_bool (*__bool__) (B_Exception);
    B_str (*__str__) (B_Exception);
    B_str (*__repr__) (B_Exception);
};
struct B_Exception {
    struct B_ExceptionG_class *$class;
    B_str error_message;
};
struct B_AssertionErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_AssertionError, B_str);
    void (*__serialize__) (B_AssertionError, $Serial$state);
    B_AssertionError (*__deserialize__) (B_AssertionError, $Serial$state);
    B_bool (*__bool__) (B_AssertionError);
    B_str (*__str__) (B_AssertionError);
    B_str (*__repr__) (B_AssertionError);
};
struct B_AssertionError {
    struct B_AssertionErrorG_class *$class;
    B_str error_message;
};
struct B_LookupErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LookupError, B_str);
    void (*__serialize__) (B_LookupError, $Serial$state);
    B_LookupError (*__deserialize__) (B_LookupError, $Serial$state);
    B_bool (*__bool__) (B_LookupError);
    B_str (*__str__) (B_LookupError);
    B_str (*__repr__) (B_LookupError);
};
struct B_LookupError {
    struct B_LookupErrorG_class *$class;
    B_str error_message;
};
struct B_IndexErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IndexError, B_str);
    void (*__serialize__) (B_IndexError, $Serial$state);
    B_IndexError (*__deserialize__) (B_IndexError, $Serial$state);
    B_bool (*__bool__) (B_IndexError);
    B_str (*__str__) (B_IndexError);
    B_str (*__repr__) (B_IndexError);
};
struct B_IndexError {
    struct B_IndexErrorG_class *$class;
    B_str error_message;
};
struct B_KeyErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_KeyError, B_str);
    void (*__serialize__) (B_KeyError, $Serial$state);
    B_KeyError (*__deserialize__) (B_KeyError, $Serial$state);
    B_bool (*__bool__) (B_KeyError);
    B_str (*__str__) (B_KeyError);
    B_str (*__repr__) (B_KeyError);
};
struct B_KeyError {
    struct B_KeyErrorG_class *$class;
    B_str error_message;
};
struct B_MemoryErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MemoryError, B_str);
    void (*__serialize__) (B_MemoryError, $Serial$state);
    B_MemoryError (*__deserialize__) (B_MemoryError, $Serial$state);
    B_bool (*__bool__) (B_MemoryError);
    B_str (*__str__) (B_MemoryError);
    B_str (*__repr__) (B_MemoryError);
};
struct B_MemoryError {
    struct B_MemoryErrorG_class *$class;
    B_str error_message;
};
struct B_OSErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OSError, B_str);
    void (*__serialize__) (B_OSError, $Serial$state);
    B_OSError (*__deserialize__) (B_OSError, $Serial$state);
    B_bool (*__bool__) (B_OSError);
    B_str (*__str__) (B_OSError);
    B_str (*__repr__) (B_OSError);
};
struct B_OSError {
    struct B_OSErrorG_class *$class;
    B_str error_message;
};
struct B_RuntimeErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_RuntimeError, B_str);
    void (*__serialize__) (B_RuntimeError, $Serial$state);
    B_RuntimeError (*__deserialize__) (B_RuntimeError, $Serial$state);
    B_bool (*__bool__) (B_RuntimeError);
    B_str (*__str__) (B_RuntimeError);
    B_str (*__repr__) (B_RuntimeError);
};
struct B_RuntimeError {
    struct B_RuntimeErrorG_class *$class;
    B_str error_message;
};
struct B_NotImplementedErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_NotImplementedError, B_str);
    void (*__serialize__) (B_NotImplementedError, $Serial$state);
    B_NotImplementedError (*__deserialize__) (B_NotImplementedError, $Serial$state);
    B_bool (*__bool__) (B_NotImplementedError);
    B_str (*__str__) (B_NotImplementedError);
    B_str (*__repr__) (B_NotImplementedError);
};
struct B_NotImplementedError {
    struct B_NotImplementedErrorG_class *$class;
    B_str error_message;
};
struct B_ValueErrorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_ValueError, B_str);
    void (*__serialize__) (B_ValueError, $Serial$state);
    B_ValueError (*__deserialize__) (B_ValueError, $Serial$state);
    B_bool (*__bool__) (B_ValueError);
    B_str (*__str__) (B_ValueError);
    B_str (*__repr__) (B_ValueError);
};
struct B_ValueError {
    struct B_ValueErrorG_class *$class;
    B_str error_message;
};
struct B_IdentityG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Identity);
    void (*__serialize__) (B_Identity, $Serial$state);
    B_Identity (*__deserialize__) (B_Identity, $Serial$state);
    B_bool (*__bool__) (B_Identity);
    B_str (*__str__) (B_Identity);
    B_str (*__repr__) (B_Identity);
    B_bool (*__is__) (B_Identity, $WORD, $WORD);
    B_bool (*__isnot__) (B_Identity, $WORD, $WORD);
};
struct B_Identity {
    struct B_IdentityG_class *$class;
};
struct B_EqG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Eq);
    void (*__serialize__) (B_Eq, $Serial$state);
    B_Eq (*__deserialize__) (B_Eq, $Serial$state);
    B_bool (*__bool__) (B_Eq);
    B_str (*__str__) (B_Eq);
    B_str (*__repr__) (B_Eq);
    B_bool (*__eq__) (B_Eq, $WORD, $WORD);
    B_bool (*__ne__) (B_Eq, $WORD, $WORD);
};
struct B_Eq {
    struct B_EqG_class *$class;
};
struct B_OrdG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Ord);
    void (*__serialize__) (B_Ord, $Serial$state);
    B_Ord (*__deserialize__) (B_Ord, $Serial$state);
    B_bool (*__bool__) (B_Ord);
    B_str (*__str__) (B_Ord);
    B_str (*__repr__) (B_Ord);
    B_bool (*__eq__) (B_Ord, $WORD, $WORD);
    B_bool (*__ne__) (B_Ord, $WORD, $WORD);
    B_bool (*__lt__) (B_Ord, $WORD, $WORD);
    B_bool (*__le__) (B_Ord, $WORD, $WORD);
    B_bool (*__gt__) (B_Ord, $WORD, $WORD);
    B_bool (*__ge__) (B_Ord, $WORD, $WORD);
};
struct B_Ord {
    struct B_OrdG_class *$class;
};
struct B_LogicalG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Logical);
    void (*__serialize__) (B_Logical, $Serial$state);
    B_Logical (*__deserialize__) (B_Logical, $Serial$state);
    B_bool (*__bool__) (B_Logical);
    B_str (*__str__) (B_Logical);
    B_str (*__repr__) (B_Logical);
    $WORD (*__and__) (B_Logical, $WORD, $WORD);
    $WORD (*__or__) (B_Logical, $WORD, $WORD);
    $WORD (*__xor__) (B_Logical, $WORD, $WORD);
    $WORD (*__iand__) (B_Logical, $WORD, $WORD);
    $WORD (*__ior__) (B_Logical, $WORD, $WORD);
    $WORD (*__ixor__) (B_Logical, $WORD, $WORD);
};
struct B_Logical {
    struct B_LogicalG_class *$class;
};
struct B_PlusG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Plus);
    void (*__serialize__) (B_Plus, $Serial$state);
    B_Plus (*__deserialize__) (B_Plus, $Serial$state);
    B_bool (*__bool__) (B_Plus);
    B_str (*__str__) (B_Plus);
    B_str (*__repr__) (B_Plus);
    $WORD (*__add__) (B_Plus, $WORD, $WORD);
    $WORD (*__iadd__) (B_Plus, $WORD, $WORD);
};
struct B_Plus {
    struct B_PlusG_class *$class;
};
struct B_MinusG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Minus);
    void (*__serialize__) (B_Minus, $Serial$state);
    B_Minus (*__deserialize__) (B_Minus, $Serial$state);
    B_bool (*__bool__) (B_Minus);
    B_str (*__str__) (B_Minus);
    B_str (*__repr__) (B_Minus);
    $WORD (*__sub__) (B_Minus, $WORD, $WORD);
    $WORD (*__isub__) (B_Minus, $WORD, $WORD);
};
struct B_Minus {
    struct B_MinusG_class *$class;
};
struct B_TimesG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Times);
    void (*__serialize__) (B_Times, $Serial$state);
    B_Times (*__deserialize__) (B_Times, $Serial$state);
    B_bool (*__bool__) (B_Times);
    B_str (*__str__) (B_Times);
    B_str (*__repr__) (B_Times);
    $WORD (*__add__) (B_Times, $WORD, $WORD);
    $WORD (*__iadd__) (B_Times, $WORD, $WORD);
    $WORD (*__mul__) (B_Times, $WORD, $WORD);
    $WORD (*__imul__) (B_Times, $WORD, $WORD);
};
struct B_Times {
    struct B_TimesG_class *$class;
};
struct B_DivG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Div);
    void (*__serialize__) (B_Div, $Serial$state);
    B_Div (*__deserialize__) (B_Div, $Serial$state);
    B_bool (*__bool__) (B_Div);
    B_str (*__str__) (B_Div);
    B_str (*__repr__) (B_Div);
    $WORD (*__truediv__) (B_Div, $WORD, $WORD);
    $WORD (*__itruediv__) (B_Div, $WORD, $WORD);
};
struct B_Div {
    struct B_DivG_class *$class;
};
struct B_HashableG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Hashable);
    void (*__serialize__) (B_Hashable, $Serial$state);
    B_Hashable (*__deserialize__) (B_Hashable, $Serial$state);
    B_bool (*__bool__) (B_Hashable);
    B_str (*__str__) (B_Hashable);
    B_str (*__repr__) (B_Hashable);
    B_bool (*__eq__) (B_Hashable, $WORD, $WORD);
    B_bool (*__ne__) (B_Hashable, $WORD, $WORD);
    B_int (*__hash__) (B_Hashable, $WORD);
};
struct B_Hashable {
    struct B_HashableG_class *$class;
};
struct B_complexG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_complex, B_Number, $WORD);
    void (*__serialize__) (B_complex, $Serial$state);
    B_complex (*__deserialize__) (B_complex, $Serial$state);
    B_bool (*__bool__) (B_complex);
    B_str (*__str__) (B_complex);
    B_str (*__repr__) (B_complex);
};
struct B_dictG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_dict, B_Hashable, B_Iterable, $WORD);
    void (*__serialize__) (B_dict, $Serial$state);
    B_dict (*__deserialize__) (B_dict, $Serial$state);
    B_bool (*__bool__) (B_dict);
    B_str (*__str__) (B_dict);
    B_str (*__repr__) (B_dict);
};
struct B_setG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_set, B_Hashable, B_Iterable, $WORD);
    void (*__serialize__) (B_set, $Serial$state);
    B_set (*__deserialize__) (B_set, $Serial$state);
    B_bool (*__bool__) (B_set);
    B_str (*__str__) (B_set);
    B_str (*__repr__) (B_set);
};
struct B_NumberG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Number, B_Minus);
    void (*__serialize__) (B_Number, $Serial$state);
    B_Number (*__deserialize__) (B_Number, $Serial$state);
    B_bool (*__bool__) (B_Number);
    B_str (*__str__) (B_Number);
    B_str (*__repr__) (B_Number);
    $WORD (*__add__) (B_Number, $WORD, $WORD);
    $WORD (*__iadd__) (B_Number, $WORD, $WORD);
    $WORD (*__mul__) (B_Number, $WORD, $WORD);
    $WORD (*__imul__) (B_Number, $WORD, $WORD);
    $WORD (*__fromatom__) (B_Number, B_atom);
    B_complex (*__complx__) (B_Number, $WORD);
    $WORD (*__pow__) (B_Number, $WORD, $WORD);
    $WORD (*__ipow__) (B_Number, $WORD, $WORD);
    $WORD (*__neg__) (B_Number, $WORD);
    $WORD (*__pos__) (B_Number, $WORD);
    $WORD (*real) (B_Number, $WORD, B_Real);
    $WORD (*imag) (B_Number, $WORD, B_Real);
    $WORD (*__abs__) (B_Number, $WORD, B_Real);
    $WORD (*conjugate) (B_Number, $WORD);
};
struct B_Number {
    struct B_NumberG_class *$class;
    B_Minus W_Minus;
};
struct B_MinusD_NumberG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_Number, B_Number);
    void (*__serialize__) (B_MinusD_Number, $Serial$state);
    B_MinusD_Number (*__deserialize__) (B_MinusD_Number, $Serial$state);
    B_bool (*__bool__) (B_MinusD_Number);
    B_str (*__str__) (B_MinusD_Number);
    B_str (*__repr__) (B_MinusD_Number);
    $WORD (*__sub__) (B_MinusD_Number, $WORD, $WORD);
    $WORD (*__isub__) (B_MinusD_Number, $WORD, $WORD);
};
struct B_MinusD_Number {
    struct B_MinusD_NumberG_class *$class;
    B_Number W_Number;
};
struct B_RealG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Real, B_Minus);
    void (*__serialize__) (B_Real, $Serial$state);
    B_Real (*__deserialize__) (B_Real, $Serial$state);
    B_bool (*__bool__) (B_Real);
    B_str (*__str__) (B_Real);
    B_str (*__repr__) (B_Real);
    $WORD (*__add__) (B_Real, $WORD, $WORD);
    $WORD (*__iadd__) (B_Real, $WORD, $WORD);
    $WORD (*__mul__) (B_Real, $WORD, $WORD);
    $WORD (*__imul__) (B_Real, $WORD, $WORD);
    $WORD (*__fromatom__) (B_Real, B_atom);
    B_complex (*__complx__) (B_Real, $WORD);
    $WORD (*__pow__) (B_Real, $WORD, $WORD);
    $WORD (*__ipow__) (B_Real, $WORD, $WORD);
    $WORD (*__neg__) (B_Real, $WORD);
    $WORD (*__pos__) (B_Real, $WORD);
    $WORD (*real) (B_Real, $WORD, B_Real);
    $WORD (*imag) (B_Real, $WORD, B_Real);
    $WORD (*__abs__) (B_Real, $WORD, B_Real);
    $WORD (*conjugate) (B_Real, $WORD);
    B_float (*__float__) (B_Real, $WORD);
    $WORD (*__trunc__) (B_Real, $WORD, B_Integral);
    $WORD (*__floor__) (B_Real, $WORD, B_Integral);
    $WORD (*__ceil__) (B_Real, $WORD, B_Integral);
    $WORD (*__round__) (B_Real, $WORD, B_int);
};
struct B_Real {
    struct B_RealG_class *$class;
    B_Minus W_Minus;
};
struct B_MinusD_RealG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_Real, B_Real);
    void (*__serialize__) (B_MinusD_Real, $Serial$state);
    B_MinusD_Real (*__deserialize__) (B_MinusD_Real, $Serial$state);
    B_bool (*__bool__) (B_MinusD_Real);
    B_str (*__str__) (B_MinusD_Real);
    B_str (*__repr__) (B_MinusD_Real);
    $WORD (*__sub__) (B_MinusD_Real, $WORD, $WORD);
    $WORD (*__isub__) (B_MinusD_Real, $WORD, $WORD);
};
struct B_MinusD_Real {
    struct B_MinusD_RealG_class *$class;
    B_Number W_Number;
    B_Real W_Real;
};
struct B_RealFloatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_RealFloat, B_Minus);
    void (*__serialize__) (B_RealFloat, $Serial$state);
    B_RealFloat (*__deserialize__) (B_RealFloat, $Serial$state);
    B_bool (*__bool__) (B_RealFloat);
    B_str (*__str__) (B_RealFloat);
    B_str (*__repr__) (B_RealFloat);
    $WORD (*__add__) (B_RealFloat, $WORD, $WORD);
    $WORD (*__iadd__) (B_RealFloat, $WORD, $WORD);
    $WORD (*__mul__) (B_RealFloat, $WORD, $WORD);
    $WORD (*__imul__) (B_RealFloat, $WORD, $WORD);
    $WORD (*__fromatom__) (B_RealFloat, B_atom);
    B_complex (*__complx__) (B_RealFloat, $WORD);
    $WORD (*__pow__) (B_RealFloat, $WORD, $WORD);
    $WORD (*__ipow__) (B_RealFloat, $WORD, $WORD);
    $WORD (*__neg__) (B_RealFloat, $WORD);
    $WORD (*__pos__) (B_RealFloat, $WORD);
    $WORD (*real) (B_RealFloat, $WORD, B_Real);
    $WORD (*imag) (B_RealFloat, $WORD, B_Real);
    $WORD (*__abs__) (B_RealFloat, $WORD, B_Real);
    $WORD (*conjugate) (B_RealFloat, $WORD);
    B_float (*__float__) (B_RealFloat, $WORD);
    $WORD (*__trunc__) (B_RealFloat, $WORD, B_Integral);
    $WORD (*__floor__) (B_RealFloat, $WORD, B_Integral);
    $WORD (*__ceil__) (B_RealFloat, $WORD, B_Integral);
    $WORD (*__round__) (B_RealFloat, $WORD, B_int);
};
struct B_RealFloat {
    struct B_RealFloatG_class *$class;
    B_Minus W_Minus;
};
struct B_MinusD_RealFloatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_RealFloat, B_RealFloat);
    void (*__serialize__) (B_MinusD_RealFloat, $Serial$state);
    B_MinusD_RealFloat (*__deserialize__) (B_MinusD_RealFloat, $Serial$state);
    B_bool (*__bool__) (B_MinusD_RealFloat);
    B_str (*__str__) (B_MinusD_RealFloat);
    B_str (*__repr__) (B_MinusD_RealFloat);
    $WORD (*__sub__) (B_MinusD_RealFloat, $WORD, $WORD);
    $WORD (*__isub__) (B_MinusD_RealFloat, $WORD, $WORD);
};
struct B_MinusD_RealFloat {
    struct B_MinusD_RealFloatG_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_RealFloat W_RealFloat;
};
struct B_RationalG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Rational, B_Minus);
    void (*__serialize__) (B_Rational, $Serial$state);
    B_Rational (*__deserialize__) (B_Rational, $Serial$state);
    B_bool (*__bool__) (B_Rational);
    B_str (*__str__) (B_Rational);
    B_str (*__repr__) (B_Rational);
    $WORD (*__add__) (B_Rational, $WORD, $WORD);
    $WORD (*__iadd__) (B_Rational, $WORD, $WORD);
    $WORD (*__mul__) (B_Rational, $WORD, $WORD);
    $WORD (*__imul__) (B_Rational, $WORD, $WORD);
    $WORD (*__fromatom__) (B_Rational, B_atom);
    B_complex (*__complx__) (B_Rational, $WORD);
    $WORD (*__pow__) (B_Rational, $WORD, $WORD);
    $WORD (*__ipow__) (B_Rational, $WORD, $WORD);
    $WORD (*__neg__) (B_Rational, $WORD);
    $WORD (*__pos__) (B_Rational, $WORD);
    $WORD (*real) (B_Rational, $WORD, B_Real);
    $WORD (*imag) (B_Rational, $WORD, B_Real);
    $WORD (*__abs__) (B_Rational, $WORD, B_Real);
    $WORD (*conjugate) (B_Rational, $WORD);
    B_float (*__float__) (B_Rational, $WORD);
    $WORD (*__trunc__) (B_Rational, $WORD, B_Integral);
    $WORD (*__floor__) (B_Rational, $WORD, B_Integral);
    $WORD (*__ceil__) (B_Rational, $WORD, B_Integral);
    $WORD (*__round__) (B_Rational, $WORD, B_int);
    $WORD (*numerator) (B_Rational, $WORD, B_Integral);
    $WORD (*denominator) (B_Rational, $WORD, B_Integral);
};
struct B_Rational {
    struct B_RationalG_class *$class;
    B_Minus W_Minus;
};
struct B_MinusD_RationalG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_Rational, B_Rational);
    void (*__serialize__) (B_MinusD_Rational, $Serial$state);
    B_MinusD_Rational (*__deserialize__) (B_MinusD_Rational, $Serial$state);
    B_bool (*__bool__) (B_MinusD_Rational);
    B_str (*__str__) (B_MinusD_Rational);
    B_str (*__repr__) (B_MinusD_Rational);
    $WORD (*__sub__) (B_MinusD_Rational, $WORD, $WORD);
    $WORD (*__isub__) (B_MinusD_Rational, $WORD, $WORD);
};
struct B_MinusD_Rational {
    struct B_MinusD_RationalG_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
};
struct B_IntegralG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Integral, B_Minus, B_Logical);
    void (*__serialize__) (B_Integral, $Serial$state);
    B_Integral (*__deserialize__) (B_Integral, $Serial$state);
    B_bool (*__bool__) (B_Integral);
    B_str (*__str__) (B_Integral);
    B_str (*__repr__) (B_Integral);
    $WORD (*__add__) (B_Integral, $WORD, $WORD);
    $WORD (*__iadd__) (B_Integral, $WORD, $WORD);
    $WORD (*__mul__) (B_Integral, $WORD, $WORD);
    $WORD (*__imul__) (B_Integral, $WORD, $WORD);
    $WORD (*__fromatom__) (B_Integral, B_atom);
    B_complex (*__complx__) (B_Integral, $WORD);
    $WORD (*__pow__) (B_Integral, $WORD, $WORD);
    $WORD (*__ipow__) (B_Integral, $WORD, $WORD);
    $WORD (*__neg__) (B_Integral, $WORD);
    $WORD (*__pos__) (B_Integral, $WORD);
    $WORD (*real) (B_Integral, $WORD, B_Real);
    $WORD (*imag) (B_Integral, $WORD, B_Real);
    $WORD (*__abs__) (B_Integral, $WORD, B_Real);
    $WORD (*conjugate) (B_Integral, $WORD);
    B_float (*__float__) (B_Integral, $WORD);
    $WORD (*__trunc__) (B_Integral, $WORD, B_Integral);
    $WORD (*__floor__) (B_Integral, $WORD, B_Integral);
    $WORD (*__ceil__) (B_Integral, $WORD, B_Integral);
    $WORD (*__round__) (B_Integral, $WORD, B_int);
    $WORD (*numerator) (B_Integral, $WORD, B_Integral);
    $WORD (*denominator) (B_Integral, $WORD, B_Integral);
    B_int (*__int__) (B_Integral, $WORD);
    B_int (*__index__) (B_Integral, $WORD);
    B_tuple (*__divmod__) (B_Integral, $WORD, $WORD);
    $WORD (*__floordiv__) (B_Integral, $WORD, $WORD);
    $WORD (*__mod__) (B_Integral, $WORD, $WORD);
    $WORD (*__ifloordiv__) (B_Integral, $WORD, $WORD);
    $WORD (*__imod__) (B_Integral, $WORD, $WORD);
    $WORD (*__lshift__) (B_Integral, $WORD, B_int);
    $WORD (*__rshift__) (B_Integral, $WORD, B_int);
    $WORD (*__ilshift__) (B_Integral, $WORD, B_int);
    $WORD (*__irshift__) (B_Integral, $WORD, B_int);
    $WORD (*__invert__) (B_Integral, $WORD);
};
struct B_Integral {
    struct B_IntegralG_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_Integral, B_Integral);
    void (*__serialize__) (B_MinusD_Integral, $Serial$state);
    B_MinusD_Integral (*__deserialize__) (B_MinusD_Integral, $Serial$state);
    B_bool (*__bool__) (B_MinusD_Integral);
    B_str (*__str__) (B_MinusD_Integral);
    B_str (*__repr__) (B_MinusD_Integral);
    $WORD (*__sub__) (B_MinusD_Integral, $WORD, $WORD);
    $WORD (*__isub__) (B_MinusD_Integral, $WORD, $WORD);
};
struct B_MinusD_Integral {
    struct B_MinusD_IntegralG_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_Integral, B_Integral);
    void (*__serialize__) (B_LogicalD_Integral, $Serial$state);
    B_LogicalD_Integral (*__deserialize__) (B_LogicalD_Integral, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_Integral);
    B_str (*__str__) (B_LogicalD_Integral);
    B_str (*__repr__) (B_LogicalD_Integral);
    $WORD (*__and__) (B_LogicalD_Integral, $WORD, $WORD);
    $WORD (*__or__) (B_LogicalD_Integral, $WORD, $WORD);
    $WORD (*__xor__) (B_LogicalD_Integral, $WORD, $WORD);
    $WORD (*__iand__) (B_LogicalD_Integral, $WORD, $WORD);
    $WORD (*__ior__) (B_LogicalD_Integral, $WORD, $WORD);
    $WORD (*__ixor__) (B_LogicalD_Integral, $WORD, $WORD);
};
struct B_LogicalD_Integral {
    struct B_LogicalD_IntegralG_class *$class;
    B_Integral W_Integral;
};
struct B_HashableD_boolG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_bool);
    void (*__serialize__) (B_HashableD_bool, $Serial$state);
    B_HashableD_bool (*__deserialize__) (B_HashableD_bool, $Serial$state);
    B_bool (*__bool__) (B_HashableD_bool);
    B_str (*__str__) (B_HashableD_bool);
    B_str (*__repr__) (B_HashableD_bool);
    B_bool (*__eq__) (B_HashableD_bool, B_bool, B_bool);
    B_bool (*__ne__) (B_HashableD_bool, B_bool, B_bool);
    B_int (*__hash__) (B_HashableD_bool, B_bool);
};
struct B_HashableD_bool {
    struct B_HashableD_boolG_class *$class;
};
struct B_IntegralD_intG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IntegralD_int);
    void (*__serialize__) (B_IntegralD_int, $Serial$state);
    B_IntegralD_int (*__deserialize__) (B_IntegralD_int, $Serial$state);
    B_bool (*__bool__) (B_IntegralD_int);
    B_str (*__str__) (B_IntegralD_int);
    B_str (*__repr__) (B_IntegralD_int);
    B_int (*__add__) (B_IntegralD_int, B_int, B_int);
    B_int (*__iadd__) (B_IntegralD_int, B_int, B_int);
    B_int (*__mul__) (B_IntegralD_int, B_int, B_int);
    B_int (*__imul__) (B_IntegralD_int, B_int, B_int);
    B_int (*__fromatom__) (B_IntegralD_int, B_atom);
    B_complex (*__complx__) (B_IntegralD_int, B_int);
    B_int (*__pow__) (B_IntegralD_int, B_int, B_int);
    B_int (*__ipow__) (B_IntegralD_int, B_int, B_int);
    B_int (*__neg__) (B_IntegralD_int, B_int);
    B_int (*__pos__) (B_IntegralD_int, B_int);
    $WORD (*real) (B_IntegralD_int, B_int, B_Real);
    $WORD (*imag) (B_IntegralD_int, B_int, B_Real);
    $WORD (*__abs__) (B_IntegralD_int, B_int, B_Real);
    B_int (*conjugate) (B_IntegralD_int, B_int);
    B_float (*__float__) (B_IntegralD_int, B_int);
    $WORD (*__trunc__) (B_IntegralD_int, B_int, B_Integral);
    $WORD (*__floor__) (B_IntegralD_int, B_int, B_Integral);
    $WORD (*__ceil__) (B_IntegralD_int, B_int, B_Integral);
    B_int (*__round__) (B_IntegralD_int, B_int, B_int);
    $WORD (*numerator) (B_IntegralD_int, B_int, B_Integral);
    $WORD (*denominator) (B_IntegralD_int, B_int, B_Integral);
    B_int (*__int__) (B_IntegralD_int, B_int);
    B_int (*__index__) (B_IntegralD_int, B_int);
    B_tuple (*__divmod__) (B_IntegralD_int, B_int, B_int);
    B_int (*__floordiv__) (B_IntegralD_int, B_int, B_int);
    B_int (*__mod__) (B_IntegralD_int, B_int, B_int);
    B_int (*__ifloordiv__) (B_IntegralD_int, B_int, B_int);
    B_int (*__imod__) (B_IntegralD_int, B_int, B_int);
    B_int (*__lshift__) (B_IntegralD_int, B_int, B_int);
    B_int (*__rshift__) (B_IntegralD_int, B_int, B_int);
    B_int (*__ilshift__) (B_IntegralD_int, B_int, B_int);
    B_int (*__irshift__) (B_IntegralD_int, B_int, B_int);
    B_int (*__invert__) (B_IntegralD_int, B_int);
};
struct B_IntegralD_int {
    struct B_IntegralD_intG_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralD_intG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_IntegralD_int, B_Integral);
    void (*__serialize__) (B_MinusD_IntegralD_int, $Serial$state);
    B_MinusD_IntegralD_int (*__deserialize__) (B_MinusD_IntegralD_int, $Serial$state);
    B_bool (*__bool__) (B_MinusD_IntegralD_int);
    B_str (*__str__) (B_MinusD_IntegralD_int);
    B_str (*__repr__) (B_MinusD_IntegralD_int);
    B_int (*__sub__) (B_MinusD_IntegralD_int, B_int, B_int);
    B_int (*__isub__) (B_MinusD_IntegralD_int, B_int, B_int);
};
struct B_MinusD_IntegralD_int {
    struct B_MinusD_IntegralD_intG_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralD_intG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_IntegralD_int, B_Integral);
    void (*__serialize__) (B_LogicalD_IntegralD_int, $Serial$state);
    B_LogicalD_IntegralD_int (*__deserialize__) (B_LogicalD_IntegralD_int, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_IntegralD_int);
    B_str (*__str__) (B_LogicalD_IntegralD_int);
    B_str (*__repr__) (B_LogicalD_IntegralD_int);
    B_int (*__and__) (B_LogicalD_IntegralD_int, B_int, B_int);
    B_int (*__or__) (B_LogicalD_IntegralD_int, B_int, B_int);
    B_int (*__xor__) (B_LogicalD_IntegralD_int, B_int, B_int);
    B_int (*__iand__) (B_LogicalD_IntegralD_int, B_int, B_int);
    B_int (*__ior__) (B_LogicalD_IntegralD_int, B_int, B_int);
    B_int (*__ixor__) (B_LogicalD_IntegralD_int, B_int, B_int);
};
struct B_LogicalD_IntegralD_int {
    struct B_LogicalD_IntegralD_intG_class *$class;
    B_Integral W_Integral;
};
struct B_DivD_intG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_int);
    void (*__serialize__) (B_DivD_int, $Serial$state);
    B_DivD_int (*__deserialize__) (B_DivD_int, $Serial$state);
    B_bool (*__bool__) (B_DivD_int);
    B_str (*__str__) (B_DivD_int);
    B_str (*__repr__) (B_DivD_int);
    B_float (*__truediv__) (B_DivD_int, B_int, B_int);
    B_float (*__itruediv__) (B_DivD_int, B_int, B_int);
};
struct B_DivD_int {
    struct B_DivD_intG_class *$class;
};
struct B_OrdD_intG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_int);
    void (*__serialize__) (B_OrdD_int, $Serial$state);
    B_OrdD_int (*__deserialize__) (B_OrdD_int, $Serial$state);
    B_bool (*__bool__) (B_OrdD_int);
    B_str (*__str__) (B_OrdD_int);
    B_str (*__repr__) (B_OrdD_int);
    B_bool (*__eq__) (B_OrdD_int, B_int, B_int);
    B_bool (*__ne__) (B_OrdD_int, B_int, B_int);
    B_bool (*__lt__) (B_OrdD_int, B_int, B_int);
    B_bool (*__le__) (B_OrdD_int, B_int, B_int);
    B_bool (*__gt__) (B_OrdD_int, B_int, B_int);
    B_bool (*__ge__) (B_OrdD_int, B_int, B_int);
};
struct B_OrdD_int {
    struct B_OrdD_intG_class *$class;
};
struct B_HashableD_intG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_int);
    void (*__serialize__) (B_HashableD_int, $Serial$state);
    B_HashableD_int (*__deserialize__) (B_HashableD_int, $Serial$state);
    B_bool (*__bool__) (B_HashableD_int);
    B_str (*__str__) (B_HashableD_int);
    B_str (*__repr__) (B_HashableD_int);
    B_bool (*__eq__) (B_HashableD_int, B_int, B_int);
    B_bool (*__ne__) (B_HashableD_int, B_int, B_int);
    B_int (*__hash__) (B_HashableD_int, B_int);
};
struct B_HashableD_int {
    struct B_HashableD_intG_class *$class;
};
struct B_IntegralD_i64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IntegralD_i64);
    void (*__serialize__) (B_IntegralD_i64, $Serial$state);
    B_IntegralD_i64 (*__deserialize__) (B_IntegralD_i64, $Serial$state);
    B_bool (*__bool__) (B_IntegralD_i64);
    B_str (*__str__) (B_IntegralD_i64);
    B_str (*__repr__) (B_IntegralD_i64);
    B_i64 (*__add__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__iadd__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__mul__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__imul__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__fromatom__) (B_IntegralD_i64, B_atom);
    B_complex (*__complx__) (B_IntegralD_i64, B_i64);
    B_i64 (*__pow__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__ipow__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__neg__) (B_IntegralD_i64, B_i64);
    B_i64 (*__pos__) (B_IntegralD_i64, B_i64);
    $WORD (*real) (B_IntegralD_i64, B_i64, B_Real);
    $WORD (*imag) (B_IntegralD_i64, B_i64, B_Real);
    $WORD (*__abs__) (B_IntegralD_i64, B_i64, B_Real);
    B_i64 (*conjugate) (B_IntegralD_i64, B_i64);
    B_float (*__float__) (B_IntegralD_i64, B_i64);
    $WORD (*__trunc__) (B_IntegralD_i64, B_i64, B_Integral);
    $WORD (*__floor__) (B_IntegralD_i64, B_i64, B_Integral);
    $WORD (*__ceil__) (B_IntegralD_i64, B_i64, B_Integral);
    B_i64 (*__round__) (B_IntegralD_i64, B_i64, B_int);
    $WORD (*numerator) (B_IntegralD_i64, B_i64, B_Integral);
    $WORD (*denominator) (B_IntegralD_i64, B_i64, B_Integral);
    B_int (*__int__) (B_IntegralD_i64, B_i64);
    B_int (*__index__) (B_IntegralD_i64, B_i64);
    B_tuple (*__divmod__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__floordiv__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__mod__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__ifloordiv__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__imod__) (B_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__lshift__) (B_IntegralD_i64, B_i64, B_int);
    B_i64 (*__rshift__) (B_IntegralD_i64, B_i64, B_int);
    B_i64 (*__ilshift__) (B_IntegralD_i64, B_i64, B_int);
    B_i64 (*__irshift__) (B_IntegralD_i64, B_i64, B_int);
    B_i64 (*__invert__) (B_IntegralD_i64, B_i64);
};
struct B_IntegralD_i64 {
    struct B_IntegralD_i64G_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralD_i64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_IntegralD_i64, B_Integral);
    void (*__serialize__) (B_MinusD_IntegralD_i64, $Serial$state);
    B_MinusD_IntegralD_i64 (*__deserialize__) (B_MinusD_IntegralD_i64, $Serial$state);
    B_bool (*__bool__) (B_MinusD_IntegralD_i64);
    B_str (*__str__) (B_MinusD_IntegralD_i64);
    B_str (*__repr__) (B_MinusD_IntegralD_i64);
    B_i64 (*__sub__) (B_MinusD_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__isub__) (B_MinusD_IntegralD_i64, B_i64, B_i64);
};
struct B_MinusD_IntegralD_i64 {
    struct B_MinusD_IntegralD_i64G_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralD_i64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_IntegralD_i64, B_Integral);
    void (*__serialize__) (B_LogicalD_IntegralD_i64, $Serial$state);
    B_LogicalD_IntegralD_i64 (*__deserialize__) (B_LogicalD_IntegralD_i64, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_IntegralD_i64);
    B_str (*__str__) (B_LogicalD_IntegralD_i64);
    B_str (*__repr__) (B_LogicalD_IntegralD_i64);
    B_i64 (*__and__) (B_LogicalD_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__or__) (B_LogicalD_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__xor__) (B_LogicalD_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__iand__) (B_LogicalD_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__ior__) (B_LogicalD_IntegralD_i64, B_i64, B_i64);
    B_i64 (*__ixor__) (B_LogicalD_IntegralD_i64, B_i64, B_i64);
};
struct B_LogicalD_IntegralD_i64 {
    struct B_LogicalD_IntegralD_i64G_class *$class;
    B_Integral W_Integral;
};
struct B_DivD_i64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_i64);
    void (*__serialize__) (B_DivD_i64, $Serial$state);
    B_DivD_i64 (*__deserialize__) (B_DivD_i64, $Serial$state);
    B_bool (*__bool__) (B_DivD_i64);
    B_str (*__str__) (B_DivD_i64);
    B_str (*__repr__) (B_DivD_i64);
    B_float (*__truediv__) (B_DivD_i64, B_i64, B_i64);
    B_float (*__itruediv__) (B_DivD_i64, B_i64, B_i64);
};
struct B_DivD_i64 {
    struct B_DivD_i64G_class *$class;
};
struct B_OrdD_i64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_i64);
    void (*__serialize__) (B_OrdD_i64, $Serial$state);
    B_OrdD_i64 (*__deserialize__) (B_OrdD_i64, $Serial$state);
    B_bool (*__bool__) (B_OrdD_i64);
    B_str (*__str__) (B_OrdD_i64);
    B_str (*__repr__) (B_OrdD_i64);
    B_bool (*__eq__) (B_OrdD_i64, B_i64, B_i64);
    B_bool (*__ne__) (B_OrdD_i64, B_i64, B_i64);
    B_bool (*__lt__) (B_OrdD_i64, B_i64, B_i64);
    B_bool (*__le__) (B_OrdD_i64, B_i64, B_i64);
    B_bool (*__gt__) (B_OrdD_i64, B_i64, B_i64);
    B_bool (*__ge__) (B_OrdD_i64, B_i64, B_i64);
};
struct B_OrdD_i64 {
    struct B_OrdD_i64G_class *$class;
};
struct B_HashableD_i64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_i64);
    void (*__serialize__) (B_HashableD_i64, $Serial$state);
    B_HashableD_i64 (*__deserialize__) (B_HashableD_i64, $Serial$state);
    B_bool (*__bool__) (B_HashableD_i64);
    B_str (*__str__) (B_HashableD_i64);
    B_str (*__repr__) (B_HashableD_i64);
    B_bool (*__eq__) (B_HashableD_i64, B_i64, B_i64);
    B_bool (*__ne__) (B_HashableD_i64, B_i64, B_i64);
    B_int (*__hash__) (B_HashableD_i64, B_i64);
};
struct B_HashableD_i64 {
    struct B_HashableD_i64G_class *$class;
};
struct B_IntegralD_i32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IntegralD_i32);
    void (*__serialize__) (B_IntegralD_i32, $Serial$state);
    B_IntegralD_i32 (*__deserialize__) (B_IntegralD_i32, $Serial$state);
    B_bool (*__bool__) (B_IntegralD_i32);
    B_str (*__str__) (B_IntegralD_i32);
    B_str (*__repr__) (B_IntegralD_i32);
    B_i32 (*__add__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__iadd__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__mul__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__imul__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__fromatom__) (B_IntegralD_i32, B_atom);
    B_complex (*__complx__) (B_IntegralD_i32, B_i32);
    B_i32 (*__pow__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__ipow__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__neg__) (B_IntegralD_i32, B_i32);
    B_i32 (*__pos__) (B_IntegralD_i32, B_i32);
    $WORD (*real) (B_IntegralD_i32, B_i32, B_Real);
    $WORD (*imag) (B_IntegralD_i32, B_i32, B_Real);
    $WORD (*__abs__) (B_IntegralD_i32, B_i32, B_Real);
    B_i32 (*conjugate) (B_IntegralD_i32, B_i32);
    B_float (*__float__) (B_IntegralD_i32, B_i32);
    $WORD (*__trunc__) (B_IntegralD_i32, B_i32, B_Integral);
    $WORD (*__floor__) (B_IntegralD_i32, B_i32, B_Integral);
    $WORD (*__ceil__) (B_IntegralD_i32, B_i32, B_Integral);
    B_i32 (*__round__) (B_IntegralD_i32, B_i32, B_int);
    $WORD (*numerator) (B_IntegralD_i32, B_i32, B_Integral);
    $WORD (*denominator) (B_IntegralD_i32, B_i32, B_Integral);
    B_int (*__int__) (B_IntegralD_i32, B_i32);
    B_int (*__index__) (B_IntegralD_i32, B_i32);
    B_tuple (*__divmod__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__floordiv__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__mod__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__ifloordiv__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__imod__) (B_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__lshift__) (B_IntegralD_i32, B_i32, B_int);
    B_i32 (*__rshift__) (B_IntegralD_i32, B_i32, B_int);
    B_i32 (*__ilshift__) (B_IntegralD_i32, B_i32, B_int);
    B_i32 (*__irshift__) (B_IntegralD_i32, B_i32, B_int);
    B_i32 (*__invert__) (B_IntegralD_i32, B_i32);
};
struct B_IntegralD_i32 {
    struct B_IntegralD_i32G_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralD_i32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_IntegralD_i32, B_Integral);
    void (*__serialize__) (B_MinusD_IntegralD_i32, $Serial$state);
    B_MinusD_IntegralD_i32 (*__deserialize__) (B_MinusD_IntegralD_i32, $Serial$state);
    B_bool (*__bool__) (B_MinusD_IntegralD_i32);
    B_str (*__str__) (B_MinusD_IntegralD_i32);
    B_str (*__repr__) (B_MinusD_IntegralD_i32);
    B_i32 (*__sub__) (B_MinusD_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__isub__) (B_MinusD_IntegralD_i32, B_i32, B_i32);
};
struct B_MinusD_IntegralD_i32 {
    struct B_MinusD_IntegralD_i32G_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralD_i32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_IntegralD_i32, B_Integral);
    void (*__serialize__) (B_LogicalD_IntegralD_i32, $Serial$state);
    B_LogicalD_IntegralD_i32 (*__deserialize__) (B_LogicalD_IntegralD_i32, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_IntegralD_i32);
    B_str (*__str__) (B_LogicalD_IntegralD_i32);
    B_str (*__repr__) (B_LogicalD_IntegralD_i32);
    B_i32 (*__and__) (B_LogicalD_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__or__) (B_LogicalD_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__xor__) (B_LogicalD_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__iand__) (B_LogicalD_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__ior__) (B_LogicalD_IntegralD_i32, B_i32, B_i32);
    B_i32 (*__ixor__) (B_LogicalD_IntegralD_i32, B_i32, B_i32);
};
struct B_LogicalD_IntegralD_i32 {
    struct B_LogicalD_IntegralD_i32G_class *$class;
    B_Integral W_Integral;
};
struct B_DivD_i32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_i32);
    void (*__serialize__) (B_DivD_i32, $Serial$state);
    B_DivD_i32 (*__deserialize__) (B_DivD_i32, $Serial$state);
    B_bool (*__bool__) (B_DivD_i32);
    B_str (*__str__) (B_DivD_i32);
    B_str (*__repr__) (B_DivD_i32);
    B_float (*__truediv__) (B_DivD_i32, B_i32, B_i32);
    B_float (*__itruediv__) (B_DivD_i32, B_i32, B_i32);
};
struct B_DivD_i32 {
    struct B_DivD_i32G_class *$class;
};
struct B_OrdD_i32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_i32);
    void (*__serialize__) (B_OrdD_i32, $Serial$state);
    B_OrdD_i32 (*__deserialize__) (B_OrdD_i32, $Serial$state);
    B_bool (*__bool__) (B_OrdD_i32);
    B_str (*__str__) (B_OrdD_i32);
    B_str (*__repr__) (B_OrdD_i32);
    B_bool (*__eq__) (B_OrdD_i32, B_i32, B_i32);
    B_bool (*__ne__) (B_OrdD_i32, B_i32, B_i32);
    B_bool (*__lt__) (B_OrdD_i32, B_i32, B_i32);
    B_bool (*__le__) (B_OrdD_i32, B_i32, B_i32);
    B_bool (*__gt__) (B_OrdD_i32, B_i32, B_i32);
    B_bool (*__ge__) (B_OrdD_i32, B_i32, B_i32);
};
struct B_OrdD_i32 {
    struct B_OrdD_i32G_class *$class;
};
struct B_HashableD_i32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_i32);
    void (*__serialize__) (B_HashableD_i32, $Serial$state);
    B_HashableD_i32 (*__deserialize__) (B_HashableD_i32, $Serial$state);
    B_bool (*__bool__) (B_HashableD_i32);
    B_str (*__str__) (B_HashableD_i32);
    B_str (*__repr__) (B_HashableD_i32);
    B_bool (*__eq__) (B_HashableD_i32, B_i32, B_i32);
    B_bool (*__ne__) (B_HashableD_i32, B_i32, B_i32);
    B_int (*__hash__) (B_HashableD_i32, B_i32);
};
struct B_HashableD_i32 {
    struct B_HashableD_i32G_class *$class;
};
struct B_IntegralD_i16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IntegralD_i16);
    void (*__serialize__) (B_IntegralD_i16, $Serial$state);
    B_IntegralD_i16 (*__deserialize__) (B_IntegralD_i16, $Serial$state);
    B_bool (*__bool__) (B_IntegralD_i16);
    B_str (*__str__) (B_IntegralD_i16);
    B_str (*__repr__) (B_IntegralD_i16);
    B_i16 (*__add__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__iadd__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__mul__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__imul__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__fromatom__) (B_IntegralD_i16, B_atom);
    B_complex (*__complx__) (B_IntegralD_i16, B_i16);
    B_i16 (*__pow__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__ipow__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__neg__) (B_IntegralD_i16, B_i16);
    B_i16 (*__pos__) (B_IntegralD_i16, B_i16);
    $WORD (*real) (B_IntegralD_i16, B_i16, B_Real);
    $WORD (*imag) (B_IntegralD_i16, B_i16, B_Real);
    $WORD (*__abs__) (B_IntegralD_i16, B_i16, B_Real);
    B_i16 (*conjugate) (B_IntegralD_i16, B_i16);
    B_float (*__float__) (B_IntegralD_i16, B_i16);
    $WORD (*__trunc__) (B_IntegralD_i16, B_i16, B_Integral);
    $WORD (*__floor__) (B_IntegralD_i16, B_i16, B_Integral);
    $WORD (*__ceil__) (B_IntegralD_i16, B_i16, B_Integral);
    B_i16 (*__round__) (B_IntegralD_i16, B_i16, B_int);
    $WORD (*numerator) (B_IntegralD_i16, B_i16, B_Integral);
    $WORD (*denominator) (B_IntegralD_i16, B_i16, B_Integral);
    B_int (*__int__) (B_IntegralD_i16, B_i16);
    B_int (*__index__) (B_IntegralD_i16, B_i16);
    B_tuple (*__divmod__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__floordiv__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__mod__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__ifloordiv__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__imod__) (B_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__lshift__) (B_IntegralD_i16, B_i16, B_int);
    B_i16 (*__rshift__) (B_IntegralD_i16, B_i16, B_int);
    B_i16 (*__ilshift__) (B_IntegralD_i16, B_i16, B_int);
    B_i16 (*__irshift__) (B_IntegralD_i16, B_i16, B_int);
    B_i16 (*__invert__) (B_IntegralD_i16, B_i16);
};
struct B_IntegralD_i16 {
    struct B_IntegralD_i16G_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralD_i16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_IntegralD_i16, B_Integral);
    void (*__serialize__) (B_MinusD_IntegralD_i16, $Serial$state);
    B_MinusD_IntegralD_i16 (*__deserialize__) (B_MinusD_IntegralD_i16, $Serial$state);
    B_bool (*__bool__) (B_MinusD_IntegralD_i16);
    B_str (*__str__) (B_MinusD_IntegralD_i16);
    B_str (*__repr__) (B_MinusD_IntegralD_i16);
    B_i16 (*__sub__) (B_MinusD_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__isub__) (B_MinusD_IntegralD_i16, B_i16, B_i16);
};
struct B_MinusD_IntegralD_i16 {
    struct B_MinusD_IntegralD_i16G_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralD_i16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_IntegralD_i16, B_Integral);
    void (*__serialize__) (B_LogicalD_IntegralD_i16, $Serial$state);
    B_LogicalD_IntegralD_i16 (*__deserialize__) (B_LogicalD_IntegralD_i16, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_IntegralD_i16);
    B_str (*__str__) (B_LogicalD_IntegralD_i16);
    B_str (*__repr__) (B_LogicalD_IntegralD_i16);
    B_i16 (*__and__) (B_LogicalD_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__or__) (B_LogicalD_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__xor__) (B_LogicalD_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__iand__) (B_LogicalD_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__ior__) (B_LogicalD_IntegralD_i16, B_i16, B_i16);
    B_i16 (*__ixor__) (B_LogicalD_IntegralD_i16, B_i16, B_i16);
};
struct B_LogicalD_IntegralD_i16 {
    struct B_LogicalD_IntegralD_i16G_class *$class;
    B_Integral W_Integral;
};
struct B_DivD_i16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_i16);
    void (*__serialize__) (B_DivD_i16, $Serial$state);
    B_DivD_i16 (*__deserialize__) (B_DivD_i16, $Serial$state);
    B_bool (*__bool__) (B_DivD_i16);
    B_str (*__str__) (B_DivD_i16);
    B_str (*__repr__) (B_DivD_i16);
    B_float (*__truediv__) (B_DivD_i16, B_i16, B_i16);
    B_float (*__itruediv__) (B_DivD_i16, B_i16, B_i16);
};
struct B_DivD_i16 {
    struct B_DivD_i16G_class *$class;
};
struct B_OrdD_i16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_i16);
    void (*__serialize__) (B_OrdD_i16, $Serial$state);
    B_OrdD_i16 (*__deserialize__) (B_OrdD_i16, $Serial$state);
    B_bool (*__bool__) (B_OrdD_i16);
    B_str (*__str__) (B_OrdD_i16);
    B_str (*__repr__) (B_OrdD_i16);
    B_bool (*__eq__) (B_OrdD_i16, B_i16, B_i16);
    B_bool (*__ne__) (B_OrdD_i16, B_i16, B_i16);
    B_bool (*__lt__) (B_OrdD_i16, B_i16, B_i16);
    B_bool (*__le__) (B_OrdD_i16, B_i16, B_i16);
    B_bool (*__gt__) (B_OrdD_i16, B_i16, B_i16);
    B_bool (*__ge__) (B_OrdD_i16, B_i16, B_i16);
};
struct B_OrdD_i16 {
    struct B_OrdD_i16G_class *$class;
};
struct B_HashableD_i16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_i16);
    void (*__serialize__) (B_HashableD_i16, $Serial$state);
    B_HashableD_i16 (*__deserialize__) (B_HashableD_i16, $Serial$state);
    B_bool (*__bool__) (B_HashableD_i16);
    B_str (*__str__) (B_HashableD_i16);
    B_str (*__repr__) (B_HashableD_i16);
    B_bool (*__eq__) (B_HashableD_i16, B_i16, B_i16);
    B_bool (*__ne__) (B_HashableD_i16, B_i16, B_i16);
    B_int (*__hash__) (B_HashableD_i16, B_i16);
};
struct B_HashableD_i16 {
    struct B_HashableD_i16G_class *$class;
};
struct B_IntegralD_u64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IntegralD_u64);
    void (*__serialize__) (B_IntegralD_u64, $Serial$state);
    B_IntegralD_u64 (*__deserialize__) (B_IntegralD_u64, $Serial$state);
    B_bool (*__bool__) (B_IntegralD_u64);
    B_str (*__str__) (B_IntegralD_u64);
    B_str (*__repr__) (B_IntegralD_u64);
    B_u64 (*__add__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__iadd__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__mul__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__imul__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__fromatom__) (B_IntegralD_u64, B_atom);
    B_complex (*__complx__) (B_IntegralD_u64, B_u64);
    B_u64 (*__pow__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__ipow__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__neg__) (B_IntegralD_u64, B_u64);
    B_u64 (*__pos__) (B_IntegralD_u64, B_u64);
    $WORD (*real) (B_IntegralD_u64, B_u64, B_Real);
    $WORD (*imag) (B_IntegralD_u64, B_u64, B_Real);
    $WORD (*__abs__) (B_IntegralD_u64, B_u64, B_Real);
    B_u64 (*conjugate) (B_IntegralD_u64, B_u64);
    B_float (*__float__) (B_IntegralD_u64, B_u64);
    $WORD (*__trunc__) (B_IntegralD_u64, B_u64, B_Integral);
    $WORD (*__floor__) (B_IntegralD_u64, B_u64, B_Integral);
    $WORD (*__ceil__) (B_IntegralD_u64, B_u64, B_Integral);
    B_u64 (*__round__) (B_IntegralD_u64, B_u64, B_int);
    $WORD (*numerator) (B_IntegralD_u64, B_u64, B_Integral);
    $WORD (*denominator) (B_IntegralD_u64, B_u64, B_Integral);
    B_int (*__int__) (B_IntegralD_u64, B_u64);
    B_int (*__index__) (B_IntegralD_u64, B_u64);
    B_tuple (*__divmod__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__floordiv__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__mod__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__ifloordiv__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__imod__) (B_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__lshift__) (B_IntegralD_u64, B_u64, B_int);
    B_u64 (*__rshift__) (B_IntegralD_u64, B_u64, B_int);
    B_u64 (*__ilshift__) (B_IntegralD_u64, B_u64, B_int);
    B_u64 (*__irshift__) (B_IntegralD_u64, B_u64, B_int);
    B_u64 (*__invert__) (B_IntegralD_u64, B_u64);
};
struct B_IntegralD_u64 {
    struct B_IntegralD_u64G_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralD_u64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_IntegralD_u64, B_Integral);
    void (*__serialize__) (B_MinusD_IntegralD_u64, $Serial$state);
    B_MinusD_IntegralD_u64 (*__deserialize__) (B_MinusD_IntegralD_u64, $Serial$state);
    B_bool (*__bool__) (B_MinusD_IntegralD_u64);
    B_str (*__str__) (B_MinusD_IntegralD_u64);
    B_str (*__repr__) (B_MinusD_IntegralD_u64);
    B_u64 (*__sub__) (B_MinusD_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__isub__) (B_MinusD_IntegralD_u64, B_u64, B_u64);
};
struct B_MinusD_IntegralD_u64 {
    struct B_MinusD_IntegralD_u64G_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralD_u64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_IntegralD_u64, B_Integral);
    void (*__serialize__) (B_LogicalD_IntegralD_u64, $Serial$state);
    B_LogicalD_IntegralD_u64 (*__deserialize__) (B_LogicalD_IntegralD_u64, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_IntegralD_u64);
    B_str (*__str__) (B_LogicalD_IntegralD_u64);
    B_str (*__repr__) (B_LogicalD_IntegralD_u64);
    B_u64 (*__and__) (B_LogicalD_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__or__) (B_LogicalD_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__xor__) (B_LogicalD_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__iand__) (B_LogicalD_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__ior__) (B_LogicalD_IntegralD_u64, B_u64, B_u64);
    B_u64 (*__ixor__) (B_LogicalD_IntegralD_u64, B_u64, B_u64);
};
struct B_LogicalD_IntegralD_u64 {
    struct B_LogicalD_IntegralD_u64G_class *$class;
    B_Integral W_Integral;
};
struct B_DivD_u64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_u64);
    void (*__serialize__) (B_DivD_u64, $Serial$state);
    B_DivD_u64 (*__deserialize__) (B_DivD_u64, $Serial$state);
    B_bool (*__bool__) (B_DivD_u64);
    B_str (*__str__) (B_DivD_u64);
    B_str (*__repr__) (B_DivD_u64);
    B_float (*__truediv__) (B_DivD_u64, B_u64, B_u64);
    B_float (*__itruediv__) (B_DivD_u64, B_u64, B_u64);
};
struct B_DivD_u64 {
    struct B_DivD_u64G_class *$class;
};
struct B_OrdD_u64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_u64);
    void (*__serialize__) (B_OrdD_u64, $Serial$state);
    B_OrdD_u64 (*__deserialize__) (B_OrdD_u64, $Serial$state);
    B_bool (*__bool__) (B_OrdD_u64);
    B_str (*__str__) (B_OrdD_u64);
    B_str (*__repr__) (B_OrdD_u64);
    B_bool (*__eq__) (B_OrdD_u64, B_u64, B_u64);
    B_bool (*__ne__) (B_OrdD_u64, B_u64, B_u64);
    B_bool (*__lt__) (B_OrdD_u64, B_u64, B_u64);
    B_bool (*__le__) (B_OrdD_u64, B_u64, B_u64);
    B_bool (*__gt__) (B_OrdD_u64, B_u64, B_u64);
    B_bool (*__ge__) (B_OrdD_u64, B_u64, B_u64);
};
struct B_OrdD_u64 {
    struct B_OrdD_u64G_class *$class;
};
struct B_HashableD_u64G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_u64);
    void (*__serialize__) (B_HashableD_u64, $Serial$state);
    B_HashableD_u64 (*__deserialize__) (B_HashableD_u64, $Serial$state);
    B_bool (*__bool__) (B_HashableD_u64);
    B_str (*__str__) (B_HashableD_u64);
    B_str (*__repr__) (B_HashableD_u64);
    B_bool (*__eq__) (B_HashableD_u64, B_u64, B_u64);
    B_bool (*__ne__) (B_HashableD_u64, B_u64, B_u64);
    B_int (*__hash__) (B_HashableD_u64, B_u64);
};
struct B_HashableD_u64 {
    struct B_HashableD_u64G_class *$class;
};
struct B_IntegralD_u32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IntegralD_u32);
    void (*__serialize__) (B_IntegralD_u32, $Serial$state);
    B_IntegralD_u32 (*__deserialize__) (B_IntegralD_u32, $Serial$state);
    B_bool (*__bool__) (B_IntegralD_u32);
    B_str (*__str__) (B_IntegralD_u32);
    B_str (*__repr__) (B_IntegralD_u32);
    B_u32 (*__add__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__iadd__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__mul__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__imul__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__fromatom__) (B_IntegralD_u32, B_atom);
    B_complex (*__complx__) (B_IntegralD_u32, B_u32);
    B_u32 (*__pow__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__ipow__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__neg__) (B_IntegralD_u32, B_u32);
    B_u32 (*__pos__) (B_IntegralD_u32, B_u32);
    $WORD (*real) (B_IntegralD_u32, B_u32, B_Real);
    $WORD (*imag) (B_IntegralD_u32, B_u32, B_Real);
    $WORD (*__abs__) (B_IntegralD_u32, B_u32, B_Real);
    B_u32 (*conjugate) (B_IntegralD_u32, B_u32);
    B_float (*__float__) (B_IntegralD_u32, B_u32);
    $WORD (*__trunc__) (B_IntegralD_u32, B_u32, B_Integral);
    $WORD (*__floor__) (B_IntegralD_u32, B_u32, B_Integral);
    $WORD (*__ceil__) (B_IntegralD_u32, B_u32, B_Integral);
    B_u32 (*__round__) (B_IntegralD_u32, B_u32, B_int);
    $WORD (*numerator) (B_IntegralD_u32, B_u32, B_Integral);
    $WORD (*denominator) (B_IntegralD_u32, B_u32, B_Integral);
    B_int (*__int__) (B_IntegralD_u32, B_u32);
    B_int (*__index__) (B_IntegralD_u32, B_u32);
    B_tuple (*__divmod__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__floordiv__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__mod__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__ifloordiv__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__imod__) (B_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__lshift__) (B_IntegralD_u32, B_u32, B_int);
    B_u32 (*__rshift__) (B_IntegralD_u32, B_u32, B_int);
    B_u32 (*__ilshift__) (B_IntegralD_u32, B_u32, B_int);
    B_u32 (*__irshift__) (B_IntegralD_u32, B_u32, B_int);
    B_u32 (*__invert__) (B_IntegralD_u32, B_u32);
};
struct B_IntegralD_u32 {
    struct B_IntegralD_u32G_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralD_u32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_IntegralD_u32, B_Integral);
    void (*__serialize__) (B_MinusD_IntegralD_u32, $Serial$state);
    B_MinusD_IntegralD_u32 (*__deserialize__) (B_MinusD_IntegralD_u32, $Serial$state);
    B_bool (*__bool__) (B_MinusD_IntegralD_u32);
    B_str (*__str__) (B_MinusD_IntegralD_u32);
    B_str (*__repr__) (B_MinusD_IntegralD_u32);
    B_u32 (*__sub__) (B_MinusD_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__isub__) (B_MinusD_IntegralD_u32, B_u32, B_u32);
};
struct B_MinusD_IntegralD_u32 {
    struct B_MinusD_IntegralD_u32G_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralD_u32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_IntegralD_u32, B_Integral);
    void (*__serialize__) (B_LogicalD_IntegralD_u32, $Serial$state);
    B_LogicalD_IntegralD_u32 (*__deserialize__) (B_LogicalD_IntegralD_u32, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_IntegralD_u32);
    B_str (*__str__) (B_LogicalD_IntegralD_u32);
    B_str (*__repr__) (B_LogicalD_IntegralD_u32);
    B_u32 (*__and__) (B_LogicalD_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__or__) (B_LogicalD_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__xor__) (B_LogicalD_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__iand__) (B_LogicalD_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__ior__) (B_LogicalD_IntegralD_u32, B_u32, B_u32);
    B_u32 (*__ixor__) (B_LogicalD_IntegralD_u32, B_u32, B_u32);
};
struct B_LogicalD_IntegralD_u32 {
    struct B_LogicalD_IntegralD_u32G_class *$class;
    B_Integral W_Integral;
};
struct B_DivD_u32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_u32);
    void (*__serialize__) (B_DivD_u32, $Serial$state);
    B_DivD_u32 (*__deserialize__) (B_DivD_u32, $Serial$state);
    B_bool (*__bool__) (B_DivD_u32);
    B_str (*__str__) (B_DivD_u32);
    B_str (*__repr__) (B_DivD_u32);
    B_float (*__truediv__) (B_DivD_u32, B_u32, B_u32);
    B_float (*__itruediv__) (B_DivD_u32, B_u32, B_u32);
};
struct B_DivD_u32 {
    struct B_DivD_u32G_class *$class;
};
struct B_OrdD_u32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_u32);
    void (*__serialize__) (B_OrdD_u32, $Serial$state);
    B_OrdD_u32 (*__deserialize__) (B_OrdD_u32, $Serial$state);
    B_bool (*__bool__) (B_OrdD_u32);
    B_str (*__str__) (B_OrdD_u32);
    B_str (*__repr__) (B_OrdD_u32);
    B_bool (*__eq__) (B_OrdD_u32, B_u32, B_u32);
    B_bool (*__ne__) (B_OrdD_u32, B_u32, B_u32);
    B_bool (*__lt__) (B_OrdD_u32, B_u32, B_u32);
    B_bool (*__le__) (B_OrdD_u32, B_u32, B_u32);
    B_bool (*__gt__) (B_OrdD_u32, B_u32, B_u32);
    B_bool (*__ge__) (B_OrdD_u32, B_u32, B_u32);
};
struct B_OrdD_u32 {
    struct B_OrdD_u32G_class *$class;
};
struct B_HashableD_u32G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_u32);
    void (*__serialize__) (B_HashableD_u32, $Serial$state);
    B_HashableD_u32 (*__deserialize__) (B_HashableD_u32, $Serial$state);
    B_bool (*__bool__) (B_HashableD_u32);
    B_str (*__str__) (B_HashableD_u32);
    B_str (*__repr__) (B_HashableD_u32);
    B_bool (*__eq__) (B_HashableD_u32, B_u32, B_u32);
    B_bool (*__ne__) (B_HashableD_u32, B_u32, B_u32);
    B_int (*__hash__) (B_HashableD_u32, B_u32);
};
struct B_HashableD_u32 {
    struct B_HashableD_u32G_class *$class;
};
struct B_IntegralD_u16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IntegralD_u16);
    void (*__serialize__) (B_IntegralD_u16, $Serial$state);
    B_IntegralD_u16 (*__deserialize__) (B_IntegralD_u16, $Serial$state);
    B_bool (*__bool__) (B_IntegralD_u16);
    B_str (*__str__) (B_IntegralD_u16);
    B_str (*__repr__) (B_IntegralD_u16);
    B_u16 (*__add__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__iadd__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__mul__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__imul__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__fromatom__) (B_IntegralD_u16, B_atom);
    B_complex (*__complx__) (B_IntegralD_u16, B_u16);
    B_u16 (*__pow__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__ipow__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__neg__) (B_IntegralD_u16, B_u16);
    B_u16 (*__pos__) (B_IntegralD_u16, B_u16);
    $WORD (*real) (B_IntegralD_u16, B_u16, B_Real);
    $WORD (*imag) (B_IntegralD_u16, B_u16, B_Real);
    $WORD (*__abs__) (B_IntegralD_u16, B_u16, B_Real);
    B_u16 (*conjugate) (B_IntegralD_u16, B_u16);
    B_float (*__float__) (B_IntegralD_u16, B_u16);
    $WORD (*__trunc__) (B_IntegralD_u16, B_u16, B_Integral);
    $WORD (*__floor__) (B_IntegralD_u16, B_u16, B_Integral);
    $WORD (*__ceil__) (B_IntegralD_u16, B_u16, B_Integral);
    B_u16 (*__round__) (B_IntegralD_u16, B_u16, B_int);
    $WORD (*numerator) (B_IntegralD_u16, B_u16, B_Integral);
    $WORD (*denominator) (B_IntegralD_u16, B_u16, B_Integral);
    B_int (*__int__) (B_IntegralD_u16, B_u16);
    B_int (*__index__) (B_IntegralD_u16, B_u16);
    B_tuple (*__divmod__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__floordiv__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__mod__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__ifloordiv__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__imod__) (B_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__lshift__) (B_IntegralD_u16, B_u16, B_int);
    B_u16 (*__rshift__) (B_IntegralD_u16, B_u16, B_int);
    B_u16 (*__ilshift__) (B_IntegralD_u16, B_u16, B_int);
    B_u16 (*__irshift__) (B_IntegralD_u16, B_u16, B_int);
    B_u16 (*__invert__) (B_IntegralD_u16, B_u16);
};
struct B_IntegralD_u16 {
    struct B_IntegralD_u16G_class *$class;
    B_Minus W_Minus;
    B_Logical W_Logical;
};
struct B_MinusD_IntegralD_u16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_IntegralD_u16, B_Integral);
    void (*__serialize__) (B_MinusD_IntegralD_u16, $Serial$state);
    B_MinusD_IntegralD_u16 (*__deserialize__) (B_MinusD_IntegralD_u16, $Serial$state);
    B_bool (*__bool__) (B_MinusD_IntegralD_u16);
    B_str (*__str__) (B_MinusD_IntegralD_u16);
    B_str (*__repr__) (B_MinusD_IntegralD_u16);
    B_u16 (*__sub__) (B_MinusD_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__isub__) (B_MinusD_IntegralD_u16, B_u16, B_u16);
};
struct B_MinusD_IntegralD_u16 {
    struct B_MinusD_IntegralD_u16G_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_Rational W_Rational;
    B_Integral W_Integral;
};
struct B_LogicalD_IntegralD_u16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_IntegralD_u16, B_Integral);
    void (*__serialize__) (B_LogicalD_IntegralD_u16, $Serial$state);
    B_LogicalD_IntegralD_u16 (*__deserialize__) (B_LogicalD_IntegralD_u16, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_IntegralD_u16);
    B_str (*__str__) (B_LogicalD_IntegralD_u16);
    B_str (*__repr__) (B_LogicalD_IntegralD_u16);
    B_u16 (*__and__) (B_LogicalD_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__or__) (B_LogicalD_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__xor__) (B_LogicalD_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__iand__) (B_LogicalD_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__ior__) (B_LogicalD_IntegralD_u16, B_u16, B_u16);
    B_u16 (*__ixor__) (B_LogicalD_IntegralD_u16, B_u16, B_u16);
};
struct B_LogicalD_IntegralD_u16 {
    struct B_LogicalD_IntegralD_u16G_class *$class;
    B_Integral W_Integral;
};
struct B_DivD_u16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_u16);
    void (*__serialize__) (B_DivD_u16, $Serial$state);
    B_DivD_u16 (*__deserialize__) (B_DivD_u16, $Serial$state);
    B_bool (*__bool__) (B_DivD_u16);
    B_str (*__str__) (B_DivD_u16);
    B_str (*__repr__) (B_DivD_u16);
    B_float (*__truediv__) (B_DivD_u16, B_u16, B_u16);
    B_float (*__itruediv__) (B_DivD_u16, B_u16, B_u16);
};
struct B_DivD_u16 {
    struct B_DivD_u16G_class *$class;
};
struct B_OrdD_u16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_u16);
    void (*__serialize__) (B_OrdD_u16, $Serial$state);
    B_OrdD_u16 (*__deserialize__) (B_OrdD_u16, $Serial$state);
    B_bool (*__bool__) (B_OrdD_u16);
    B_str (*__str__) (B_OrdD_u16);
    B_str (*__repr__) (B_OrdD_u16);
    B_bool (*__eq__) (B_OrdD_u16, B_u16, B_u16);
    B_bool (*__ne__) (B_OrdD_u16, B_u16, B_u16);
    B_bool (*__lt__) (B_OrdD_u16, B_u16, B_u16);
    B_bool (*__le__) (B_OrdD_u16, B_u16, B_u16);
    B_bool (*__gt__) (B_OrdD_u16, B_u16, B_u16);
    B_bool (*__ge__) (B_OrdD_u16, B_u16, B_u16);
};
struct B_OrdD_u16 {
    struct B_OrdD_u16G_class *$class;
};
struct B_HashableD_u16G_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_u16);
    void (*__serialize__) (B_HashableD_u16, $Serial$state);
    B_HashableD_u16 (*__deserialize__) (B_HashableD_u16, $Serial$state);
    B_bool (*__bool__) (B_HashableD_u16);
    B_str (*__str__) (B_HashableD_u16);
    B_str (*__repr__) (B_HashableD_u16);
    B_bool (*__eq__) (B_HashableD_u16, B_u16, B_u16);
    B_bool (*__ne__) (B_HashableD_u16, B_u16, B_u16);
    B_int (*__hash__) (B_HashableD_u16, B_u16);
};
struct B_HashableD_u16 {
    struct B_HashableD_u16G_class *$class;
};
struct B_RealFloatD_floatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_RealFloatD_float);
    void (*__serialize__) (B_RealFloatD_float, $Serial$state);
    B_RealFloatD_float (*__deserialize__) (B_RealFloatD_float, $Serial$state);
    B_bool (*__bool__) (B_RealFloatD_float);
    B_str (*__str__) (B_RealFloatD_float);
    B_str (*__repr__) (B_RealFloatD_float);
    B_float (*__add__) (B_RealFloatD_float, B_float, B_float);
    B_float (*__iadd__) (B_RealFloatD_float, B_float, B_float);
    B_float (*__mul__) (B_RealFloatD_float, B_float, B_float);
    B_float (*__imul__) (B_RealFloatD_float, B_float, B_float);
    B_float (*__fromatom__) (B_RealFloatD_float, B_atom);
    B_complex (*__complx__) (B_RealFloatD_float, B_float);
    B_float (*__pow__) (B_RealFloatD_float, B_float, B_float);
    B_float (*__ipow__) (B_RealFloatD_float, B_float, B_float);
    B_float (*__neg__) (B_RealFloatD_float, B_float);
    B_float (*__pos__) (B_RealFloatD_float, B_float);
    $WORD (*real) (B_RealFloatD_float, B_float, B_Real);
    $WORD (*imag) (B_RealFloatD_float, B_float, B_Real);
    $WORD (*__abs__) (B_RealFloatD_float, B_float, B_Real);
    B_float (*conjugate) (B_RealFloatD_float, B_float);
    B_float (*__float__) (B_RealFloatD_float, B_float);
    $WORD (*__trunc__) (B_RealFloatD_float, B_float, B_Integral);
    $WORD (*__floor__) (B_RealFloatD_float, B_float, B_Integral);
    $WORD (*__ceil__) (B_RealFloatD_float, B_float, B_Integral);
    B_float (*__round__) (B_RealFloatD_float, B_float, B_int);
};
struct B_RealFloatD_float {
    struct B_RealFloatD_floatG_class *$class;
    B_Minus W_Minus;
};
struct B_MinusD_RealFloatD_floatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_RealFloatD_float, B_RealFloat);
    void (*__serialize__) (B_MinusD_RealFloatD_float, $Serial$state);
    B_MinusD_RealFloatD_float (*__deserialize__) (B_MinusD_RealFloatD_float, $Serial$state);
    B_bool (*__bool__) (B_MinusD_RealFloatD_float);
    B_str (*__str__) (B_MinusD_RealFloatD_float);
    B_str (*__repr__) (B_MinusD_RealFloatD_float);
    B_float (*__sub__) (B_MinusD_RealFloatD_float, B_float, B_float);
    B_float (*__isub__) (B_MinusD_RealFloatD_float, B_float, B_float);
};
struct B_MinusD_RealFloatD_float {
    struct B_MinusD_RealFloatD_floatG_class *$class;
    B_Number W_Number;
    B_Real W_Real;
    B_RealFloat W_RealFloat;
};
struct B_DivD_floatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_float);
    void (*__serialize__) (B_DivD_float, $Serial$state);
    B_DivD_float (*__deserialize__) (B_DivD_float, $Serial$state);
    B_bool (*__bool__) (B_DivD_float);
    B_str (*__str__) (B_DivD_float);
    B_str (*__repr__) (B_DivD_float);
    B_float (*__truediv__) (B_DivD_float, B_float, B_float);
    B_float (*__itruediv__) (B_DivD_float, B_float, B_float);
};
struct B_DivD_float {
    struct B_DivD_floatG_class *$class;
};
struct B_OrdD_floatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_float);
    void (*__serialize__) (B_OrdD_float, $Serial$state);
    B_OrdD_float (*__deserialize__) (B_OrdD_float, $Serial$state);
    B_bool (*__bool__) (B_OrdD_float);
    B_str (*__str__) (B_OrdD_float);
    B_str (*__repr__) (B_OrdD_float);
    B_bool (*__eq__) (B_OrdD_float, B_float, B_float);
    B_bool (*__ne__) (B_OrdD_float, B_float, B_float);
    B_bool (*__lt__) (B_OrdD_float, B_float, B_float);
    B_bool (*__le__) (B_OrdD_float, B_float, B_float);
    B_bool (*__gt__) (B_OrdD_float, B_float, B_float);
    B_bool (*__ge__) (B_OrdD_float, B_float, B_float);
};
struct B_OrdD_float {
    struct B_OrdD_floatG_class *$class;
};
struct B_HashableD_floatG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_float);
    void (*__serialize__) (B_HashableD_float, $Serial$state);
    B_HashableD_float (*__deserialize__) (B_HashableD_float, $Serial$state);
    B_bool (*__bool__) (B_HashableD_float);
    B_str (*__str__) (B_HashableD_float);
    B_str (*__repr__) (B_HashableD_float);
    B_bool (*__eq__) (B_HashableD_float, B_float, B_float);
    B_bool (*__ne__) (B_HashableD_float, B_float, B_float);
    B_int (*__hash__) (B_HashableD_float, B_float);
};
struct B_HashableD_float {
    struct B_HashableD_floatG_class *$class;
};
struct B_NumberD_complexG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_NumberD_complex);
    void (*__serialize__) (B_NumberD_complex, $Serial$state);
    B_NumberD_complex (*__deserialize__) (B_NumberD_complex, $Serial$state);
    B_bool (*__bool__) (B_NumberD_complex);
    B_str (*__str__) (B_NumberD_complex);
    B_str (*__repr__) (B_NumberD_complex);
    B_complex (*__add__) (B_NumberD_complex, B_complex, B_complex);
    B_complex (*__iadd__) (B_NumberD_complex, B_complex, B_complex);
    B_complex (*__mul__) (B_NumberD_complex, B_complex, B_complex);
    B_complex (*__imul__) (B_NumberD_complex, B_complex, B_complex);
    B_complex (*__fromatom__) (B_NumberD_complex, B_atom);
    B_complex (*__complx__) (B_NumberD_complex, B_complex);
    B_complex (*__pow__) (B_NumberD_complex, B_complex, B_complex);
    B_complex (*__ipow__) (B_NumberD_complex, B_complex, B_complex);
    B_complex (*__neg__) (B_NumberD_complex, B_complex);
    B_complex (*__pos__) (B_NumberD_complex, B_complex);
    $WORD (*real) (B_NumberD_complex, B_complex, B_Real);
    $WORD (*imag) (B_NumberD_complex, B_complex, B_Real);
    $WORD (*__abs__) (B_NumberD_complex, B_complex, B_Real);
    B_complex (*conjugate) (B_NumberD_complex, B_complex);
};
struct B_NumberD_complex {
    struct B_NumberD_complexG_class *$class;
    B_Minus W_Minus;
};
struct B_MinusD_NumberD_complexG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_NumberD_complex, B_Number);
    void (*__serialize__) (B_MinusD_NumberD_complex, $Serial$state);
    B_MinusD_NumberD_complex (*__deserialize__) (B_MinusD_NumberD_complex, $Serial$state);
    B_bool (*__bool__) (B_MinusD_NumberD_complex);
    B_str (*__str__) (B_MinusD_NumberD_complex);
    B_str (*__repr__) (B_MinusD_NumberD_complex);
    B_complex (*__sub__) (B_MinusD_NumberD_complex, B_complex, B_complex);
    B_complex (*__isub__) (B_MinusD_NumberD_complex, B_complex, B_complex);
};
struct B_MinusD_NumberD_complex {
    struct B_MinusD_NumberD_complexG_class *$class;
    B_Number W_Number;
};
struct B_DivD_complexG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_DivD_complex);
    void (*__serialize__) (B_DivD_complex, $Serial$state);
    B_DivD_complex (*__deserialize__) (B_DivD_complex, $Serial$state);
    B_bool (*__bool__) (B_DivD_complex);
    B_str (*__str__) (B_DivD_complex);
    B_str (*__repr__) (B_DivD_complex);
    B_complex (*__truediv__) (B_DivD_complex, B_complex, B_complex);
    B_complex (*__itruediv__) (B_DivD_complex, B_complex, B_complex);
};
struct B_DivD_complex {
    struct B_DivD_complexG_class *$class;
};
struct B_EqD_complexG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_EqD_complex);
    void (*__serialize__) (B_EqD_complex, $Serial$state);
    B_EqD_complex (*__deserialize__) (B_EqD_complex, $Serial$state);
    B_bool (*__bool__) (B_EqD_complex);
    B_str (*__str__) (B_EqD_complex);
    B_str (*__repr__) (B_EqD_complex);
    B_bool (*__eq__) (B_EqD_complex, B_complex, B_complex);
    B_bool (*__ne__) (B_EqD_complex, B_complex, B_complex);
};
struct B_EqD_complex {
    struct B_EqD_complexG_class *$class;
};
struct B_HashableD_complexG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_complex);
    void (*__serialize__) (B_HashableD_complex, $Serial$state);
    B_HashableD_complex (*__deserialize__) (B_HashableD_complex, $Serial$state);
    B_bool (*__bool__) (B_HashableD_complex);
    B_str (*__str__) (B_HashableD_complex);
    B_str (*__repr__) (B_HashableD_complex);
    B_bool (*__eq__) (B_HashableD_complex, B_complex, B_complex);
    B_bool (*__ne__) (B_HashableD_complex, B_complex, B_complex);
    B_int (*__hash__) (B_HashableD_complex, B_complex);
};
struct B_HashableD_complex {
    struct B_HashableD_complexG_class *$class;
};
struct B_IndexedG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Indexed, B_Eq);
    void (*__serialize__) (B_Indexed, $Serial$state);
    B_Indexed (*__deserialize__) (B_Indexed, $Serial$state);
    B_bool (*__bool__) (B_Indexed);
    B_str (*__str__) (B_Indexed);
    B_str (*__repr__) (B_Indexed);
    $WORD (*__getitem__) (B_Indexed, $WORD, $WORD);
    B_NoneType (*__setitem__) (B_Indexed, $WORD, $WORD, $WORD);
    B_NoneType (*__delitem__) (B_Indexed, $WORD, $WORD);
};
struct B_Indexed {
    struct B_IndexedG_class *$class;
    B_Eq W_EqD_AD_Indexed;
};
struct B_SliceableG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Sliceable);
    void (*__serialize__) (B_Sliceable, $Serial$state);
    B_Sliceable (*__deserialize__) (B_Sliceable, $Serial$state);
    B_bool (*__bool__) (B_Sliceable);
    B_str (*__str__) (B_Sliceable);
    B_str (*__repr__) (B_Sliceable);
    $WORD (*__getitem__) (B_Sliceable, $WORD, B_int);
    B_NoneType (*__setitem__) (B_Sliceable, $WORD, B_int, $WORD);
    B_NoneType (*__delitem__) (B_Sliceable, $WORD, B_int);
    $WORD (*__getslice__) (B_Sliceable, $WORD, B_slice);
    B_NoneType (*__setslice__) (B_Sliceable, $WORD, B_Iterable, B_slice, $WORD);
    B_NoneType (*__delslice__) (B_Sliceable, $WORD, B_slice);
};
struct B_Sliceable {
    struct B_SliceableG_class *$class;
    B_Eq W_EqD_AD_Indexed;
};
struct B_CollectionG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Collection);
    void (*__serialize__) (B_Collection, $Serial$state);
    B_Collection (*__deserialize__) (B_Collection, $Serial$state);
    B_bool (*__bool__) (B_Collection);
    B_str (*__str__) (B_Collection);
    B_str (*__repr__) (B_Collection);
    B_Iterator (*__iter__) (B_Collection, $WORD);
    $WORD (*__fromiter__) (B_Collection, B_Iterable, $WORD);
    B_int (*__len__) (B_Collection, $WORD);
};
struct B_Collection {
    struct B_CollectionG_class *$class;
};
struct B_ContainerG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Container, B_Eq);
    void (*__serialize__) (B_Container, $Serial$state);
    B_Container (*__deserialize__) (B_Container, $Serial$state);
    B_bool (*__bool__) (B_Container);
    B_str (*__str__) (B_Container);
    B_str (*__repr__) (B_Container);
    B_Iterator (*__iter__) (B_Container, $WORD);
    $WORD (*__fromiter__) (B_Container, B_Iterable, $WORD);
    B_int (*__len__) (B_Container, $WORD);
    B_bool (*__contains__) (B_Container, $WORD, $WORD);
    B_bool (*__containsnot__) (B_Container, $WORD, $WORD);
};
struct B_Container {
    struct B_ContainerG_class *$class;
    B_Eq W_EqD_AD_Container;
};
struct B_SequenceG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Sequence, B_Collection, B_Times);
    void (*__serialize__) (B_Sequence, $Serial$state);
    B_Sequence (*__deserialize__) (B_Sequence, $Serial$state);
    B_bool (*__bool__) (B_Sequence);
    B_str (*__str__) (B_Sequence);
    B_str (*__repr__) (B_Sequence);
    $WORD (*__getitem__) (B_Sequence, $WORD, B_int);
    B_NoneType (*__setitem__) (B_Sequence, $WORD, B_int, $WORD);
    B_NoneType (*__delitem__) (B_Sequence, $WORD, B_int);
    $WORD (*__getslice__) (B_Sequence, $WORD, B_slice);
    B_NoneType (*__setslice__) (B_Sequence, $WORD, B_Iterable, B_slice, $WORD);
    B_NoneType (*__delslice__) (B_Sequence, $WORD, B_slice);
    B_Iterator (*__reversed__) (B_Sequence, $WORD);
    B_NoneType (*insert) (B_Sequence, $WORD, B_int, $WORD);
    B_NoneType (*append) (B_Sequence, $WORD, $WORD);
    B_NoneType (*reverse) (B_Sequence, $WORD);
};
struct B_Sequence {
    struct B_SequenceG_class *$class;
    B_Eq W_EqD_AD_Indexed;
    B_Collection W_Collection;
    B_Times W_Times;
};
struct B_CollectionD_SequenceG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_CollectionD_Sequence, B_Sequence);
    void (*__serialize__) (B_CollectionD_Sequence, $Serial$state);
    B_CollectionD_Sequence (*__deserialize__) (B_CollectionD_Sequence, $Serial$state);
    B_bool (*__bool__) (B_CollectionD_Sequence);
    B_str (*__str__) (B_CollectionD_Sequence);
    B_str (*__repr__) (B_CollectionD_Sequence);
    B_Iterator (*__iter__) (B_CollectionD_Sequence, $WORD);
    $WORD (*__fromiter__) (B_CollectionD_Sequence, B_Iterable, $WORD);
    B_int (*__len__) (B_CollectionD_Sequence, $WORD);
};
struct B_CollectionD_Sequence {
    struct B_CollectionD_SequenceG_class *$class;
    B_Sequence W_Sequence;
};
struct B_TimesD_SequenceG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_TimesD_Sequence, B_Sequence);
    void (*__serialize__) (B_TimesD_Sequence, $Serial$state);
    B_TimesD_Sequence (*__deserialize__) (B_TimesD_Sequence, $Serial$state);
    B_bool (*__bool__) (B_TimesD_Sequence);
    B_str (*__str__) (B_TimesD_Sequence);
    B_str (*__repr__) (B_TimesD_Sequence);
    $WORD (*__add__) (B_TimesD_Sequence, $WORD, $WORD);
    $WORD (*__iadd__) (B_TimesD_Sequence, $WORD, $WORD);
    $WORD (*__mul__) (B_TimesD_Sequence, $WORD, B_int);
    $WORD (*__imul__) (B_TimesD_Sequence, $WORD, B_int);
};
struct B_TimesD_Sequence {
    struct B_TimesD_SequenceG_class *$class;
    B_Sequence W_Sequence;
};
struct B_MappingG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Mapping, B_Eq, B_Indexed);
    void (*__serialize__) (B_Mapping, $Serial$state);
    B_Mapping (*__deserialize__) (B_Mapping, $Serial$state);
    B_bool (*__bool__) (B_Mapping);
    B_str (*__str__) (B_Mapping);
    B_str (*__repr__) (B_Mapping);
    B_Iterator (*__iter__) (B_Mapping, $WORD);
    $WORD (*__fromiter__) (B_Mapping, B_Iterable, $WORD);
    B_int (*__len__) (B_Mapping, $WORD);
    B_bool (*__contains__) (B_Mapping, $WORD, $WORD);
    B_bool (*__containsnot__) (B_Mapping, $WORD, $WORD);
    $WORD (*get) (B_Mapping, $WORD, $WORD, $WORD);
    B_Iterator (*keys) (B_Mapping, $WORD);
    B_Iterator (*values) (B_Mapping, $WORD);
    B_Iterator (*items) (B_Mapping, $WORD);
    B_NoneType (*update) (B_Mapping, $WORD, B_Iterable, $WORD);
    B_tuple (*popitem) (B_Mapping, $WORD);
    B_NoneType (*setdefault) (B_Mapping, $WORD, $WORD, $WORD);
};
struct B_Mapping {
    struct B_MappingG_class *$class;
    B_Eq W_EqD_AD_Container;
    B_Eq W_EqD_AD_Mapping;
    B_Indexed W_Indexed;
};
struct B_IndexedD_MappingG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IndexedD_Mapping, B_Eq, B_Mapping);
    void (*__serialize__) (B_IndexedD_Mapping, $Serial$state);
    B_IndexedD_Mapping (*__deserialize__) (B_IndexedD_Mapping, $Serial$state);
    B_bool (*__bool__) (B_IndexedD_Mapping);
    B_str (*__str__) (B_IndexedD_Mapping);
    B_str (*__repr__) (B_IndexedD_Mapping);
    $WORD (*__getitem__) (B_IndexedD_Mapping, $WORD, $WORD);
    B_NoneType (*__setitem__) (B_IndexedD_Mapping, $WORD, $WORD, $WORD);
    B_NoneType (*__delitem__) (B_IndexedD_Mapping, $WORD, $WORD);
};
struct B_IndexedD_Mapping {
    struct B_IndexedD_MappingG_class *$class;
    B_Eq W_EqD_AD_Indexed;
    B_Eq W_EqD_AD_Mapping;
    B_Mapping W_Mapping;
};
struct B_SetG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_Set, B_Eq, B_Ord, B_Logical, B_Minus);
    void (*__serialize__) (B_Set, $Serial$state);
    B_Set (*__deserialize__) (B_Set, $Serial$state);
    B_bool (*__bool__) (B_Set);
    B_str (*__str__) (B_Set);
    B_str (*__repr__) (B_Set);
    B_Iterator (*__iter__) (B_Set, $WORD);
    $WORD (*__fromiter__) (B_Set, B_Iterable, $WORD);
    B_int (*__len__) (B_Set, $WORD);
    B_bool (*__contains__) (B_Set, $WORD, $WORD);
    B_bool (*__containsnot__) (B_Set, $WORD, $WORD);
    B_bool (*isdisjoint) (B_Set, $WORD, $WORD);
    B_NoneType (*add) (B_Set, $WORD, $WORD);
    B_NoneType (*discard) (B_Set, $WORD, $WORD);
    $WORD (*pop) (B_Set, $WORD);
};
struct B_Set {
    struct B_SetG_class *$class;
    B_Eq W_EqD_AD_Container;
    B_Eq W_EqD_AD_Set;
    B_Ord W_Ord;
    B_Logical W_Logical;
    B_Minus W_Minus;
};
struct B_OrdD_SetG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_Set, B_Eq, B_Set);
    void (*__serialize__) (B_OrdD_Set, $Serial$state);
    B_OrdD_Set (*__deserialize__) (B_OrdD_Set, $Serial$state);
    B_bool (*__bool__) (B_OrdD_Set);
    B_str (*__str__) (B_OrdD_Set);
    B_str (*__repr__) (B_OrdD_Set);
    B_bool (*__eq__) (B_OrdD_Set, $WORD, $WORD);
    B_bool (*__ne__) (B_OrdD_Set, $WORD, $WORD);
    B_bool (*__lt__) (B_OrdD_Set, $WORD, $WORD);
    B_bool (*__le__) (B_OrdD_Set, $WORD, $WORD);
    B_bool (*__gt__) (B_OrdD_Set, $WORD, $WORD);
    B_bool (*__ge__) (B_OrdD_Set, $WORD, $WORD);
};
struct B_OrdD_Set {
    struct B_OrdD_SetG_class *$class;
    B_Eq W_EqD_AD_Set;
    B_Set W_Set;
};
struct B_LogicalD_SetG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_Set, B_Eq, B_Set);
    void (*__serialize__) (B_LogicalD_Set, $Serial$state);
    B_LogicalD_Set (*__deserialize__) (B_LogicalD_Set, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_Set);
    B_str (*__str__) (B_LogicalD_Set);
    B_str (*__repr__) (B_LogicalD_Set);
    $WORD (*__and__) (B_LogicalD_Set, $WORD, $WORD);
    $WORD (*__or__) (B_LogicalD_Set, $WORD, $WORD);
    $WORD (*__xor__) (B_LogicalD_Set, $WORD, $WORD);
    $WORD (*__iand__) (B_LogicalD_Set, $WORD, $WORD);
    $WORD (*__ior__) (B_LogicalD_Set, $WORD, $WORD);
    $WORD (*__ixor__) (B_LogicalD_Set, $WORD, $WORD);
};
struct B_LogicalD_Set {
    struct B_LogicalD_SetG_class *$class;
    B_Eq W_EqD_AD_Set;
    B_Set W_Set;
};
struct B_MinusD_SetG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_Set, B_Eq, B_Set);
    void (*__serialize__) (B_MinusD_Set, $Serial$state);
    B_MinusD_Set (*__deserialize__) (B_MinusD_Set, $Serial$state);
    B_bool (*__bool__) (B_MinusD_Set);
    B_str (*__str__) (B_MinusD_Set);
    B_str (*__repr__) (B_MinusD_Set);
    $WORD (*__sub__) (B_MinusD_Set, $WORD, $WORD);
    $WORD (*__isub__) (B_MinusD_Set, $WORD, $WORD);
};
struct B_MinusD_Set {
    struct B_MinusD_SetG_class *$class;
    B_Eq W_EqD_AD_Set;
    B_Set W_Set;
};
struct B_SequenceD_listG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_SequenceD_list);
    void (*__serialize__) (B_SequenceD_list, $Serial$state);
    B_SequenceD_list (*__deserialize__) (B_SequenceD_list, $Serial$state);
    B_bool (*__bool__) (B_SequenceD_list);
    B_str (*__str__) (B_SequenceD_list);
    B_str (*__repr__) (B_SequenceD_list);
    $WORD (*__getitem__) (B_SequenceD_list, B_list, B_int);
    B_NoneType (*__setitem__) (B_SequenceD_list, B_list, B_int, $WORD);
    B_NoneType (*__delitem__) (B_SequenceD_list, B_list, B_int);
    B_list (*__getslice__) (B_SequenceD_list, B_list, B_slice);
    B_NoneType (*__setslice__) (B_SequenceD_list, B_list, B_Iterable, B_slice, $WORD);
    B_NoneType (*__delslice__) (B_SequenceD_list, B_list, B_slice);
    B_Iterator (*__reversed__) (B_SequenceD_list, B_list);
    B_NoneType (*insert) (B_SequenceD_list, B_list, B_int, $WORD);
    B_NoneType (*append) (B_SequenceD_list, B_list, $WORD);
    B_NoneType (*reverse) (B_SequenceD_list, B_list);
};
struct B_SequenceD_list {
    struct B_SequenceD_listG_class *$class;
    B_Eq W_EqD_AD_Indexed;
    B_Collection W_Collection;
    B_Times W_Times;
};
struct B_CollectionD_SequenceD_listG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_CollectionD_SequenceD_list, B_Sequence);
    void (*__serialize__) (B_CollectionD_SequenceD_list, $Serial$state);
    B_CollectionD_SequenceD_list (*__deserialize__) (B_CollectionD_SequenceD_list, $Serial$state);
    B_bool (*__bool__) (B_CollectionD_SequenceD_list);
    B_str (*__str__) (B_CollectionD_SequenceD_list);
    B_str (*__repr__) (B_CollectionD_SequenceD_list);
    B_Iterator (*__iter__) (B_CollectionD_SequenceD_list, B_list);
    B_list (*__fromiter__) (B_CollectionD_SequenceD_list, B_Iterable, $WORD);
    B_int (*__len__) (B_CollectionD_SequenceD_list, B_list);
};
struct B_CollectionD_SequenceD_list {
    struct B_CollectionD_SequenceD_listG_class *$class;
    B_Sequence W_Sequence;
};
struct B_TimesD_SequenceD_listG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_TimesD_SequenceD_list, B_Sequence);
    void (*__serialize__) (B_TimesD_SequenceD_list, $Serial$state);
    B_TimesD_SequenceD_list (*__deserialize__) (B_TimesD_SequenceD_list, $Serial$state);
    B_bool (*__bool__) (B_TimesD_SequenceD_list);
    B_str (*__str__) (B_TimesD_SequenceD_list);
    B_str (*__repr__) (B_TimesD_SequenceD_list);
    B_list (*__add__) (B_TimesD_SequenceD_list, B_list, B_list);
    B_list (*__iadd__) (B_TimesD_SequenceD_list, B_list, B_list);
    B_list (*__mul__) (B_TimesD_SequenceD_list, B_list, B_int);
    B_list (*__imul__) (B_TimesD_SequenceD_list, B_list, B_int);
};
struct B_TimesD_SequenceD_list {
    struct B_TimesD_SequenceD_listG_class *$class;
    B_Sequence W_Sequence;
};
struct B_ContainerD_listG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_ContainerD_list, B_Eq);
    void (*__serialize__) (B_ContainerD_list, $Serial$state);
    B_ContainerD_list (*__deserialize__) (B_ContainerD_list, $Serial$state);
    B_bool (*__bool__) (B_ContainerD_list);
    B_str (*__str__) (B_ContainerD_list);
    B_str (*__repr__) (B_ContainerD_list);
    B_Iterator (*__iter__) (B_ContainerD_list, B_list);
    B_list (*__fromiter__) (B_ContainerD_list, B_Iterable, $WORD);
    B_int (*__len__) (B_ContainerD_list, B_list);
    B_bool (*__contains__) (B_ContainerD_list, B_list, $WORD);
    B_bool (*__containsnot__) (B_ContainerD_list, B_list, $WORD);
};
struct B_ContainerD_list {
    struct B_ContainerD_listG_class *$class;
    B_Eq W_EqD_AD_Container;
    B_Eq W_EqD_AD_ContainerD_list;
};
struct B_OrdD_listG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_list, B_Ord);
    void (*__serialize__) (B_OrdD_list, $Serial$state);
    B_OrdD_list (*__deserialize__) (B_OrdD_list, $Serial$state);
    B_bool (*__bool__) (B_OrdD_list);
    B_str (*__str__) (B_OrdD_list);
    B_str (*__repr__) (B_OrdD_list);
    B_bool (*__eq__) (B_OrdD_list, B_list, B_list);
    B_bool (*__ne__) (B_OrdD_list, B_list, B_list);
    B_bool (*__lt__) (B_OrdD_list, B_list, B_list);
    B_bool (*__le__) (B_OrdD_list, B_list, B_list);
    B_bool (*__gt__) (B_OrdD_list, B_list, B_list);
    B_bool (*__ge__) (B_OrdD_list, B_list, B_list);
};
struct B_OrdD_list {
    struct B_OrdD_listG_class *$class;
    B_Ord W_OrdD_AD_OrdD_list;
};
struct B_MappingD_dictG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MappingD_dict, B_Hashable);
    void (*__serialize__) (B_MappingD_dict, $Serial$state);
    B_MappingD_dict (*__deserialize__) (B_MappingD_dict, $Serial$state);
    B_bool (*__bool__) (B_MappingD_dict);
    B_str (*__str__) (B_MappingD_dict);
    B_str (*__repr__) (B_MappingD_dict);
    B_Iterator (*__iter__) (B_MappingD_dict, B_dict);
    B_dict (*__fromiter__) (B_MappingD_dict, B_Iterable, $WORD);
    B_int (*__len__) (B_MappingD_dict, B_dict);
    B_bool (*__contains__) (B_MappingD_dict, B_dict, $WORD);
    B_bool (*__containsnot__) (B_MappingD_dict, B_dict, $WORD);
    $WORD (*get) (B_MappingD_dict, B_dict, $WORD, $WORD);
    B_Iterator (*keys) (B_MappingD_dict, B_dict);
    B_Iterator (*values) (B_MappingD_dict, B_dict);
    B_Iterator (*items) (B_MappingD_dict, B_dict);
    B_NoneType (*update) (B_MappingD_dict, B_dict, B_Iterable, $WORD);
    B_tuple (*popitem) (B_MappingD_dict, B_dict);
    B_NoneType (*setdefault) (B_MappingD_dict, B_dict, $WORD, $WORD);
};
struct B_MappingD_dict {
    struct B_MappingD_dictG_class *$class;
    B_Eq W_EqD_AD_Container;
    B_Eq W_EqD_AD_Mapping;
    B_Indexed W_Indexed;
    B_Hashable W_HashableD_AD_MappingD_dict;
};
struct B_IndexedD_MappingD_dictG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IndexedD_MappingD_dict, B_Hashable, B_Mapping);
    void (*__serialize__) (B_IndexedD_MappingD_dict, $Serial$state);
    B_IndexedD_MappingD_dict (*__deserialize__) (B_IndexedD_MappingD_dict, $Serial$state);
    B_bool (*__bool__) (B_IndexedD_MappingD_dict);
    B_str (*__str__) (B_IndexedD_MappingD_dict);
    B_str (*__repr__) (B_IndexedD_MappingD_dict);
    $WORD (*__getitem__) (B_IndexedD_MappingD_dict, B_dict, $WORD);
    B_NoneType (*__setitem__) (B_IndexedD_MappingD_dict, B_dict, $WORD, $WORD);
    B_NoneType (*__delitem__) (B_IndexedD_MappingD_dict, B_dict, $WORD);
};
struct B_IndexedD_MappingD_dict {
    struct B_IndexedD_MappingD_dictG_class *$class;
    B_Eq W_EqD_AD_Indexed;
    B_Eq W_EqD_AD_Mapping;
    B_Mapping W_Mapping;
    B_Hashable W_HashableD_AD_MappingD_dict;
};
struct B_OrdD_dictG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_dict, B_Hashable, B_Eq);
    void (*__serialize__) (B_OrdD_dict, $Serial$state);
    B_OrdD_dict (*__deserialize__) (B_OrdD_dict, $Serial$state);
    B_bool (*__bool__) (B_OrdD_dict);
    B_str (*__str__) (B_OrdD_dict);
    B_str (*__repr__) (B_OrdD_dict);
    B_bool (*__eq__) (B_OrdD_dict, B_dict, B_dict);
    B_bool (*__ne__) (B_OrdD_dict, B_dict, B_dict);
    B_bool (*__lt__) (B_OrdD_dict, B_dict, B_dict);
    B_bool (*__le__) (B_OrdD_dict, B_dict, B_dict);
    B_bool (*__gt__) (B_OrdD_dict, B_dict, B_dict);
    B_bool (*__ge__) (B_OrdD_dict, B_dict, B_dict);
};
struct B_OrdD_dict {
    struct B_OrdD_dictG_class *$class;
    B_Hashable W_HashableD_AD_OrdD_dict;
    B_Eq W_EqD_BD_OrdD_dict;
};
struct B_SetD_setG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_SetD_set, B_Hashable);
    void (*__serialize__) (B_SetD_set, $Serial$state);
    B_SetD_set (*__deserialize__) (B_SetD_set, $Serial$state);
    B_bool (*__bool__) (B_SetD_set);
    B_str (*__str__) (B_SetD_set);
    B_str (*__repr__) (B_SetD_set);
    B_Iterator (*__iter__) (B_SetD_set, B_set);
    B_set (*__fromiter__) (B_SetD_set, B_Iterable, $WORD);
    B_int (*__len__) (B_SetD_set, B_set);
    B_bool (*__contains__) (B_SetD_set, B_set, $WORD);
    B_bool (*__containsnot__) (B_SetD_set, B_set, $WORD);
    B_bool (*isdisjoint) (B_SetD_set, B_set, B_set);
    B_NoneType (*add) (B_SetD_set, B_set, $WORD);
    B_NoneType (*discard) (B_SetD_set, B_set, $WORD);
    $WORD (*pop) (B_SetD_set, B_set);
};
struct B_SetD_set {
    struct B_SetD_setG_class *$class;
    B_Eq W_EqD_AD_Container;
    B_Eq W_EqD_AD_Set;
    B_Ord W_Ord;
    B_Logical W_Logical;
    B_Minus W_Minus;
    B_Hashable W_HashableD_AD_SetD_set;
};
struct B_OrdD_SetD_setG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_SetD_set, B_Hashable, B_Set);
    void (*__serialize__) (B_OrdD_SetD_set, $Serial$state);
    B_OrdD_SetD_set (*__deserialize__) (B_OrdD_SetD_set, $Serial$state);
    B_bool (*__bool__) (B_OrdD_SetD_set);
    B_str (*__str__) (B_OrdD_SetD_set);
    B_str (*__repr__) (B_OrdD_SetD_set);
    B_bool (*__eq__) (B_OrdD_SetD_set, B_set, B_set);
    B_bool (*__ne__) (B_OrdD_SetD_set, B_set, B_set);
    B_bool (*__lt__) (B_OrdD_SetD_set, B_set, B_set);
    B_bool (*__le__) (B_OrdD_SetD_set, B_set, B_set);
    B_bool (*__gt__) (B_OrdD_SetD_set, B_set, B_set);
    B_bool (*__ge__) (B_OrdD_SetD_set, B_set, B_set);
};
struct B_OrdD_SetD_set {
    struct B_OrdD_SetD_setG_class *$class;
    B_Eq W_EqD_AD_Set;
    B_Set W_Set;
    B_Hashable W_HashableD_AD_SetD_set;
};
struct B_LogicalD_SetD_setG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_LogicalD_SetD_set, B_Hashable, B_Set);
    void (*__serialize__) (B_LogicalD_SetD_set, $Serial$state);
    B_LogicalD_SetD_set (*__deserialize__) (B_LogicalD_SetD_set, $Serial$state);
    B_bool (*__bool__) (B_LogicalD_SetD_set);
    B_str (*__str__) (B_LogicalD_SetD_set);
    B_str (*__repr__) (B_LogicalD_SetD_set);
    B_set (*__and__) (B_LogicalD_SetD_set, B_set, B_set);
    B_set (*__or__) (B_LogicalD_SetD_set, B_set, B_set);
    B_set (*__xor__) (B_LogicalD_SetD_set, B_set, B_set);
    B_set (*__iand__) (B_LogicalD_SetD_set, B_set, B_set);
    B_set (*__ior__) (B_LogicalD_SetD_set, B_set, B_set);
    B_set (*__ixor__) (B_LogicalD_SetD_set, B_set, B_set);
};
struct B_LogicalD_SetD_set {
    struct B_LogicalD_SetD_setG_class *$class;
    B_Eq W_EqD_AD_Set;
    B_Set W_Set;
    B_Hashable W_HashableD_AD_SetD_set;
};
struct B_MinusD_SetD_setG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_MinusD_SetD_set, B_Hashable, B_Set);
    void (*__serialize__) (B_MinusD_SetD_set, $Serial$state);
    B_MinusD_SetD_set (*__deserialize__) (B_MinusD_SetD_set, $Serial$state);
    B_bool (*__bool__) (B_MinusD_SetD_set);
    B_str (*__str__) (B_MinusD_SetD_set);
    B_str (*__repr__) (B_MinusD_SetD_set);
    B_set (*__sub__) (B_MinusD_SetD_set, B_set, B_set);
    B_set (*__isub__) (B_MinusD_SetD_set, B_set, B_set);
};
struct B_MinusD_SetD_set {
    struct B_MinusD_SetD_setG_class *$class;
    B_Eq W_EqD_AD_Set;
    B_Set W_Set;
    B_Hashable W_HashableD_AD_SetD_set;
};
struct B_IterableD_IteratorG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IterableD_Iterator);
    void (*__serialize__) (B_IterableD_Iterator, $Serial$state);
    B_IterableD_Iterator (*__deserialize__) (B_IterableD_Iterator, $Serial$state);
    B_bool (*__bool__) (B_IterableD_Iterator);
    B_str (*__str__) (B_IterableD_Iterator);
    B_str (*__repr__) (B_IterableD_Iterator);
    B_Iterator (*__iter__) (B_IterableD_Iterator, B_Iterator);
};
struct B_IterableD_Iterator {
    struct B_IterableD_IteratorG_class *$class;
};
struct B_IterableD_rangeG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_IterableD_range);
    void (*__serialize__) (B_IterableD_range, $Serial$state);
    B_IterableD_range (*__deserialize__) (B_IterableD_range, $Serial$state);
    B_bool (*__bool__) (B_IterableD_range);
    B_str (*__str__) (B_IterableD_range);
    B_str (*__repr__) (B_IterableD_range);
    B_Iterator (*__iter__) (B_IterableD_range, B_range);
};
struct B_IterableD_range {
    struct B_IterableD_rangeG_class *$class;
};
struct B_OrdD_strG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_str);
    void (*__serialize__) (B_OrdD_str, $Serial$state);
    B_OrdD_str (*__deserialize__) (B_OrdD_str, $Serial$state);
    B_bool (*__bool__) (B_OrdD_str);
    B_str (*__str__) (B_OrdD_str);
    B_str (*__repr__) (B_OrdD_str);
    B_bool (*__eq__) (B_OrdD_str, B_str, B_str);
    B_bool (*__ne__) (B_OrdD_str, B_str, B_str);
    B_bool (*__lt__) (B_OrdD_str, B_str, B_str);
    B_bool (*__le__) (B_OrdD_str, B_str, B_str);
    B_bool (*__gt__) (B_OrdD_str, B_str, B_str);
    B_bool (*__ge__) (B_OrdD_str, B_str, B_str);
};
struct B_OrdD_str {
    struct B_OrdD_strG_class *$class;
};
struct B_ContainerD_strG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_ContainerD_str);
    void (*__serialize__) (B_ContainerD_str, $Serial$state);
    B_ContainerD_str (*__deserialize__) (B_ContainerD_str, $Serial$state);
    B_bool (*__bool__) (B_ContainerD_str);
    B_str (*__str__) (B_ContainerD_str);
    B_str (*__repr__) (B_ContainerD_str);
    B_Iterator (*__iter__) (B_ContainerD_str, B_str);
    B_str (*__fromiter__) (B_ContainerD_str, B_Iterable, $WORD);
    B_int (*__len__) (B_ContainerD_str, B_str);
    B_bool (*__contains__) (B_ContainerD_str, B_str, B_str);
    B_bool (*__containsnot__) (B_ContainerD_str, B_str, B_str);
};
struct B_ContainerD_str {
    struct B_ContainerD_strG_class *$class;
    B_Eq W_EqD_AD_Container;
};
struct B_SliceableD_strG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_SliceableD_str);
    void (*__serialize__) (B_SliceableD_str, $Serial$state);
    B_SliceableD_str (*__deserialize__) (B_SliceableD_str, $Serial$state);
    B_bool (*__bool__) (B_SliceableD_str);
    B_str (*__str__) (B_SliceableD_str);
    B_str (*__repr__) (B_SliceableD_str);
    B_str (*__getitem__) (B_SliceableD_str, B_str, B_int);
    B_NoneType (*__setitem__) (B_SliceableD_str, B_str, B_int, B_str);
    B_NoneType (*__delitem__) (B_SliceableD_str, B_str, B_int);
    B_str (*__getslice__) (B_SliceableD_str, B_str, B_slice);
    B_NoneType (*__setslice__) (B_SliceableD_str, B_str, B_Iterable, B_slice, $WORD);
    B_NoneType (*__delslice__) (B_SliceableD_str, B_str, B_slice);
};
struct B_SliceableD_str {
    struct B_SliceableD_strG_class *$class;
    B_Eq W_EqD_AD_Indexed;
};
struct B_TimesD_strG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_TimesD_str);
    void (*__serialize__) (B_TimesD_str, $Serial$state);
    B_TimesD_str (*__deserialize__) (B_TimesD_str, $Serial$state);
    B_bool (*__bool__) (B_TimesD_str);
    B_str (*__str__) (B_TimesD_str);
    B_str (*__repr__) (B_TimesD_str);
    B_str (*__add__) (B_TimesD_str, B_str, B_str);
    B_str (*__iadd__) (B_TimesD_str, B_str, B_str);
    B_str (*__mul__) (B_TimesD_str, B_str, B_int);
    B_str (*__imul__) (B_TimesD_str, B_str, B_int);
};
struct B_TimesD_str {
    struct B_TimesD_strG_class *$class;
};
struct B_HashableD_strG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_str);
    void (*__serialize__) (B_HashableD_str, $Serial$state);
    B_HashableD_str (*__deserialize__) (B_HashableD_str, $Serial$state);
    B_bool (*__bool__) (B_HashableD_str);
    B_str (*__str__) (B_HashableD_str);
    B_str (*__repr__) (B_HashableD_str);
    B_bool (*__eq__) (B_HashableD_str, B_str, B_str);
    B_bool (*__ne__) (B_HashableD_str, B_str, B_str);
    B_int (*__hash__) (B_HashableD_str, B_str);
};
struct B_HashableD_str {
    struct B_HashableD_strG_class *$class;
};
struct B_OrdD_bytearrayG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_bytearray);
    void (*__serialize__) (B_OrdD_bytearray, $Serial$state);
    B_OrdD_bytearray (*__deserialize__) (B_OrdD_bytearray, $Serial$state);
    B_bool (*__bool__) (B_OrdD_bytearray);
    B_str (*__str__) (B_OrdD_bytearray);
    B_str (*__repr__) (B_OrdD_bytearray);
    B_bool (*__eq__) (B_OrdD_bytearray, B_bytearray, B_bytearray);
    B_bool (*__ne__) (B_OrdD_bytearray, B_bytearray, B_bytearray);
    B_bool (*__lt__) (B_OrdD_bytearray, B_bytearray, B_bytearray);
    B_bool (*__le__) (B_OrdD_bytearray, B_bytearray, B_bytearray);
    B_bool (*__gt__) (B_OrdD_bytearray, B_bytearray, B_bytearray);
    B_bool (*__ge__) (B_OrdD_bytearray, B_bytearray, B_bytearray);
};
struct B_OrdD_bytearray {
    struct B_OrdD_bytearrayG_class *$class;
};
struct B_SequenceD_bytearrayG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_SequenceD_bytearray);
    void (*__serialize__) (B_SequenceD_bytearray, $Serial$state);
    B_SequenceD_bytearray (*__deserialize__) (B_SequenceD_bytearray, $Serial$state);
    B_bool (*__bool__) (B_SequenceD_bytearray);
    B_str (*__str__) (B_SequenceD_bytearray);
    B_str (*__repr__) (B_SequenceD_bytearray);
    B_int (*__getitem__) (B_SequenceD_bytearray, B_bytearray, B_int);
    B_NoneType (*__setitem__) (B_SequenceD_bytearray, B_bytearray, B_int, B_int);
    B_NoneType (*__delitem__) (B_SequenceD_bytearray, B_bytearray, B_int);
    B_bytearray (*__getslice__) (B_SequenceD_bytearray, B_bytearray, B_slice);
    B_NoneType (*__setslice__) (B_SequenceD_bytearray, B_bytearray, B_Iterable, B_slice, $WORD);
    B_NoneType (*__delslice__) (B_SequenceD_bytearray, B_bytearray, B_slice);
    B_Iterator (*__reversed__) (B_SequenceD_bytearray, B_bytearray);
    B_NoneType (*insert) (B_SequenceD_bytearray, B_bytearray, B_int, B_int);
    B_NoneType (*append) (B_SequenceD_bytearray, B_bytearray, B_int);
    B_NoneType (*reverse) (B_SequenceD_bytearray, B_bytearray);
};
struct B_SequenceD_bytearray {
    struct B_SequenceD_bytearrayG_class *$class;
    B_Eq W_EqD_AD_Indexed;
    B_Collection W_Collection;
    B_Times W_Times;
};
struct B_CollectionD_SequenceD_bytearrayG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_CollectionD_SequenceD_bytearray, B_Sequence);
    void (*__serialize__) (B_CollectionD_SequenceD_bytearray, $Serial$state);
    B_CollectionD_SequenceD_bytearray (*__deserialize__) (B_CollectionD_SequenceD_bytearray, $Serial$state);
    B_bool (*__bool__) (B_CollectionD_SequenceD_bytearray);
    B_str (*__str__) (B_CollectionD_SequenceD_bytearray);
    B_str (*__repr__) (B_CollectionD_SequenceD_bytearray);
    B_Iterator (*__iter__) (B_CollectionD_SequenceD_bytearray, B_bytearray);
    B_bytearray (*__fromiter__) (B_CollectionD_SequenceD_bytearray, B_Iterable, $WORD);
    B_int (*__len__) (B_CollectionD_SequenceD_bytearray, B_bytearray);
};
struct B_CollectionD_SequenceD_bytearray {
    struct B_CollectionD_SequenceD_bytearrayG_class *$class;
    B_Sequence W_Sequence;
};
struct B_TimesD_SequenceD_bytearrayG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_TimesD_SequenceD_bytearray, B_Sequence);
    void (*__serialize__) (B_TimesD_SequenceD_bytearray, $Serial$state);
    B_TimesD_SequenceD_bytearray (*__deserialize__) (B_TimesD_SequenceD_bytearray, $Serial$state);
    B_bool (*__bool__) (B_TimesD_SequenceD_bytearray);
    B_str (*__str__) (B_TimesD_SequenceD_bytearray);
    B_str (*__repr__) (B_TimesD_SequenceD_bytearray);
    B_bytearray (*__add__) (B_TimesD_SequenceD_bytearray, B_bytearray, B_bytearray);
    B_bytearray (*__iadd__) (B_TimesD_SequenceD_bytearray, B_bytearray, B_bytearray);
    B_bytearray (*__mul__) (B_TimesD_SequenceD_bytearray, B_bytearray, B_int);
    B_bytearray (*__imul__) (B_TimesD_SequenceD_bytearray, B_bytearray, B_int);
};
struct B_TimesD_SequenceD_bytearray {
    struct B_TimesD_SequenceD_bytearrayG_class *$class;
    B_Sequence W_Sequence;
};
struct B_ContainerD_bytearrayG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_ContainerD_bytearray);
    void (*__serialize__) (B_ContainerD_bytearray, $Serial$state);
    B_ContainerD_bytearray (*__deserialize__) (B_ContainerD_bytearray, $Serial$state);
    B_bool (*__bool__) (B_ContainerD_bytearray);
    B_str (*__str__) (B_ContainerD_bytearray);
    B_str (*__repr__) (B_ContainerD_bytearray);
    B_Iterator (*__iter__) (B_ContainerD_bytearray, B_bytearray);
    B_bytearray (*__fromiter__) (B_ContainerD_bytearray, B_Iterable, $WORD);
    B_int (*__len__) (B_ContainerD_bytearray, B_bytearray);
    B_bool (*__contains__) (B_ContainerD_bytearray, B_bytearray, B_int);
    B_bool (*__containsnot__) (B_ContainerD_bytearray, B_bytearray, B_int);
};
struct B_ContainerD_bytearray {
    struct B_ContainerD_bytearrayG_class *$class;
    B_Eq W_EqD_AD_Container;
};
struct B_OrdD_bytesG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_OrdD_bytes);
    void (*__serialize__) (B_OrdD_bytes, $Serial$state);
    B_OrdD_bytes (*__deserialize__) (B_OrdD_bytes, $Serial$state);
    B_bool (*__bool__) (B_OrdD_bytes);
    B_str (*__str__) (B_OrdD_bytes);
    B_str (*__repr__) (B_OrdD_bytes);
    B_bool (*__eq__) (B_OrdD_bytes, B_bytes, B_bytes);
    B_bool (*__ne__) (B_OrdD_bytes, B_bytes, B_bytes);
    B_bool (*__lt__) (B_OrdD_bytes, B_bytes, B_bytes);
    B_bool (*__le__) (B_OrdD_bytes, B_bytes, B_bytes);
    B_bool (*__gt__) (B_OrdD_bytes, B_bytes, B_bytes);
    B_bool (*__ge__) (B_OrdD_bytes, B_bytes, B_bytes);
};
struct B_OrdD_bytes {
    struct B_OrdD_bytesG_class *$class;
};
struct B_SliceableD_bytesG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_SliceableD_bytes);
    void (*__serialize__) (B_SliceableD_bytes, $Serial$state);
    B_SliceableD_bytes (*__deserialize__) (B_SliceableD_bytes, $Serial$state);
    B_bool (*__bool__) (B_SliceableD_bytes);
    B_str (*__str__) (B_SliceableD_bytes);
    B_str (*__repr__) (B_SliceableD_bytes);
    B_int (*__getitem__) (B_SliceableD_bytes, B_bytes, B_int);
    B_NoneType (*__setitem__) (B_SliceableD_bytes, B_bytes, B_int, B_int);
    B_NoneType (*__delitem__) (B_SliceableD_bytes, B_bytes, B_int);
    B_bytes (*__getslice__) (B_SliceableD_bytes, B_bytes, B_slice);
    B_NoneType (*__setslice__) (B_SliceableD_bytes, B_bytes, B_Iterable, B_slice, $WORD);
    B_NoneType (*__delslice__) (B_SliceableD_bytes, B_bytes, B_slice);
};
struct B_SliceableD_bytes {
    struct B_SliceableD_bytesG_class *$class;
    B_Eq W_EqD_AD_Indexed;
};
struct B_ContainerD_bytesG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_ContainerD_bytes);
    void (*__serialize__) (B_ContainerD_bytes, $Serial$state);
    B_ContainerD_bytes (*__deserialize__) (B_ContainerD_bytes, $Serial$state);
    B_bool (*__bool__) (B_ContainerD_bytes);
    B_str (*__str__) (B_ContainerD_bytes);
    B_str (*__repr__) (B_ContainerD_bytes);
    B_Iterator (*__iter__) (B_ContainerD_bytes, B_bytes);
    B_bytes (*__fromiter__) (B_ContainerD_bytes, B_Iterable, $WORD);
    B_int (*__len__) (B_ContainerD_bytes, B_bytes);
    B_bool (*__contains__) (B_ContainerD_bytes, B_bytes, B_int);
    B_bool (*__containsnot__) (B_ContainerD_bytes, B_bytes, B_int);
};
struct B_ContainerD_bytes {
    struct B_ContainerD_bytesG_class *$class;
    B_Eq W_EqD_AD_Container;
};
struct B_TimesD_bytesG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_TimesD_bytes);
    void (*__serialize__) (B_TimesD_bytes, $Serial$state);
    B_TimesD_bytes (*__deserialize__) (B_TimesD_bytes, $Serial$state);
    B_bool (*__bool__) (B_TimesD_bytes);
    B_str (*__str__) (B_TimesD_bytes);
    B_str (*__repr__) (B_TimesD_bytes);
    B_bytes (*__add__) (B_TimesD_bytes, B_bytes, B_bytes);
    B_bytes (*__iadd__) (B_TimesD_bytes, B_bytes, B_bytes);
    B_bytes (*__mul__) (B_TimesD_bytes, B_bytes, B_int);
    B_bytes (*__imul__) (B_TimesD_bytes, B_bytes, B_int);
};
struct B_TimesD_bytes {
    struct B_TimesD_bytesG_class *$class;
};
struct B_HashableD_bytesG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_HashableD_bytes);
    void (*__serialize__) (B_HashableD_bytes, $Serial$state);
    B_HashableD_bytes (*__deserialize__) (B_HashableD_bytes, $Serial$state);
    B_bool (*__bool__) (B_HashableD_bytes);
    B_str (*__str__) (B_HashableD_bytes);
    B_str (*__repr__) (B_HashableD_bytes);
    B_bool (*__eq__) (B_HashableD_bytes, B_bytes, B_bytes);
    B_bool (*__ne__) (B_HashableD_bytes, B_bytes, B_bytes);
    B_int (*__hash__) (B_HashableD_bytes, B_bytes);
};
struct B_HashableD_bytes {
    struct B_HashableD_bytesG_class *$class;
};
extern struct B_valueG_class B_valueG_methods;
extern struct B_objectG_class B_objectG_methods;
extern struct B_atomG_class B_atomG_methods;
extern struct B_intG_class B_intG_methods;
B_int B_intG_new(B_atom);
extern struct B_i64G_class B_i64G_methods;
B_i64 B_i64G_new(B_atom);
extern struct B_i32G_class B_i32G_methods;
B_i32 B_i32G_new(B_atom);
extern struct B_i16G_class B_i16G_methods;
B_i16 B_i16G_new(B_atom);
extern struct B_u64G_class B_u64G_methods;
B_u64 B_u64G_new(B_atom);
extern struct B_u32G_class B_u32G_methods;
B_u32 B_u32G_new(B_atom);
extern struct B_u16G_class B_u16G_methods;
B_u16 B_u16G_new(B_atom);
extern struct B_floatG_class B_floatG_methods;
B_float B_floatG_new(B_atom);
extern struct B_boolG_class B_boolG_methods;
B_bool B_boolG_new(B_value);
extern struct B_sliceG_class B_sliceG_methods;
B_slice B_sliceG_new(B_int, B_int, B_int);
extern struct B_listG_class B_listG_methods;
B_list B_listG_new(B_Iterable, $WORD);
extern struct B_rangeG_class B_rangeG_methods;
B_range B_rangeG_new(B_int, B_int, B_int);
extern struct B_IteratorG_class B_IteratorG_methods;
extern struct B_IterableG_class B_IterableG_methods;
extern struct B_strG_class B_strG_methods;
B_str B_strG_new(B_value);
extern struct B_bytesG_class B_bytesG_methods;
B_bytes B_bytesG_new(B_Iterable, $WORD);
extern struct B_bytearrayG_class B_bytearrayG_methods;
B_bytearray B_bytearrayG_new(B_bytes);
extern struct B_MsgG_class B_MsgG_methods;
extern struct B_BaseExceptionG_class B_BaseExceptionG_methods;
B_BaseException B_BaseExceptionG_new(B_str);
extern struct B_SystemExitG_class B_SystemExitG_methods;
B_SystemExit B_SystemExitG_new(B_str);
extern struct B_KeyboardInterruptG_class B_KeyboardInterruptG_methods;
B_KeyboardInterrupt B_KeyboardInterruptG_new(B_str);
extern struct B_ExceptionG_class B_ExceptionG_methods;
B_Exception B_ExceptionG_new(B_str);
extern struct B_AssertionErrorG_class B_AssertionErrorG_methods;
B_AssertionError B_AssertionErrorG_new(B_str);
extern struct B_LookupErrorG_class B_LookupErrorG_methods;
B_LookupError B_LookupErrorG_new(B_str);
extern struct B_IndexErrorG_class B_IndexErrorG_methods;
B_IndexError B_IndexErrorG_new(B_str);
extern struct B_KeyErrorG_class B_KeyErrorG_methods;
B_KeyError B_KeyErrorG_new(B_str);
extern struct B_MemoryErrorG_class B_MemoryErrorG_methods;
B_MemoryError B_MemoryErrorG_new(B_str);
extern struct B_OSErrorG_class B_OSErrorG_methods;
B_OSError B_OSErrorG_new(B_str);
extern struct B_RuntimeErrorG_class B_RuntimeErrorG_methods;
B_RuntimeError B_RuntimeErrorG_new(B_str);
extern struct B_NotImplementedErrorG_class B_NotImplementedErrorG_methods;
B_NotImplementedError B_NotImplementedErrorG_new(B_str);
extern struct B_ValueErrorG_class B_ValueErrorG_methods;
B_ValueError B_ValueErrorG_new(B_str);
extern struct B_IdentityG_class B_IdentityG_methods;
extern struct B_EqG_class B_EqG_methods;
extern struct B_OrdG_class B_OrdG_methods;
extern struct B_LogicalG_class B_LogicalG_methods;
extern struct B_PlusG_class B_PlusG_methods;
extern struct B_MinusG_class B_MinusG_methods;
extern struct B_TimesG_class B_TimesG_methods;
extern struct B_DivG_class B_DivG_methods;
extern struct B_HashableG_class B_HashableG_methods;
extern struct B_complexG_class B_complexG_methods;
B_complex B_complexG_new(B_Number, $WORD);
extern struct B_dictG_class B_dictG_methods;
B_dict B_dictG_new(B_Hashable, B_Iterable, $WORD);
extern struct B_setG_class B_setG_methods;
B_set B_setG_new(B_Hashable, B_Iterable, $WORD);
extern struct B_NumberG_class B_NumberG_methods;
extern struct B_MinusD_NumberG_class B_MinusD_NumberG_methods;
extern struct B_RealG_class B_RealG_methods;
extern struct B_MinusD_RealG_class B_MinusD_RealG_methods;
extern struct B_RealFloatG_class B_RealFloatG_methods;
extern struct B_MinusD_RealFloatG_class B_MinusD_RealFloatG_methods;
extern struct B_RationalG_class B_RationalG_methods;
extern struct B_MinusD_RationalG_class B_MinusD_RationalG_methods;
extern struct B_IntegralG_class B_IntegralG_methods;
extern struct B_MinusD_IntegralG_class B_MinusD_IntegralG_methods;
extern struct B_LogicalD_IntegralG_class B_LogicalD_IntegralG_methods;
extern struct B_HashableD_boolG_class B_HashableD_boolG_methods;
B_HashableD_bool B_HashableD_boolG_new();
extern struct B_IntegralD_intG_class B_IntegralD_intG_methods;
B_IntegralD_int B_IntegralD_intG_new();
extern struct B_MinusD_IntegralD_intG_class B_MinusD_IntegralD_intG_methods;
B_MinusD_IntegralD_int B_MinusD_IntegralD_intG_new(B_Integral);
extern struct B_LogicalD_IntegralD_intG_class B_LogicalD_IntegralD_intG_methods;
B_LogicalD_IntegralD_int B_LogicalD_IntegralD_intG_new(B_Integral);
extern struct B_DivD_intG_class B_DivD_intG_methods;
B_DivD_int B_DivD_intG_new();
extern struct B_OrdD_intG_class B_OrdD_intG_methods;
B_OrdD_int B_OrdD_intG_new();
extern struct B_HashableD_intG_class B_HashableD_intG_methods;
extern struct B_IntegralD_i64G_class B_IntegralD_i64G_methods;
B_IntegralD_i64 B_IntegralD_i64G_new();
extern struct B_MinusD_IntegralD_i64G_class B_MinusD_IntegralD_i64G_methods;
B_MinusD_IntegralD_i64 B_MinusD_IntegralD_i64G_new(B_Integral);
extern struct B_LogicalD_IntegralD_i64G_class B_LogicalD_IntegralD_i64G_methods;
B_LogicalD_IntegralD_i64 B_LogicalD_IntegralD_i64G_new(B_Integral);
extern struct B_DivD_i64G_class B_DivD_i64G_methods;
B_DivD_i64 B_DivD_i64G_new();
extern struct B_OrdD_i64G_class B_OrdD_i64G_methods;
B_OrdD_i64 B_OrdD_i64G_new();
extern struct B_HashableD_i64G_class B_HashableD_i64G_methods;
extern struct B_IntegralD_i32G_class B_IntegralD_i32G_methods;
B_IntegralD_i32 B_IntegralD_i32G_new();
extern struct B_MinusD_IntegralD_i32G_class B_MinusD_IntegralD_i32G_methods;
B_MinusD_IntegralD_i32 B_MinusD_IntegralD_i32G_new(B_Integral);
extern struct B_LogicalD_IntegralD_i32G_class B_LogicalD_IntegralD_i32G_methods;
B_LogicalD_IntegralD_i32 B_LogicalD_IntegralD_i32G_new(B_Integral);
extern struct B_DivD_i32G_class B_DivD_i32G_methods;
B_DivD_i32 B_DivD_i32G_new();
extern struct B_OrdD_i32G_class B_OrdD_i32G_methods;
B_OrdD_i32 B_OrdD_i32G_new();
extern struct B_HashableD_i32G_class B_HashableD_i32G_methods;
extern struct B_IntegralD_i16G_class B_IntegralD_i16G_methods;
B_IntegralD_i16 B_IntegralD_i16G_new();
extern struct B_MinusD_IntegralD_i16G_class B_MinusD_IntegralD_i16G_methods;
B_MinusD_IntegralD_i16 B_MinusD_IntegralD_i16G_new(B_Integral);
extern struct B_LogicalD_IntegralD_i16G_class B_LogicalD_IntegralD_i16G_methods;
B_LogicalD_IntegralD_i16 B_LogicalD_IntegralD_i16G_new(B_Integral);
extern struct B_DivD_i16G_class B_DivD_i16G_methods;
B_DivD_i16 B_DivD_i16G_new();
extern struct B_OrdD_i16G_class B_OrdD_i16G_methods;
B_OrdD_i16 B_OrdD_i16G_new();
extern struct B_HashableD_i16G_class B_HashableD_i16G_methods;
extern struct B_IntegralD_u64G_class B_IntegralD_u64G_methods;
B_IntegralD_u64 B_IntegralD_u64G_new();
extern struct B_MinusD_IntegralD_u64G_class B_MinusD_IntegralD_u64G_methods;
B_MinusD_IntegralD_u64 B_MinusD_IntegralD_u64G_new(B_Integral);
extern struct B_LogicalD_IntegralD_u64G_class B_LogicalD_IntegralD_u64G_methods;
B_LogicalD_IntegralD_u64 B_LogicalD_IntegralD_u64G_new(B_Integral);
extern struct B_DivD_u64G_class B_DivD_u64G_methods;
B_DivD_u64 B_DivD_u64G_new();
extern struct B_OrdD_u64G_class B_OrdD_u64G_methods;
B_OrdD_u64 B_OrdD_u64G_new();
extern struct B_HashableD_u64G_class B_HashableD_u64G_methods;
extern struct B_IntegralD_u32G_class B_IntegralD_u32G_methods;
B_IntegralD_u32 B_IntegralD_u32G_new();
extern struct B_MinusD_IntegralD_u32G_class B_MinusD_IntegralD_u32G_methods;
B_MinusD_IntegralD_u32 B_MinusD_IntegralD_u32G_new(B_Integral);
extern struct B_LogicalD_IntegralD_u32G_class B_LogicalD_IntegralD_u32G_methods;
B_LogicalD_IntegralD_u32 B_LogicalD_IntegralD_u32G_new(B_Integral);
extern struct B_DivD_u32G_class B_DivD_u32G_methods;
B_DivD_u32 B_DivD_u32G_new();
extern struct B_OrdD_u32G_class B_OrdD_u32G_methods;
B_OrdD_u32 B_OrdD_u32G_new();
extern struct B_HashableD_u32G_class B_HashableD_u32G_methods;
extern struct B_IntegralD_u16G_class B_IntegralD_u16G_methods;
B_IntegralD_u16 B_IntegralD_u16G_new();
extern struct B_MinusD_IntegralD_u16G_class B_MinusD_IntegralD_u16G_methods;
B_MinusD_IntegralD_u16 B_MinusD_IntegralD_u16G_new(B_Integral);
extern struct B_LogicalD_IntegralD_u16G_class B_LogicalD_IntegralD_u16G_methods;
B_LogicalD_IntegralD_u16 B_LogicalD_IntegralD_u16G_new(B_Integral);
extern struct B_DivD_u16G_class B_DivD_u16G_methods;
B_DivD_u16 B_DivD_u16G_new();
extern struct B_OrdD_u16G_class B_OrdD_u16G_methods;
B_OrdD_u16 B_OrdD_u16G_new();
extern struct B_HashableD_u16G_class B_HashableD_u16G_methods;
extern struct B_RealFloatD_floatG_class B_RealFloatD_floatG_methods;
B_RealFloatD_float B_RealFloatD_floatG_new();
extern struct B_MinusD_RealFloatD_floatG_class B_MinusD_RealFloatD_floatG_methods;
B_MinusD_RealFloatD_float B_MinusD_RealFloatD_floatG_new(B_RealFloat);
extern struct B_DivD_floatG_class B_DivD_floatG_methods;
B_DivD_float B_DivD_floatG_new();
extern struct B_OrdD_floatG_class B_OrdD_floatG_methods;
B_OrdD_float B_OrdD_floatG_new();
extern struct B_HashableD_floatG_class B_HashableD_floatG_methods;
extern struct B_NumberD_complexG_class B_NumberD_complexG_methods;
B_NumberD_complex B_NumberD_complexG_new();
extern struct B_MinusD_NumberD_complexG_class B_MinusD_NumberD_complexG_methods;
B_MinusD_NumberD_complex B_MinusD_NumberD_complexG_new(B_Number);
extern struct B_DivD_complexG_class B_DivD_complexG_methods;
B_DivD_complex B_DivD_complexG_new();
extern struct B_EqD_complexG_class B_EqD_complexG_methods;
B_EqD_complex B_EqD_complexG_new();
extern struct B_HashableD_complexG_class B_HashableD_complexG_methods;
extern struct B_IndexedG_class B_IndexedG_methods;
extern struct B_SliceableG_class B_SliceableG_methods;
extern struct B_CollectionG_class B_CollectionG_methods;
extern struct B_ContainerG_class B_ContainerG_methods;
extern struct B_SequenceG_class B_SequenceG_methods;
extern struct B_CollectionD_SequenceG_class B_CollectionD_SequenceG_methods;
extern struct B_TimesD_SequenceG_class B_TimesD_SequenceG_methods;
extern struct B_MappingG_class B_MappingG_methods;
extern struct B_IndexedD_MappingG_class B_IndexedD_MappingG_methods;
extern struct B_SetG_class B_SetG_methods;
extern struct B_OrdD_SetG_class B_OrdD_SetG_methods;
extern struct B_LogicalD_SetG_class B_LogicalD_SetG_methods;
extern struct B_MinusD_SetG_class B_MinusD_SetG_methods;
extern struct B_SequenceD_listG_class B_SequenceD_listG_methods;
B_SequenceD_list B_SequenceD_listG_new();
extern struct B_CollectionD_SequenceD_listG_class B_CollectionD_SequenceD_listG_methods;
B_CollectionD_SequenceD_list B_CollectionD_SequenceD_listG_new(B_Sequence);
extern struct B_TimesD_SequenceD_listG_class B_TimesD_SequenceD_listG_methods;
B_TimesD_SequenceD_list B_TimesD_SequenceD_listG_new(B_Sequence);
extern struct B_ContainerD_listG_class B_ContainerD_listG_methods;
extern struct B_OrdD_listG_class B_OrdD_listG_methods;
B_OrdD_list B_OrdD_listG_new(B_Ord);
extern struct B_MappingD_dictG_class B_MappingD_dictG_methods;
B_MappingD_dict B_MappingD_dictG_new(B_Hashable);
extern struct B_IndexedD_MappingD_dictG_class B_IndexedD_MappingD_dictG_methods;
B_IndexedD_MappingD_dict B_IndexedD_MappingD_dictG_new(B_Hashable, B_Mapping);
extern struct B_OrdD_dictG_class B_OrdD_dictG_methods;
B_OrdD_dict B_OrdD_dictG_new(B_Hashable, B_Eq);
extern struct B_SetD_setG_class B_SetD_setG_methods;
B_SetD_set B_SetD_setG_new(B_Hashable);
extern struct B_OrdD_SetD_setG_class B_OrdD_SetD_setG_methods;
B_OrdD_SetD_set B_OrdD_SetD_setG_new(B_Hashable, B_Set);
extern struct B_LogicalD_SetD_setG_class B_LogicalD_SetD_setG_methods;
B_LogicalD_SetD_set B_LogicalD_SetD_setG_new(B_Hashable, B_Set);
extern struct B_MinusD_SetD_setG_class B_MinusD_SetD_setG_methods;
B_MinusD_SetD_set B_MinusD_SetD_setG_new(B_Hashable, B_Set);
extern struct B_IterableD_IteratorG_class B_IterableD_IteratorG_methods;
B_IterableD_Iterator B_IterableD_IteratorG_new();
extern struct B_IterableD_rangeG_class B_IterableD_rangeG_methods;
B_IterableD_range B_IterableD_rangeG_new();
extern struct B_OrdD_strG_class B_OrdD_strG_methods;
B_OrdD_str B_OrdD_strG_new();
extern struct B_ContainerD_strG_class B_ContainerD_strG_methods;
B_ContainerD_str B_ContainerD_strG_new();
extern struct B_SliceableD_strG_class B_SliceableD_strG_methods;
B_SliceableD_str B_SliceableD_strG_new();
extern struct B_TimesD_strG_class B_TimesD_strG_methods;
B_TimesD_str B_TimesD_strG_new();
extern struct B_HashableD_strG_class B_HashableD_strG_methods;
extern struct B_OrdD_bytearrayG_class B_OrdD_bytearrayG_methods;
B_OrdD_bytearray B_OrdD_bytearrayG_new();
extern struct B_SequenceD_bytearrayG_class B_SequenceD_bytearrayG_methods;
B_SequenceD_bytearray B_SequenceD_bytearrayG_new();
extern struct B_CollectionD_SequenceD_bytearrayG_class B_CollectionD_SequenceD_bytearrayG_methods;
B_CollectionD_SequenceD_bytearray B_CollectionD_SequenceD_bytearrayG_new(B_Sequence);
extern struct B_TimesD_SequenceD_bytearrayG_class B_TimesD_SequenceD_bytearrayG_methods;
B_TimesD_SequenceD_bytearray B_TimesD_SequenceD_bytearrayG_new(B_Sequence);
extern struct B_ContainerD_bytearrayG_class B_ContainerD_bytearrayG_methods;
extern struct B_OrdD_bytesG_class B_OrdD_bytesG_methods;
B_OrdD_bytes B_OrdD_bytesG_new();
extern struct B_SliceableD_bytesG_class B_SliceableD_bytesG_methods;
B_SliceableD_bytes B_SliceableD_bytesG_new();
extern struct B_ContainerD_bytesG_class B_ContainerD_bytesG_methods;
B_ContainerD_bytes B_ContainerD_bytesG_new();
extern struct B_TimesD_bytesG_class B_TimesD_bytesG_methods;
B_TimesD_bytes B_TimesD_bytesG_new();
extern struct B_HashableD_bytesG_class B_HashableD_bytesG_methods;
$WORD B_abs (B_Real, B_Number, $WORD);
B_bool B_all (B_Iterable, $WORD);
B_bool B_any (B_Iterable, $WORD);
B_str B_ascii (B_value);
B_str B_bin (B_Integral, $WORD);
B_str B_chr (B_Integral, $WORD);
B_tuple B_divmod (B_Integral, $WORD, $WORD);
B_Iterator B_enumerate (B_Iterable, $WORD, B_int);
B_Iterator B_filter (B_Iterable, $pure, $WORD);
B_int B_hash (B_Hashable, $WORD);
B_str B_hex (B_Integral, $WORD);
B_Iterator B_iter (B_Iterable, $WORD);
B_int B_len (B_Collection, $WORD);
B_Iterator B_map (B_Iterable, $pure, $WORD);
$WORD B_max (B_Ord, B_Iterable, $WORD, $WORD);
$WORD B_min (B_Ord, B_Iterable, $WORD, $WORD);
$WORD B_next (B_Iterator);
B_int B_ord (B_str);
$WORD B_pow (B_Number, $WORD, $WORD);
B_NoneType B_print (B_tuple);
B_str B_repr (B_value);
B_Iterator B_reversed (B_Sequence, $WORD);
$WORD B_round (B_Real, $WORD, B_int);
B_list B_sorted (B_Ord, B_Iterable, $WORD);
$WORD B_sum (B_Plus, B_Iterable, $WORD, $WORD);
B_Iterator B_zip (B_Iterable, B_Iterable, $WORD, $WORD);
B_int B_gcd (B_int, B_int);
B_tuple B_xgcd (B_int, B_int);
struct B_L_1proc;
struct B_L_2proc;
struct B_L_3proc;
struct B_L_5Cont;
struct B_L_6proc;
struct B_WorldAuth;
struct B_Env;
typedef struct B_L_1proc *B_L_1proc;
typedef struct B_L_2proc *B_L_2proc;
typedef struct B_L_3proc *B_L_3proc;
typedef struct B_L_5Cont *B_L_5Cont;
typedef struct B_L_6proc *B_L_6proc;
typedef struct B_WorldAuth *B_WorldAuth;
typedef struct B_Env *B_Env;
struct B_L_1procG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_L_1proc, B_Env, B_str);
    void (*__serialize__) (B_L_1proc, $Serial$state);
    B_L_1proc (*__deserialize__) (B_L_1proc, $Serial$state);
    B_bool (*__bool__) (B_L_1proc);
    B_str (*__str__) (B_L_1proc);
    B_str (*__repr__) (B_L_1proc);
    $R (*__call__) (B_L_1proc, $Cont);
    $R (*__exec__) (B_L_1proc, $Cont);
};
struct B_L_1proc {
    struct B_L_1procG_class *$class;
    B_Env self;
    B_str s;
};
struct B_L_2procG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_L_2proc, B_Env, $action);
    void (*__serialize__) (B_L_2proc, $Serial$state);
    B_L_2proc (*__deserialize__) (B_L_2proc, $Serial$state);
    B_bool (*__bool__) (B_L_2proc);
    B_str (*__str__) (B_L_2proc);
    B_str (*__repr__) (B_L_2proc);
    $R (*__call__) (B_L_2proc, $Cont);
    $R (*__exec__) (B_L_2proc, $Cont);
};
struct B_L_2proc {
    struct B_L_2procG_class *$class;
    B_Env self;
    $action cb;
};
struct B_L_3procG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_L_3proc, B_Env, B_int);
    void (*__serialize__) (B_L_3proc, $Serial$state);
    B_L_3proc (*__deserialize__) (B_L_3proc, $Serial$state);
    B_bool (*__bool__) (B_L_3proc);
    B_str (*__str__) (B_L_3proc);
    B_str (*__repr__) (B_L_3proc);
    $R (*__call__) (B_L_3proc, $Cont);
    $R (*__exec__) (B_L_3proc, $Cont);
};
struct B_L_3proc {
    struct B_L_3procG_class *$class;
    B_Env self;
    B_int n;
};
$R B_L_4C_1cont (B_Env, $Cont, B_NoneType);
struct B_L_5ContG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_L_5Cont, B_Env, $Cont);
    void (*__serialize__) (B_L_5Cont, $Serial$state);
    B_L_5Cont (*__deserialize__) (B_L_5Cont, $Serial$state);
    B_bool (*__bool__) (B_L_5Cont);
    B_str (*__str__) (B_L_5Cont);
    B_str (*__repr__) (B_L_5Cont);
    $R (*__call__) (B_L_5Cont, B_NoneType);
};
struct B_L_5Cont {
    struct B_L_5ContG_class *$class;
    B_Env G_act;
    $Cont C_cont;
};
struct B_L_6procG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_L_6proc, B_Env, B_WorldAuth, B_list);
    void (*__serialize__) (B_L_6proc, $Serial$state);
    B_L_6proc (*__deserialize__) (B_L_6proc, $Serial$state);
    B_bool (*__bool__) (B_L_6proc);
    B_str (*__str__) (B_L_6proc);
    B_str (*__repr__) (B_L_6proc);
    $R (*__call__) (B_L_6proc, $Cont);
    $R (*__exec__) (B_L_6proc, $Cont);
};
struct B_L_6proc {
    struct B_L_6procG_class *$class;
    B_Env G_act;
    B_WorldAuth token;
    B_list args;
};
struct B_WorldAuthG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    B_NoneType (*__init__) (B_WorldAuth);
    void (*__serialize__) (B_WorldAuth, $Serial$state);
    B_WorldAuth (*__deserialize__) (B_WorldAuth, $Serial$state);
    B_bool (*__bool__) (B_WorldAuth);
    B_str (*__str__) (B_WorldAuth);
    B_str (*__repr__) (B_WorldAuth);
};
struct B_WorldAuth {
    struct B_WorldAuthG_class *$class;
};
struct B_EnvG_class {
    char *$GCINFO;
    int $class_id;
    $SuperG_class $superclass;
    $R (*__init__) (B_Env, $Cont, B_WorldAuth, B_list);
    void (*__serialize__) (B_Env, $Serial$state);
    B_Env (*__deserialize__) (B_Env, $Serial$state);
    B_bool (*__bool__) (B_Env);
    B_str (*__str__) (B_Env);
    B_str (*__repr__) (B_Env);
    B_NoneType (*__resume__) (B_Env);
    $R (*stdout_writeG_local) (B_Env, $Cont, B_str);
    $R (*stdin_installG_local) (B_Env, $Cont, $action);
    $R (*exitG_local) (B_Env, $Cont, B_int);
    B_Msg (*stdout_write) (B_Env, B_str);
    B_Msg (*stdin_install) (B_Env, $action);
    B_Msg (*exit) (B_Env, B_int);
};
struct B_Env {
    struct B_EnvG_class *$class;
    $Actor $next;
    B_Msg $msg;
    B_Msg $outgoing;
    B_Msg $waitsfor;
    $int64 $consume_hd;
    $Catcher $catcher;
    $Lock $msg_lock;
    $long $globkey;
    $int64 $affinity;
    B_WorldAuth token;
    B_list args;
    B_WorldAuth auth;
    B_list argv;
};
$R B_EnvG_newact ($Cont, B_WorldAuth, B_list);
extern struct B_L_1procG_class B_L_1procG_methods;
B_L_1proc B_L_1procG_new(B_Env, B_str);
extern struct B_L_2procG_class B_L_2procG_methods;
B_L_2proc B_L_2procG_new(B_Env, $action);
extern struct B_L_3procG_class B_L_3procG_methods;
B_L_3proc B_L_3procG_new(B_Env, B_int);
extern struct B_L_5ContG_class B_L_5ContG_methods;
B_L_5Cont B_L_5ContG_new(B_Env, $Cont);
extern struct B_L_6procG_class B_L_6procG_methods;
B_L_6proc B_L_6procG_new(B_Env, B_WorldAuth, B_list);
extern struct B_WorldAuthG_class B_WorldAuthG_methods;
extern struct B_EnvG_class B_EnvG_methods;
$R B_EnvG_new($Cont, B_WorldAuth, B_list);
void B___init__ ();


// Manual additions to __builtin__.h

B_HashableD_int B_HashableD_intG_new();
B_HashableD_i64 B_HashableD_i64G_new();
B_HashableD_i32 B_HashableD_i32G_new();
B_HashableD_i16 B_HashableD_i16G_new();
B_HashableD_u64 B_HashableD_u64G_new();
B_HashableD_u32 B_HashableD_u32G_new();
B_HashableD_u16 B_HashableD_u16G_new();
B_HashableD_str B_HashableD_srtG_new();
B_HashableD_bytes B_HashableD_bytesG_new();

B_ContainerD_list B_ContainerD_listG_new(B_Eq);
