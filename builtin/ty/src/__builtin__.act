# Copyright (C) 2019-2021 Data Ductus AB
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

## Built-in types ##################################################################################

class value:
  __init__ : () -> None
  __bool__ : () -> bool
  __str__ : () -> str

class object (value):
  pass

class atom (value):
  pass

class int (atom):
  __init__ : (atom) -> None

class float (atom):
  __init__ : (atom) -> None

class bool (atom):
  __init__ : (value) -> None

class slice (value):
  __init__     : (?int,?int,?int) -> None
  
class list[A] (object):
  __init__     : (?Iterable[A]) -> None
  copy         : () -> list[A]

class range (value):
  __init__     : (int,?int,?int) -> None

class Iterator[A] (object):
  __next__     : () -> A
  
protocol Iterable[A]:
  __iter__     : () -> Iterator[A]
  
class str (atom):
  __init__     : (value) -> None
  capitalize   : () -> str
  center       : (int,?str) -> str
  count        : (str,?int,?int) -> int
  encode       : () -> bytearray
  endswith     : (str,?int,?int) -> bool
  expandtabs   : (?int) -> str
  find         : (str,?int,?int) -> int
  index        : (str,?int,?int) -> int
  isalnum      : () -> bool
  isalpha      : () -> bool
  isascii      : () -> bool
  isdecimal    : () -> bool
  islower      : () -> bool
  isprintable  : () -> bool
  isspace      : () -> bool
  istitle      : () -> bool
  isupper      : () -> bool
  join         : (Iterable[str]) -> str
  ljust        : (int,?str) -> str
  lower        : () -> str
  lstrip       : (str) -> str
  partition    : (str) -> (str,str,str)
  replace      : (str,str,?int) -> str
  rfind        : (str,?int,?int) -> int
  rindex       : (str,?int,?int) -> int
  rjust        : (int,?str) -> str
  rpartition   : (str) -> (str,str,str)
  rstrip       : (?str) -> str
  split        : (str,?int) -> list[str]
  splitlines   : (?bool) -> list[str]
  startswith   : (str,?int,?int) -> bool
  strip        : (?str) -> str
  upper        : () -> str
  zfill        : (str,int) -> str

class bytes (value):
  __init__     : (Iterable[int]) -> None
  capitalize   : () -> bytes
  center       : (int,?bytes) -> bytes
  count        : (bytes,?int,?int) -> int
  decode       : () -> str
  endswith     : (bytes,?int,?int) -> bool
  expandtabs   : (?int) -> bytes
  find         : (bytes,?int,?int) -> int
  index        : (bytes,?int,?int) -> int
  isalnum      : () -> bool
  isalpha      : () -> bool
  isascii      : () -> bool
  isdigit      : () -> bool
  islower      : () -> bool
  isprintable  : () -> bool
  isspace      : () -> bool
  istitle      : () -> bool
  isupper      : () -> bool
  join         : (Iterable[bytes]) -> bytes
  ljust        : (int,?bytes) -> bytes
  lower        : () -> bytes
  lstrip       : (bytes) -> bytes
  partition    : (bytes) -> (bytes,bytes,bytes)
  replace      : (bytes,bytes,?int) -> bytes
  rfind        : (bytes,?int,?int) -> int
  rindex       : (bytes,?int,?int) -> int
  rjust        : (int,?bytes) -> bytes
  rpartition   : (bytes) -> (bytes,bytes,bytes)
  rstrip       : (?bytes) -> bytes
  split        : (bytes,?int) -> list[bytes]
  splitlines   : (?bool) -> list[bytes]
  startswith   : (bytes,?int,?int) -> bool
  strip        : (?bytes) -> bytes
  upper        : () -> bytes
  zfill        : (bytes,int) -> bytes

class bytearray (object):
  __init__     : (bytes) -> None
  capitalize   : () -> bytearray
  center       : (int,?bytearray) -> bytearray
  count        : (bytearray,?int,?int) -> int
  decode       : () -> str
  endswith     : (bytearray,?int,?int) -> bool
  expandtabs   : (?int) -> bytearray
  find         : (bytearray,?int,?int) -> int
  index        : (bytearray,?int,?int) -> int
  isalnum      : () -> bool
  isalpha      : () -> bool
  isascii      : () -> bool
  isdigit      : () -> bool
  islower      : () -> bool
  isprintable  : () -> bool
  isspace      : () -> bool
  istitle      : () -> bool
  isupper      : () -> bool
  join         : (Iterable[bytearray]) -> bytearray
  ljust        : (int,?bytearray) -> bytearray
  lower        : () -> bytearray
  lstrip       : (bytearray) -> bytearray
  partition    : (bytearray) -> (bytearray,bytearray,bytearray)
  replace      : (bytearray,bytearray,?int) -> bytearray
  rfind        : (bytearray,?int,?int) -> int
  rindex       : (bytearray,?int,?int) -> int
  rjust        : (int,?bytearray) -> bytearray
  rpartition   : (bytearray) -> (bytearray,bytearray,bytearray)
  rstrip       : (?bytearray) -> bytearray
  split        : (bytearray,?int) -> list[bytearray]
  splitlines   : (?bool) -> list[bytearray]
  startswith   : (bytearray,?int,?int) -> bool
  strip        : (?bytearray) -> bytearray
  upper        : () -> bytearray
  zfill        : (bytearray,int) -> bytearray

class function[X,P,K,A] (value):
    __call__   : X(*P,**K) -> A

class Msg[A] (value):
  pass

## Exceptions ##################################################################################

class BaseException (value):
  __init__ : (str) -> None

class SystemExit (BaseException):
  pass

class KeyboardInterrupt (BaseException):
  pass

class Exception (BaseException):
  pass

class AssertionError (Exception):
  pass

class LookupError (Exception):
  pass

class IndexError (LookupError):
  pass

class KeyError (LookupError):
  pass

class MemoryError (Exception):
  pass

class OSError (Exception):
  pass

class RuntimeError (Exception):
  pass

class NotImplementedError (RuntimeError):
  pass

class ValueError (Exception):
  pass

## General protocols ###############################################################################

protocol Identity:
  @staticmethod
  __is__        : (Self,Self) -> bool
  @staticmethod
  __isnot__     : (Self,Self) -> bool

protocol Eq:
  @staticmethod
  __eq__       : (Self,Self) -> bool
  @staticmethod
  __ne__       : (Self,Self) -> bool
  def __ne__(a,b):
      return not (a == b)

protocol Ord (Eq):
  @staticmethod
  __lt__       : (Self,Self) -> bool
  @staticmethod
  __le__       : (Self,Self) -> bool
  @staticmethod
  __gt__       : (Self,Self) -> bool 
  @staticmethod
  __ge__       : (Self,Self) -> bool 

  def __gt__(a,b):
      return b < a
  def __ge__(a,b):
      return b <= a
      
protocol Logical:
  @staticmethod
  __and__     : (Self,Self) -> Self
  @staticmethod
  __or__      : (Self,Self) -> Self
  @staticmethod
  __xor__     : (Self,Self) -> Self

  @staticmethod
  __iand__    : (Self,Self) -> Self
  @staticmethod
  __ior__     : (Self,Self) -> Self
  @staticmethod
  __ixor__    : (Self,Self) -> Self
  
  def __iand__(a,b):
      return a & b
  def __ior__(a,b):
      return a | b
  def __ixor__(a,b):
      return a ^ b

protocol Plus:
  @staticmethod
  __add__      : (Self,Self) -> Self
  @staticmethod
  __iadd__     : (Self,Self) -> Self
  
  def __iadd__(a,b):
      return a + b

protocol Minus:
  @staticmethod
  __sub__      : (Self,Self) -> Self
  @staticmethod
  __isub__     : (Self,Self) -> Self
  
  def __isub__(a,b):
      return a - b

protocol Times[A] (Plus):
  @staticmethod
  __mul__      : (Self,A) -> Self
  @staticmethod
  __imul__     : (Self,A) -> Self

  def __imul__(a,b):
      return a * b

protocol Div[A]:
 @staticmethod
 __truediv__  : (Self,Self) -> A
 @staticmethod
 __itruediv__ : (Self,Self) -> A

 def __itruediv__(a,b):
     return a / b

protocol Hashable (Eq):
  __hash__     : () -> int


class complex (value):
  __init__ : (Number) -> None

class dict[A(Hashable),B] (object):
  __init__     : (?Iterable[(A,B)]) -> None

class set[A(Hashable)] (object):
  __init__     : (?Iterable[A]) -> None

## Number protocols ################################################################################

#   Plus
#    |
#    |
#   Times           Minus
#    |               |
#    |               |
#   Number <----------
#    |
#    |
#   Real
#    |
#    |
#   Rational        Logical
#    |               |
#    |               |
#   Integral <--------

protocol Number (Times[Self],Minus):
  @staticmethod
  __fromatom__ : (atom) -> Self

  __complex__  : () -> complex

  @staticmethod
  __pow__      : (Self,Self) -> Self

  @staticmethod
  __ipow__     : (Self,Self) -> Self
  
  def __ipow__(a,b):
      return a ** b

  __neg__      : () -> Self
  __pos__      : () -> Self
  
  real         : () -> Real
  imag         : () -> Real
  __abs__      : () -> Real  # What about arg?

  conjugate    : () -> Self

protocol Real (Number):
  __float__    : () -> float

  __trunc__    : () -> Integral
  __floor__    : () -> Integral
  __ceil__     : () -> Integral

  __round__    : (?int) -> Self

protocol RealFloat (Real):
  pass

protocol Rational (Real):
  numerator    : () -> Integral
  denominator  : () -> Integral

protocol Integral (Rational,Logical):
  __int__      : () -> int
  __index__    : () -> int

  @staticmethod
  __divmod__   : (Self,Self) -> (Self,Self)
  @staticmethod
  __floordiv__ : (Self,Self) -> Self
  @staticmethod
  __mod__      : (Self,Self) -> Self

  @staticmethod
  __ifloordiv__ : (Self,Self) -> Self
  @staticmethod
  __imod__     : (Self,Self) -> Self
  
  @staticmethod
  __lshift__   : (Self,int) -> Self
  @staticmethod
  __rshift__   : (Self,int) -> Self

  @staticmethod
  __ilshift__  : (Self,int) -> Self
  @staticmethod
  __irshift__  : (Self,int) -> Self

  def __ifloordiv__(a,b):
    return a // b
  def __imod__(a,b):
    return a % b
  def __ilshift__(a,b):
    return a << b
  def __irshift__(a,b):
    return a >> b

  __invert__   : () -> Self

## Number protocol extensions ######################################################################

extension int (Integral):pass
extension int (Div[float]):pass
extension int (Ord):pass
extension int (Hashable):pass

extension float (RealFloat):pass
extension float (Div[float]):pass
extension float (Ord):pass
extension float (Hashable):pass

extension complex (Number):pass
extension complex (Div[complex]):pass
extension complex (Eq):pass
extension complex (Hashable):pass

## Collection protocols ############################################################################

protocol Indexed[A (Eq),B]:
  __getitem__  : (A) -> B
  __setitem__  : (A,B) -> None 
  __delitem__  : (A) -> None

protocol Sliceable[A] (Indexed[int,A]):
  __getslice__ : (slice) -> Self
  __setslice__ : (slice,Iterable[A]) -> None
  __delslice__ : (slice) -> None
  
protocol Collection[A] (Iterable[A]):
  @staticmethod
  __fromiter__ : (Iterable[A]) -> Self 
  __len__      : () -> int
  
protocol Container[A(Eq)] (Collection[A]):
  __contains__    : (A) -> bool  
  __containsnot__ : (A) -> bool



#   Indexed         Iterable
#    |               |
#    |               |
#   Sliceable       Collection      Times
#    |               |               |
#    |               |               |
#   Sequence <-------- <--------------

protocol Sequence[A] (Sliceable[A], Collection[A], Times[int]):
  __reversed__ : () -> Iterator[A] 
  insert      : (int,A) -> None
  append      : (A) -> None   
  reverse     : () -> None       



#   Iterable
#    |
#    |
#   Collection
#    |
#    |
#   Container       Indexed
#    |               |
#    |               |
#   Mapping <---------

protocol Mapping[A(Eq),B] (Container[A], Indexed[A,B]):
  get         : (A,B) -> B
  keys        : () -> Iterator[A]
  values      : () -> Iterator[B]
  items       : () -> Iterator[(A,B)]
  update      : (Iterable[(A,B)]) -> None  
  popitem     : () -> (A,B)
  setdefault  : (A,B) -> None



#   Iterable
#    |
#    |
#   Collection      Eq
#    |               |
#    |               |
#   Container       Ord             Logical         Minus
#    |               |               |               |
#    |               |               |               |
#   Set <------------- <-------------- <--------------

protocol Set[A (Eq)] (Container[A], Ord, Logical, Minus):
  @staticmethod
  isdisjoint  : (Self,Self) -> bool
  add         : (A) -> None  
  discard     : (A) -> None  
  pop         : () -> A 


## Collection protocol extensions ########################################

extension list[A] (Sequence[A]): pass

extension list[A(Eq)] (Container[A]):pass

extension dict[A(Hashable),B] (Mapping[A,B]): pass

extension set[A(Hashable)] (Set[A]): pass

extension Iterator[A](Iterable[A]): pass

extension range (Iterable[int]): pass

extension str (Ord): pass

extension str (Container[str]): pass

extension str (Sliceable[str]): pass

extension str (Times[int]): pass

extension str (Hashable): pass

extension bytearray (Ord): pass

extension bytearray (Sequence[int]): pass

extension bytearray (Container[int]): pass

extension bytes (Ord): pass

extension bytes (Sliceable[int]): pass

extension bytes (Container[int]): pass

extension bytes (Times[int]): pass

extension bytes (Hashable): pass

## Builtin functions #####################################################

def abs(x : Number) -> Real:
    return x.__abs__()

def all(it : Iterable[A]) -> bool:
    for x in it:
        if not x:
            return False
    return True

def any(it : Iterable[A]) -> bool:
    for x in it:
        if x:
            return True
    return False

ascii : (*A) -> str

bin : (Integral) -> str

chr : (Integral) -> str

def divmod [A(Integral)] (a : A, b : A) -> (A, A): 
  return Integral.__divmod__(a,b)

enumerate : (Iterable[A],?int) -> Iterator[(int,A)]

filter : (?((A) -> B), Iterable[A]) -> Iterator[A]

def hash(x : Hashable) -> int:
  return x.__hash__()

hex : (Integral) -> str

def iter(x : Iterable[A]) -> Iterator[A]:
  return x.__iter__()

def len(x : Collection[A]) -> int:
  return x.__len__()

map : ((A) -> B,Iterable[A]) -> Iterator[B]

max : [A(Ord)] => (Iterable[A],?A) -> A 

min : [A(Ord)] => (Iterable[A],?A) -> A 

def next(x : Iterator[A]) -> A:
  return x.__next__()

ord : (str) -> int

def pow [A(Number)] (a : A, b : A) -> A:
  return Number.__pow__(a,b)

print :  (*A) -> None

def reversed(seq : Sequence[A]) -> Iterator[A]:
  return seq.__reversed__()

def round [A(Real)] (x : A, n : ?int) -> A:
  return x.__round__(n)

sorted : [A(Ord)] => (Iterable[A]) -> list[A]

sum : [A(Plus)] => (Iterable[A],?A) -> A

zip : (Iterable[A], Iterable[B]) -> Iterator[(A,B)]

## Environment ################################################

actor Env (args):
    argv : list[str]
    argv = args

    stdout_write : action(str) -> None
    stdin_install: action(action(str)->None) -> None
    connect      : action(str, int, action(?Connection)->None) -> None
    listen       : action(int, action(Connection)->None, action(ListenSocket)->None) -> ?ListenSocket
    exit         : action(int) -> None
    openR        : action(str) -> ?RFile
    openW        : action(str) -> ?WFile

    def stdout_write(s): pass
    def stdin_install(cb): pass
    def connect(host,port,cb): pass
    def listen(port, on_connect, on_error): pass
    def exit(n): pass
    def openR(nm): pass
    def openW(nm): pass

    _abstract   : () -> None

actor Connection (on_error):
    cb_err = on_error

    write       : action(str) -> None
    close       : action() -> None
    on_receive  : action(action(Connection, str)->None, action(Connection, str)->None) -> None

    def write(s): pass
    def close() : pass
    def on_receive(cb1, cb2): pass

    _abstract   : () -> None

actor RFile ():
    readln      : action() -> ?str
    close       : action() -> None

    def readln(): return ""
    def close() : pass

    _abstract   : () -> None

actor WFile ():
    write       : action(str) -> None
    close       : action() -> None

    def write(s): pass
    def close() : pass
    
    _abstract   : () -> None

actor ListenSocket (on_connect: action() -> None, on_error: action() -> None):
    cb_err = on_error

    close       : action() -> None

    def close(): pass

    _abstract   : () -> None
