protocol Pro:
    pro : () -> int

extension list[A] (Pro):
    def pro(self):
        return 0

extension list[int] (Pro):
    def pro(self):
        return 1

extension list[float] (Pro):
    def pro(self):
        return 2


def f(x:str):
    y = list([x])
    return y.pro()      # Resolved by extension list[A] (Pro)

def g(x):               # x defaulted to int because constraint list[X](Pro) is not qualifiable
    y = list([x])
    return y.pro()      # Resolved by extension list[int] (Pro)

def h(x:float):
    y = list([x])
    return y.pro()      # Resolved by extension list[float] (Pro)

actor main(env):
    print("Should be 0:", f(""))
    print("Should be 1:", g(0))
    print("Should be 2:", h(3.14))
    exit(env.cap, 0)
