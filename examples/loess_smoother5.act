import numpy
import math
from numpy import ndarray

# run as follows:

# script -q /dev/null examples/loess_smoother5 312 104 | gnuplot

# first command line argument:  nr of weeks shown in window. 1/8 of this number is size of the new sample introduced in each step.
# second command line argument: nr of weeks to be used in "loess window" for long term trend. 

def loess(x, y, xin, win):
    xd  = numpy.abs(xin[:,numpy.newaxis] - x)
    q   = xd/numpy.partition(xd,win)[:,win][:,numpy.newaxis]
    w   = numpy.clip(q, 0, 1)
    ws  = (1.0 - w ** 3.0) ** 3.0
    a00 = numpy.sum(ws, 1)
    a01 = numpy.dot(ws, x)
    a11 = numpy.dot(ws, x*x)
    b0  = numpy.dot(ws, y)
    b1  = numpy.dot(ws, x*y)
    det = a00*a11-a01*a01
    return ((a11*b0 - a01*b1) + (-a01*b0 + a00*b1)*xin)/det

def decompose(observed, time, period, lo_window_frac): 
    n                = len(observed)
    phase            = n % period
    trend            = loess(time, observed, time, int(lo_window_frac * float(n)))
    detrended        = observed - trend
    detrended_smooth = loess(time, detrended, time, period//3)                                 # smoothen over small window to get nicer periodic
    period_averages  = numpy.mean(detrended_smooth[:n - phase:].reshape([n//period,period]),0) # reshape to get one period per row, do mean over columns
    period_averages  -= numpy.mean(period_averages,None)
    seasonal         = numpy.tile(period_averages, n//period + 1)[:n:]
    residual         = detrended - seasonal
    
    return (trend, seasonal, residual, period_averages, phase) 
          
actor analyzer(window_size, loess_win_size):
    var time        = numpy.linspace(-float(window_size)/52, 0, window_size)
    var observation = numpy.zeros(window_size)

    def add_sample(x, y):
       time        = numpy.concatenate([time[len(x):],x])
       observation = numpy.concatenate([observation[len(y):],y])
       trend, seasonal, resid, periodic, phase = decompose(observation, time, 52, 0.6)
       print("clear\n$data <<EOD")
       for i in range(0, window_size, 1):
           print(time[i], observation[i], trend[i], seasonal[i], resid[i])
       print("EOD")
       t0 = numpy.scalar(time[0])
       t1 = t0 + float(window_size)/52
       print("plot [",t0,":",t1,"][-1:5] \'$data\' using 1:2 with lines title \"observations\", \\")
       print("\'$data\' using 1:3 with lines title \"trend\", \\")
       print("\'$data\' using 1:4 with lines title \"periodic\", \\")
       print("\'$data\' using 1:5 with lines title \"residual\"")

actor sampler(sample_size, report):
    var t0 = 0

    def _sample():
        t1           = t0+float(sample_size)/52
        time         = numpy.linspace(t0, t1, sample_size)
        trend        = 2.0 + 0.1 * time
        periodic     = 0.5 * math.sin (6.2832 * time)
        noise        = numpy.unirandfloat(-0.5, 0.5, sample_size)
        observation  = trend + periodic + noise
        t0           = t1
        report(time, observation)
        after 4: _sample()

    _sample()

actor main(env):
    if len(env.argv) != 3:
        print("usage: loess_smoother5 >weeks in graph> <weeks in loess_window>")
        env.exit(0)
    win_width = int(env.argv[1])
    loess_win_width = int(env.argv[2])
    a = analyzer(win_width, loess_win_width)
    s = sampler(win_width//8, a.add_sample)

