import file

from buildy import *

def get_deps_recursive(file_cap: file.FileCap, proj_dir: str, fsin: ?file.FS=None) -> (pkg_deps: dict[str, PkgDependency], zig_deps: dict[str, ZigDependency]):
    fs = fsin if fsin is not None else file.FS(file_cap)
    rfile_cap = file.ReadFileCap(file_cap)

    def get_dep_path(dep: Dependency) -> str:
        dep_path = dep.path
        if dep_path is not None:
            return file.join_path([proj_dir, dep_path])

        dep_hash = dep.hash
        if dep_hash is not None:
            return file.join_path([fs.homedir(), ".cache", "acton", "deps", "%s-%s" % (dep.name, dep_hash)])
        raise ValueError("Dependency %s has no path or hash" % dep.name)

    try:
        bconf_path = file.join_path([proj_dir, "build.act.json"])
        build_config = BuildConfig.from_json(file.ReadFile(rfile_cap, bconf_path).read().decode())

        pkg_res: dict[str, PkgDependency] = {}
        zig_res: dict[str, ZigDependency] = {}

        pkg_res.update(build_config.dependencies.items())
        zig_res.update(build_config.zig_dependencies.items())

        for dep_name, dep in build_config.dependencies.items():
            dpath = get_dep_path(dep)
            dep_deps = get_deps_recursive(file_cap, get_dep_path(dep), fs)
            pkg_res.update(dep_deps.pkg_deps.items())
            zig_res.update(dep_deps.zig_deps.items())

        return (pkg_deps=pkg_res, zig_deps=zig_res)

    except FileNotFoundError:
        return (pkg_deps={}, zig_deps={})
