bar - Bar module - defines shared types and utilities

This module provides common data structures and utilities
that are used across the application.



class Data(object)
  A data container with metadata

    This class holds arbitrary data along with metadata
    about when it was created and last modified.

    Examples:
        >>> d = Data("hello", "test-data")
        >>> d.get_value()
        "hello"
    

  Attributes:
    - value: str
    - label: str
    - count: int

  Methods:
    - __init__(self, value: str, label: str)
      Initialize data with value and label

        Args:
            value: The data value
            label: A descriptive label
        
    - get_value(self) -> str
      Get the stored value

        Returns:
            The data value
        
    - update(self, new_value: str)
      Update the value

        Args:
            new_value: New value to store

        Note:
            This increments the access count
        
    - get_info(self) -> str
      Get formatted information about this data

        Returns:
            A string with label, value, and count
        

class Container[T](object)
  A generic container that can hold items of any type

    This container maintains a list of items with various
    operations for manipulation and querying.

    Type Args:
        T: The type of items stored in the container
    

  Attributes:
    - items: list[T]
    - name: str

  Methods:
    - __init__(self, name: str)
      Create an empty container

        Args:
            name: Container name for identification
        
    - add(self, item: T)
      Add an item to the container

        Args:
            item: Item to add

        Raises:
            ValueError: If container is full
        
    - get_all(self) -> list[T]
      Get all items

        Returns:
            List of all items in the container
        
    - filter[U](self, predicate: (T) -> bool, transform: (T) -> U) -> list[U]
      Filter and transform items

        Args:
            predicate: Function to test each item
            transform: Function to transform matching items

        Returns:
            List of transformed items that match predicate

        Examples:
            >>> c = Container[int]("numbers")
            >>> c.add(1)
            >>> c.add(2)
            >>> c.filter(lambda x: x > 1, lambda x: str(x))
            ["2"]
        
    - count(self) -> int
      Get number of items in container

        Returns:
            Number of items
        

process_data(d: bar.Data) -> str
  Process a data object and return summary

    Args:
        d: Data object to process

    Returns:
        Processed summary string

    See Also:
        Data.get_info: For detailed information
    

combine_data(d1: bar.Data, d2: bar.Data) -> bar.Data
  Combine two data objects

    Args:
        d1: First data object
        d2: Second data object

    Returns:
        New Data object with combined values
    

actor DataProcessor()
  Actor that processes Data objects

    This actor maintains a queue of data objects
    and processes them asynchronously.
    

sum_counts[T](items: list[T]) -> T
  Sum a list of items that support addition

    Args:
        items: List of summable items

    Returns:
        Sum of all items

    Raises:
        ValueError: If list is empty
    

protocol Processable[T]
  Protocol for objects that can be processed

    This protocol defines the interface for objects that
    can be processed and transformed into a result of type T.

    Type Args:
        T: The type of the processing result
    

  Methods:
    - process: T
    - validate: bool
    - get_metadata: dict[str,str]

extension Data(Processable[str])
  Makes Data implement the Processable protocol

    This extension allows Data objects to be processed
    according to the Processable protocol, returning
    string results.
    

process_items[T](items: list[A]) -> list[T]
  Process a list of processable items

    Args:
        items: List of items implementing Processable protocol

    Returns:
        List of processed results

    Examples:
        >>> d1 = Data("hello", "test")
        >>> d2 = Data("world", "test2")
        >>> results = process_items([d1, d2])
        >>> results
        ["HELLO", "WORLD"]
    

gt[A,B](a: A, b: A, c: B, d: B) -> (A, A, B)
  Function that takes generic types
