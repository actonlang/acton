
W_221: __builtin__.Number[__builtin__.int] = __builtin__.IntegralD_int()

W_223: __builtin__.Times[__builtin__.int, __builtin__.int] = __builtin__.IntegralD_int()

W_586: __builtin__.Plus[__builtin__.int] = __builtin__.IntegralD_int()

W_761: __builtin__.Eq[__builtin__.int] = __builtin__.OrdD_int()

with:
    # recursive group:
    actor Apa ():
        proc def setup (cb : action(__builtin__.int) -> __builtin__.int) -> None:
            print@[(__builtin__.str,)](*("setup",), sep = None, end = None, err = None, flush = None)
            cb(W_221.__fromatom__(0))
        proc def compute (cb : action(__builtin__.int) -> __builtin__.int) -> __builtin__.int:
            print@[(__builtin__.str,)](*("compute",), sep = None, end = None, err = None, flush = None)
            v: __builtin__.int = cb(W_221.__fromatom__(1))
            m: __builtin__.Msg[__builtin__.int] = (async cb)(W_221.__fromatom__(2))
            return W_223.__mul__(v, W_221.__fromatom__(10))
        proc def notice (i : __builtin__.int) -> __builtin__.int:
            print@[(__builtin__.str,)](*("notice",), sep = None, end = None, err = None, flush = None)
            return W_586.__add__(i, W_221.__fromatom__(1))
        setup(cb = action lambda (G_1y : __builtin__.int): $WRAP@[(), (i: __builtin__.int), __builtin__.int](self, notice)(i = G_1y))
        print@[(__builtin__.str,)](*("Apa",), sep = None, end = None, err = None, flush = None)
    actor Bepa ():
        proc def callback (i : __builtin__.int) -> __builtin__.int:
            print@[(__builtin__.str, __builtin__.int)](*("callback", i), sep = None, end = None, err = None, flush = None)
            return W_586.__add__(i, W_221.__fromatom__(1))
        print@[(__builtin__.str,)](*("Bepa",), sep = None, end = None, err = None, flush = None)
    actor main (env : __builtin__.Env):
        proc def myproc (i : __builtin__.int) -> __builtin__.int:
            print@[(__builtin__.str, __builtin__.int)](*("myproc", i), sep = None, end = None, err = None, flush = None)
            if W_761.__eq__(i, W_221.__fromatom__(2)):
                env.exit(n = W_221.__fromatom__(0))
            return i
        a: Apa = Apa()
        b: Bepa = Bepa()
        print@[(__builtin__.str,)](*("-----",), sep = None, end = None, err = None, flush = None)
        a.setup(cb = action lambda (G_1y : __builtin__.int): a.notice(i = G_1y))
        x: __builtin__.Msg[__builtin__.int] = (async action lambda (G_1p : action(__builtin__.int) -> __builtin__.int): a.compute(cb = G_1p))(b.callback)
        r: __builtin__.int = await x
        print@[(__builtin__.str, __builtin__.int)](*("r =", r), sep = None, end = None, err = None, flush = None)
        a.compute(cb = action lambda (G_1y : __builtin__.int): $WRAP@[(), (i: __builtin__.int), __builtin__.int](self, myproc)(i = G_1y))
        print@[(__builtin__.str,)](*("main",), sep = None, end = None, err = None, flush = None)
    # (recursive group)