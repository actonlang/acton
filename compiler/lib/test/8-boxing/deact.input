
W_221: __builtin__.Number[__builtin__.int] = __builtin__.IntegralD_int()

W_223: __builtin__.Times[__builtin__.int, __builtin__.int] = __builtin__.IntegralD_int()

W_586: __builtin__.Plus[__builtin__.int] = __builtin__.IntegralD_int()

W_761: __builtin__.Eq[__builtin__.int] = __builtin__.OrdD_int()

# recursive group:
proc def L_1C_1cont (C_cont : $Cont[None], C_2res : None) -> $R:
    print@[(__builtin__.str,)](("\"Apa\"",), None, None, None, None)
    return $R_CONT@[None](C_cont, None)
class L_2Cont ($Cont[None], __builtin__.value):
    @property
    C_cont : $Cont[None]
    pure def __init__ (L_self : Self, C_cont : $Cont[None]) -> None:
        L_self.C_cont = C_cont
        return None
    proc def __call__ (L_self : Self, G_1 : None) -> $R:
        C_cont: $Cont[None] = L_self.C_cont
        return L_1C_1cont(C_cont, G_1)
class L_4action ($action[(__builtin__.int,), __builtin__.int], $proc[(__builtin__.int,), __builtin__.int], __builtin__.value):
    @property
    L_3obj : Apa
    pure def __init__ (L_self : Self, L_3obj : Apa) -> None:
        L_self.L_3obj = L_3obj
        return None
    # recursive group:
    proc def __call__ (L_self : Self, L_cont : $Cont[__builtin__.int], G_1 : __builtin__.int) -> $R:
        return $AWAIT@[__builtin__.int](L_cont, L_self.__asyn__(G_1))
    proc def __exec__ (L_self : Self, L_cont : $Cont[__builtin__.value], G_1 : __builtin__.int) -> $R:
        return $R_CONT@[__builtin__.value](L_cont, L_self.__asyn__(G_1))
    action def __asyn__ (L_self : Self, G_1 : __builtin__.int) -> __builtin__.int:
        L_3obj: Apa = L_self.L_3obj
        return L_3obj.notice(G_1)
    # (recursive group)
proc def L_5C_3cont (cb : $action[(__builtin__.int,), __builtin__.int], C_cont : $Cont[__builtin__.int], C_4res : __builtin__.int) -> $R:
    v: __builtin__.int = C_4res
    m: __builtin__.Msg[__builtin__.int] = cb.__asyn__(W_221.__fromatom__(2))
    N_tmp: __builtin__.int = W_223.__mul__(v, W_221.__fromatom__(10))
    return $R_CONT@[__builtin__.int](C_cont, N_tmp)
class L_6Cont ($Cont[__builtin__.int], __builtin__.value):
    @property
    cb : $action[(__builtin__.int,), __builtin__.int]
    @property
    C_cont : $Cont[__builtin__.int]
    pure def __init__ (L_self : Self, cb : $action[(__builtin__.int,), __builtin__.int], C_cont : $Cont[__builtin__.int]) -> None:
        L_self.cb = cb
        L_self.C_cont = C_cont
        return None
    proc def __call__ (L_self : Self, G_1 : __builtin__.int) -> $R:
        cb: $action[(__builtin__.int,), __builtin__.int] = L_self.cb
        C_cont: $Cont[__builtin__.int] = L_self.C_cont
        return L_5C_3cont(cb, C_cont, G_1)
class L_7proc ($proc[(), None], __builtin__.value):
    @property
    self : Apa
    @property
    cb : $action[(__builtin__.int,), __builtin__.int]
    pure def __init__ (L_self : Self, self : Apa, cb : $action[(__builtin__.int,), __builtin__.int]) -> None:
        L_self.self = self
        L_self.cb = cb
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        self: Apa = L_self.self
        cb: $action[(__builtin__.int,), __builtin__.int] = L_self.cb
        return self.setupG_local(C_cont, cb)
    proc def __exec__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
class L_8proc ($proc[(), __builtin__.int], __builtin__.value):
    @property
    self : Apa
    @property
    cb : $action[(__builtin__.int,), __builtin__.int]
    pure def __init__ (L_self : Self, self : Apa, cb : $action[(__builtin__.int,), __builtin__.int]) -> None:
        L_self.self = self
        L_self.cb = cb
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        self: Apa = L_self.self
        cb: $action[(__builtin__.int,), __builtin__.int] = L_self.cb
        return self.computeG_local(C_cont, cb)
    proc def __exec__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
class L_9proc ($proc[(), __builtin__.int], __builtin__.value):
    @property
    self : Apa
    @property
    i : __builtin__.int
    pure def __init__ (L_self : Self, self : Apa, i : __builtin__.int) -> None:
        L_self.self = self
        L_self.i = i
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        self: Apa = L_self.self
        i: __builtin__.int = L_self.i
        return self.noticeG_local(C_cont, i)
    proc def __exec__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
class L_10proc ($proc[(), __builtin__.int], __builtin__.value):
    @property
    self : Bepa
    @property
    i : __builtin__.int
    pure def __init__ (L_self : Self, self : Bepa, i : __builtin__.int) -> None:
        L_self.self = self
        L_self.i = i
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        self: Bepa = L_self.self
        i: __builtin__.int = L_self.i
        return self.callbackG_local(C_cont, i)
    proc def __exec__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
class L_14action ($action[(__builtin__.int,), __builtin__.int], $proc[(__builtin__.int,), __builtin__.int], __builtin__.value):
    @property
    L_13obj : Apa
    pure def __init__ (L_self : Self, L_13obj : Apa) -> None:
        L_self.L_13obj = L_13obj
        return None
    # recursive group:
    proc def __call__ (L_self : Self, L_cont : $Cont[__builtin__.int], G_1 : __builtin__.int) -> $R:
        return $AWAIT@[__builtin__.int](L_cont, L_self.__asyn__(G_1))
    proc def __exec__ (L_self : Self, L_cont : $Cont[__builtin__.value], G_1 : __builtin__.int) -> $R:
        return $R_CONT@[__builtin__.value](L_cont, L_self.__asyn__(G_1))
    action def __asyn__ (L_self : Self, G_1 : __builtin__.int) -> __builtin__.int:
        L_13obj: Apa = L_self.L_13obj
        return L_13obj.notice(G_1)
    # (recursive group)
class L_16action ($action[(__builtin__.int,), __builtin__.int], $proc[(__builtin__.int,), __builtin__.int], __builtin__.value):
    @property
    L_15obj : Bepa
    pure def __init__ (L_self : Self, L_15obj : Bepa) -> None:
        L_self.L_15obj = L_15obj
        return None
    # recursive group:
    proc def __call__ (L_self : Self, L_cont : $Cont[__builtin__.int], G_1 : __builtin__.int) -> $R:
        return $AWAIT@[__builtin__.int](L_cont, L_self.__asyn__(G_1))
    proc def __exec__ (L_self : Self, L_cont : $Cont[__builtin__.value], G_1 : __builtin__.int) -> $R:
        return $R_CONT@[__builtin__.value](L_cont, L_self.__asyn__(G_1))
    action def __asyn__ (L_self : Self, G_1 : __builtin__.int) -> __builtin__.int:
        L_15obj: Bepa = L_self.L_15obj
        return L_15obj.callback(G_1)
    # (recursive group)
class L_19action ($action[(__builtin__.int,), __builtin__.int], $proc[(__builtin__.int,), __builtin__.int], __builtin__.value):
    @property
    L_18obj : main
    pure def __init__ (L_self : Self, L_18obj : main) -> None:
        L_self.L_18obj = L_18obj
        return None
    # recursive group:
    proc def __call__ (L_self : Self, L_cont : $Cont[__builtin__.int], G_1 : __builtin__.int) -> $R:
        return $AWAIT@[__builtin__.int](L_cont, L_self.__asyn__(G_1))
    proc def __exec__ (L_self : Self, L_cont : $Cont[__builtin__.value], G_1 : __builtin__.int) -> $R:
        return $R_CONT@[__builtin__.value](L_cont, L_self.__asyn__(G_1))
    action def __asyn__ (L_self : Self, G_1 : __builtin__.int) -> __builtin__.int:
        L_18obj: main = L_self.L_18obj
        return L_18obj.myproc(G_1)
    # (recursive group)
proc def L_17C_9cont (self : main, C_cont : $Cont[None], C_10res : __builtin__.int) -> $R:
    self.r = C_10res
    print@[(__builtin__.str, __builtin__.int)](("\"r =\"", self.r), None, None, None, None)
    (async self.a.compute)(L_19action(self))
    print@[(__builtin__.str,)](("\"main\"",), None, None, None, None)
    return $R_CONT@[None](C_cont, None)
class L_20Cont ($Cont[__builtin__.int], __builtin__.value):
    @property
    self : main
    @property
    C_cont : $Cont[None]
    pure def __init__ (L_self : Self, self : main, C_cont : $Cont[None]) -> None:
        L_self.self = self
        L_self.C_cont = C_cont
        return None
    proc def __call__ (L_self : Self, G_1 : __builtin__.int) -> $R:
        self: main = L_self.self
        C_cont: $Cont[None] = L_self.C_cont
        return L_17C_9cont(self, C_cont, G_1)
proc def L_12C_7cont (self : main, C_cont : $Cont[None], C_8res : Bepa) -> $R:
    self.b = C_8res
    print@[(__builtin__.str,)](("\"-----\"",), None, None, None, None)
    (async self.a.setup)(L_14action(self.a))
    self.x = (async self.a.compute)(L_16action(self.b))
    return $AWAIT@[__builtin__.int](L_20Cont(self, C_cont), self.x)
class L_21Cont ($Cont[Bepa], __builtin__.value):
    @property
    self : main
    @property
    C_cont : $Cont[None]
    pure def __init__ (L_self : Self, self : main, C_cont : $Cont[None]) -> None:
        L_self.self = self
        L_self.C_cont = C_cont
        return None
    proc def __call__ (L_self : Self, G_1 : Bepa) -> $R:
        self: main = L_self.self
        C_cont: $Cont[None] = L_self.C_cont
        return L_12C_7cont(self, C_cont, G_1)
proc def L_11C_5cont (self : main, C_cont : $Cont[None], C_6res : Apa) -> $R:
    self.a = C_6res
    return BepaG_newact(L_21Cont(self, C_cont))
class L_22Cont ($Cont[Apa], __builtin__.value):
    @property
    self : main
    @property
    C_cont : $Cont[None]
    pure def __init__ (L_self : Self, self : main, C_cont : $Cont[None]) -> None:
        L_self.self = self
        L_self.C_cont = C_cont
        return None
    proc def __call__ (L_self : Self, G_1 : Apa) -> $R:
        self: main = L_self.self
        C_cont: $Cont[None] = L_self.C_cont
        return L_11C_5cont(self, C_cont, G_1)
class L_23proc ($proc[(), __builtin__.int], __builtin__.value):
    @property
    self : main
    @property
    i : __builtin__.int
    pure def __init__ (L_self : Self, self : main, i : __builtin__.int) -> None:
        L_self.self = self
        L_self.i = i
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        self: main = L_self.self
        i: __builtin__.int = L_self.i
        return self.myprocG_local(C_cont, i)
    proc def __exec__ (L_self : Self, C_cont : $Cont[__builtin__.int]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
proc def L_24C_11cont (C_cont : $Cont[Apa], G_act : Apa, C_12res : None) -> $R:
    return $R_CONT@[Apa](C_cont, G_act)
class L_25Cont ($Cont[None], __builtin__.value):
    @property
    C_cont : $Cont[Apa]
    @property
    G_act : Apa
    pure def __init__ (L_self : Self, C_cont : $Cont[Apa], G_act : Apa) -> None:
        L_self.C_cont = C_cont
        L_self.G_act = G_act
        return None
    proc def __call__ (L_self : Self, G_1 : None) -> $R:
        C_cont: $Cont[Apa] = L_self.C_cont
        G_act: Apa = L_self.G_act
        return L_24C_11cont(C_cont, G_act, G_1)
class L_26proc ($proc[(), None], __builtin__.value):
    @property
    G_act : Apa
    pure def __init__ (L_self : Self, G_act : Apa) -> None:
        L_self.G_act = G_act
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        G_act: Apa = L_self.G_act
        return G_act.__init__(C_cont)
    proc def __exec__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
proc def L_27C_13cont (C_cont : $Cont[Bepa], G_act : Bepa, C_14res : None) -> $R:
    return $R_CONT@[Bepa](C_cont, G_act)
class L_28Cont ($Cont[None], __builtin__.value):
    @property
    C_cont : $Cont[Bepa]
    @property
    G_act : Bepa
    pure def __init__ (L_self : Self, C_cont : $Cont[Bepa], G_act : Bepa) -> None:
        L_self.C_cont = C_cont
        L_self.G_act = G_act
        return None
    proc def __call__ (L_self : Self, G_1 : None) -> $R:
        C_cont: $Cont[Bepa] = L_self.C_cont
        G_act: Bepa = L_self.G_act
        return L_27C_13cont(C_cont, G_act, G_1)
class L_29proc ($proc[(), None], __builtin__.value):
    @property
    G_act : Bepa
    pure def __init__ (L_self : Self, G_act : Bepa) -> None:
        L_self.G_act = G_act
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        G_act: Bepa = L_self.G_act
        return G_act.__init__(C_cont)
    proc def __exec__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
proc def L_30C_15cont (C_cont : $Cont[main], G_act : main, C_16res : None) -> $R:
    return $R_CONT@[main](C_cont, G_act)
class L_31Cont ($Cont[None], __builtin__.value):
    @property
    C_cont : $Cont[main]
    @property
    G_act : main
    pure def __init__ (L_self : Self, C_cont : $Cont[main], G_act : main) -> None:
        L_self.C_cont = C_cont
        L_self.G_act = G_act
        return None
    proc def __call__ (L_self : Self, G_1 : None) -> $R:
        C_cont: $Cont[main] = L_self.C_cont
        G_act: main = L_self.G_act
        return L_30C_15cont(C_cont, G_act, G_1)
class L_32proc ($proc[(), None], __builtin__.value):
    @property
    G_act : main
    @property
    env : __builtin__.Env
    pure def __init__ (L_self : Self, G_act : main, env : __builtin__.Env) -> None:
        L_self.G_act = G_act
        L_self.env = env
        return None
    # recursive group:
    proc def __call__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        G_act: main = L_self.G_act
        env: __builtin__.Env = L_self.env
        return G_act.__init__(C_cont, env)
    proc def __exec__ (L_self : Self, C_cont : $Cont[None]) -> $R:
        return L_self.__call__(C_cont)
    # (recursive group)
class Apa ($Actor, __builtin__.value):
    proc def __init__ (self : Self, C_cont : $Cont[None]) -> $R:
        return self.setupG_local(L_2Cont(C_cont), L_4action(self))
    proc def setupG_local (self : Self, C_cont : $Cont[None], cb : $action[(__builtin__.int,), __builtin__.int]) -> $R:
        print@[(__builtin__.str,)](("\"setup\"",), None, None, None, None)
        cb.__asyn__(W_221.__fromatom__(0))
        return $R_CONT@[None](C_cont, None)
    proc def computeG_local (self : Self, C_cont : $Cont[__builtin__.int], cb : $action[(__builtin__.int,), __builtin__.int]) -> $R:
        print@[(__builtin__.str,)](("\"compute\"",), None, None, None, None)
        return $AWAIT@[__builtin__.int](L_6Cont(cb, C_cont), cb.__asyn__(W_221.__fromatom__(1)))
    proc def noticeG_local (self : Self, C_cont : $Cont[__builtin__.int], i : __builtin__.int) -> $R:
        print@[(__builtin__.str,)](("\"notice\"",), None, None, None, None)
        N_1tmp: __builtin__.int = W_586.__add__(i, W_221.__fromatom__(1))
        return $R_CONT@[__builtin__.int](C_cont, N_1tmp)
    action def setup (self : Self, cb : $action[(__builtin__.int,), __builtin__.int]) -> None:
        return $ASYNC@[None](self, L_7proc(self, cb))
    action def compute (self : Self, cb : $action[(__builtin__.int,), __builtin__.int]) -> __builtin__.int:
        return $ASYNC@[__builtin__.int](self, L_8proc(self, cb))
    action def notice (self : Self, i : __builtin__.int) -> __builtin__.int:
        return $ASYNC@[__builtin__.int](self, L_9proc(self, i))
class Bepa ($Actor, __builtin__.value):
    proc def __init__ (self : Self, C_cont : $Cont[None]) -> $R:
        print@[(__builtin__.str,)](("\"Bepa\"",), None, None, None, None)
        return $R_CONT@[None](C_cont, None)
    proc def callbackG_local (self : Self, C_cont : $Cont[__builtin__.int], i : __builtin__.int) -> $R:
        print@[(__builtin__.str, __builtin__.int)](("\"callback\"", i), None, None, None, None)
        N_2tmp: __builtin__.int = W_586.__add__(i, W_221.__fromatom__(1))
        return $R_CONT@[__builtin__.int](C_cont, N_2tmp)
    action def callback (self : Self, i : __builtin__.int) -> __builtin__.int:
        return $ASYNC@[__builtin__.int](self, L_10proc(self, i))
class main ($Actor, __builtin__.value):
    @property
    env : __builtin__.Env
    @property
    a : Apa
    @property
    b : Bepa
    @property
    x : __builtin__.Msg[__builtin__.int]
    @property
    r : __builtin__.int
    proc def __init__ (self : Self, C_cont : $Cont[None], env : __builtin__.Env) -> $R:
        self.env = env
        return ApaG_newact(L_22Cont(self, C_cont))
    proc def myprocG_local (self : Self, C_cont : $Cont[__builtin__.int], i : __builtin__.int) -> $R:
        print@[(__builtin__.str, __builtin__.int)](("\"myproc\"", i), None, None, None, None)
        if W_761.__eq__(i, W_221.__fromatom__(2)):
            (async self.env.exit)(W_221.__fromatom__(0))
        return $R_CONT@[__builtin__.int](C_cont, i)
    action def myproc (self : Self, i : __builtin__.int) -> __builtin__.int:
        return $ASYNC@[__builtin__.int](self, L_23proc(self, i))
proc def ApaG_newact (C_cont : $Cont[Apa]) -> $R:
    G_act: Apa = $NEWACTOR@[Apa]()
    $GCfinalizer@[Apa](G_act)
    return $AWAIT@[None](L_25Cont(C_cont, G_act), $ASYNC@[None](G_act, L_26proc(G_act)))
proc def BepaG_newact (C_cont : $Cont[Bepa]) -> $R:
    G_act: Bepa = $NEWACTOR@[Bepa]()
    $GCfinalizer@[Bepa](G_act)
    return $AWAIT@[None](L_28Cont(C_cont, G_act), $ASYNC@[None](G_act, L_29proc(G_act)))
proc def mainG_newact (C_cont : $Cont[main], env : __builtin__.Env) -> $R:
    G_act: main = $NEWACTOR@[main]()
    $GCfinalizer@[main](G_act)
    return $AWAIT@[None](L_31Cont(C_cont, G_act), $ASYNC@[None](G_act, L_32proc(G_act, env)))
# (recursive group)