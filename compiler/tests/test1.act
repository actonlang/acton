# Copyright (C) 2019-2021 Data Ductus AB
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

def f0(x : ?int):
    return x + 7 if x is not None else 0

def f1(x : ?(int)->int):
    return x(7) if x is not None else 0

def f2(x : ?int):
    return x is None

def f3(x : ?int):
    return x == 7

def f4(x : ?int):
    return x + 7 if x is not None else 0

def f5(x : ?int):
    return x+1 if x is not None and x > 0 else 0

def f6(x : ?(?int)):
    return (x + 7 if x is not None else 1) if x is not None else 0

def f7a(x : ?int):
    return x == 7

#def f9(x : str):
#    return x == True       # Cannot solve: atom < T, T(Eq)

def f10(x : bool):
    return 'A' if x else 'B'

def f11():
    return 'A' 'B'

def f12(x : Exception):
    return 1 if isinstance(x, NotImplementedError) else 2

def f13(x : atom):
    return x if isinstance(x, int) else -1

def f14():
    a = (1, False, "hello" + "world")

    b0 = a.0
    b1 = a.1
    b2 = a.2

    c0 = a.~0
    c1 = a.~1
    c2 = a.~2

    x = (apa = 1, bepa = False, cepa = "hello" "world")

    y0 = x.apa
    y1 = x.bepa
    y2 = x.cepa

    z0 = x.~apa
    z1 = x.~bepa
    z2 = x.~cepa

    (p0,p1,p2) = a
    (apa=q0,bepa=q1,cepa=q2) = x

def f15(x):
    return "%d %%" % x

def f16(x,y,z):
    return "%*f %s" % (x,y,z)

def f17(x):
    return "%s %f" % x
