"""Constructs for spawning and interacting with sub-processes
"""

class ProcessAuth():
    def __init__(self, auth: WorldAuth):
        pass

actor Process(auth: ProcessAuth, cmd: list[str], workdir: ?str, env: ?dict[str, str], on_stdout: action(Process, bytes) -> None, on_stderr: action(Process, bytes) -> None, on_exit: action(Process, ?str, int, int) -> None):
    """A process
    - auth: authentication token
    - cmd: the command to run
    - workdir: working directory, use None for current directory
    - env: environment for process, use None to inherit current environment
    - on_stdout: stdout callback actor method
    - on_stderr: stderr callback actor method
    - on_exit: exit callback, also used for errors
      - process
      - error, or None if no error
      - exit code
      - signal that caused program to exit
    """
    _p = 0

    def _force_persistance():
        """Trick compiler into persisting the actor arguments we need.

        Compiler optimizes so that only variables that are used are persisted to
        the DB. Since we use these variables from C, the compiler doesn't see
        them, thus we need to trick it. This method should never be called.
        """
        print(cmd, workdir, env, on_stdout, on_stderr, on_exit, _p)

    def _create_process():
        """Do the C magic to actually create a process and talk to it
        """
        NotImplemented

    action def done_writing() -> None:
        """Close stdin of process

        Closing stdin allows cat to terminate
        """
        NotImplemented

    action def pid() -> ?int:
        """Get PID of process or None if the process is not running
        """
        NotImplemented

    action def signal(signal: int) -> None:
        """Send signal to process

        Sends the provided signal to the process.
        """
        NotImplemented

    action def write(data: bytes) -> None:
        """Write data to stdin of process
        """
        NotImplemented

    def kill():
        """Abrubtly kill process by sending SIGKILL
        """
        signal(9)

    def terminate():
        """Stop process by sending SIGTERM
        """
        signal(15)

    def stop():
        """Stop process

        Attempts to stop process using normal means, which means SIGTERM on a
        Unix system. After 1 second, SIGKILL is sent to ensure the process is
        stopped.
        """
        terminate()
        after 1: kill()

    _create_process()


def _force_ext():
    """Force compilation using .ext.c

    Only top level functions are recognized as externally defined by actonc
    TODO: fix in actonc and remove this
    """
    NotImplemented
